/*! For license information please see sipjs-card-doorbell.js.LICENSE.txt */
(()=>{"use strict";var e={342:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let s=0,r=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(s++,"%c"===e&&(r=s))})),t.splice(r,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(714)(t);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},714:(e,t,n)=>{e.exports=function(e){function t(e){let n,r,i,o=null;function l(...e){if(!l.enabled)return;const s=l,r=Number(new Date),i=r-(n||r);s.diff=i,s.prev=n,s.curr=r,n=r,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,r)=>{if("%%"===n)return"%";o++;const i=t.formatters[r];if("function"==typeof i){const t=e[o];n=i.call(s,t),e.splice(o,1),o--}return n})),t.formatArgs.call(s,e),(s.log||t.log).apply(s,e)}return l.namespace=e,l.useColors=t.useColors(),l.color=t.selectColor(e),l.extend=s,l.destroy=t.destroy,Object.defineProperty(l,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(r!==t.namespaces&&(r=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(l),l}function s(e,n){const s=t(this.namespace+(void 0===n?":":n)+e);return s.log=this.log,s}function r(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(r),...t.skips.map(r).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const s=("string"==typeof e?e:"").split(/[\s,]+/),r=s.length;for(n=0;n<r;n++)s[n]&&("-"===(e=s[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,s;for(n=0,s=t.skips.length;n<s;n++)if(t.skips[n].test(e))return!1;for(n=0,s=t.names.length;n<s;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(965),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},99:e=>{var t,n="object"==typeof Reflect?Reflect:null,s=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var r=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,s){function r(n){e.removeListener(t,i),s(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}f(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&f(e,"error",t,{once:!0})}(e,r)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function a(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,n,s){var r,i,o,u;if(l(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),o=i[t]),void 0===o)o=i[t]=n,++e._eventsCount;else if("function"==typeof o?o=i[t]=s?[n,o]:[o,n]:s?o.unshift(n):o.push(n),(r=a(e))>0&&o.length>r&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=c.bind(s);return r.listener=n,s.wrapFn=r,r}function d(e,t,n){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):p(r,r.length)}function _(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),s=0;s<t;++s)n[s]=e[s];return n}function f(e,t,n,s){if("function"==typeof e.on)s.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(i){s.once&&e.removeEventListener(t,r),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return a(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var l=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw l.context=o,l}var a=i[e];if(void 0===a)return!1;if("function"==typeof a)s(a,this,t);else{var u=a.length,c=p(a,u);for(n=0;n<u;++n)s(c[n],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return l(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,s,r,i,o;if(l(t),void 0===(s=this._events))return this;if(void 0===(n=s[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){o=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(s[e]=n[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,s;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,i=Object.keys(n);for(s=0;s<i.length;++s)"removeListener"!==(r=i[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):_.call(e,t)},i.prototype.listenerCount=_,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},561:(e,t,n)=>{const s=n(911),r=n(937),i=n(845),o=n(258),l=n(497),a=n(247);t.settings={authorization_user:null,password:null,realm:null,ha1:null,authorization_jwt:null,display_name:null,uri:null,contact_uri:null,instance_id:null,use_preloaded_route:!1,session_timers:!0,session_timers_refresh_method:r.UPDATE,session_timers_force_refresher:!1,no_answer_timeout:60,register:!0,register_expires:600,registrar_server:null,sockets:null,connection_recovery_max_interval:r.CONNECTION_RECOVERY_MAX_INTERVAL,connection_recovery_min_interval:r.CONNECTION_RECOVERY_MIN_INTERVAL,via_host:`${s.createRandomToken(12)}.invalid`};const u={mandatory:{sockets(e){const t=[];if(l.isSocket(e))t.push({socket:e});else{if(!Array.isArray(e)||!e.length)return;for(const n of e)Object.prototype.hasOwnProperty.call(n,"socket")&&l.isSocket(n.socket)?t.push(n):l.isSocket(n)&&t.push({socket:n})}return t},uri(e){/^sip:/i.test(e)||(e=`${r.SIP}:${e}`);const t=o.parse(e);return t&&t.user?t:void 0}},optional:{authorization_user:e=>-1===i.parse(`"${e}"`,"quoted_string")?void 0:e,authorization_jwt(e){if("string"==typeof e)return e},user_agent(e){if("string"==typeof e)return e},connection_recovery_max_interval(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},connection_recovery_min_interval(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},contact_uri(e){if("string"==typeof e){const t=i.parse(e,"SIP_URI");if(-1!==t)return t}},display_name:e=>e,instance_id:e=>(/^uuid:/i.test(e)&&(e=e.substr(5)),-1===i.parse(e,"uuid")?void 0:e),no_answer_timeout(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},session_timers(e){if("boolean"==typeof e)return e},session_timers_refresh_method(e){if("string"==typeof e&&((e=e.toUpperCase())===r.INVITE||e===r.UPDATE))return e},session_timers_force_refresher(e){if("boolean"==typeof e)return e},password:e=>String(e),realm:e=>String(e),ha1:e=>String(e),register(e){if("boolean"==typeof e)return e},register_expires(e){if(s.isDecimal(e)){const t=Number(e);if(t>0)return t}},registrar_server(e){/^sip:/i.test(e)||(e=`${r.SIP}:${e}`);const t=o.parse(e);return t?t.user?void 0:t:void 0},use_preloaded_route(e){if("boolean"==typeof e)return e}}};t.load=(e,t)=>{for(const n in u.mandatory){if(!t.hasOwnProperty(n))throw new a.ConfigurationError(n);{const s=t[n],r=u.mandatory[n](s);if(void 0===r)throw new a.ConfigurationError(n,s);e[n]=r}}for(const n in u.optional)if(t.hasOwnProperty(n)){const r=t[n];if(s.isEmpty(r))continue;const i=u.optional[n](r);if(void 0===i)throw new a.ConfigurationError(n,r);e[n]=i}}},937:(e,t,n)=>{const s=n(403);e.exports={USER_AGENT:`${s.title} ${s.version}`,SIP:"sip",SIPS:"sips",causes:{CONNECTION_ERROR:"Connection Error",REQUEST_TIMEOUT:"Request Timeout",SIP_FAILURE_CODE:"SIP Failure Code",INTERNAL_ERROR:"Internal Error",BUSY:"Busy",REJECTED:"Rejected",REDIRECTED:"Redirected",UNAVAILABLE:"Unavailable",NOT_FOUND:"Not Found",ADDRESS_INCOMPLETE:"Address Incomplete",INCOMPATIBLE_SDP:"Incompatible SDP",MISSING_SDP:"Missing SDP",AUTHENTICATION_ERROR:"Authentication Error",BYE:"Terminated",WEBRTC_ERROR:"WebRTC Error",CANCELED:"Canceled",NO_ANSWER:"No Answer",EXPIRES:"Expires",NO_ACK:"No ACK",DIALOG_ERROR:"Dialog Error",USER_DENIED_MEDIA_ACCESS:"User Denied Media Access",BAD_MEDIA_DESCRIPTION:"Bad Media Description",RTP_TIMEOUT:"RTP Timeout"},SIP_ERROR_CAUSES:{REDIRECTED:[300,301,302,305,380],BUSY:[486,600],REJECTED:[403,603],NOT_FOUND:[404,604],UNAVAILABLE:[480,410,408,430],ADDRESS_INCOMPLETE:[484,424],INCOMPATIBLE_SDP:[488,606],AUTHENTICATION_ERROR:[401,407]},ACK:"ACK",BYE:"BYE",CANCEL:"CANCEL",INFO:"INFO",INVITE:"INVITE",MESSAGE:"MESSAGE",NOTIFY:"NOTIFY",OPTIONS:"OPTIONS",REGISTER:"REGISTER",REFER:"REFER",UPDATE:"UPDATE",SUBSCRIBE:"SUBSCRIBE",DTMF_TRANSPORT:{INFO:"INFO",RFC2833:"RFC2833"},REASON_PHRASE:{100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",424:"Bad Location Information",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"JsSIP Internal Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"},ALLOWED_METHODS:"INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY",ACCEPTED_BODY_TYPES:"application/sdp, application/dtmf-relay",MAX_FORWARDS:69,SESSION_EXPIRES:90,MIN_SESSION_EXPIRES:60,CONNECTION_RECOVERY_MAX_INTERVAL:30,CONNECTION_RECOVERY_MIN_INTERVAL:2}},849:(e,t,n)=>{const s=n(835),r=n(490),i=n(937),o=n(478),l=n(917),a=n(911),u=new s("Dialog"),c={STATUS_EARLY:1,STATUS_CONFIRMED:2};e.exports=class{static get C(){return c}constructor(e,t,n,s=c.STATUS_CONFIRMED){if(this._owner=e,this._ua=e._ua,this._uac_pending_reply=!1,this._uas_pending_reply=!1,!t.hasHeader("contact"))return{error:"unable to create a Dialog without Contact header field"};t instanceof r.IncomingResponse&&(s=t.status_code<200?c.STATUS_EARLY:c.STATUS_CONFIRMED);const i=t.parseHeader("contact");"UAS"===n?(this._id={call_id:t.call_id,local_tag:t.to_tag,remote_tag:t.from_tag,toString(){return this.call_id+this.local_tag+this.remote_tag}},this._state=s,this._remote_seqnum=t.cseq,this._local_uri=t.parseHeader("to").uri,this._remote_uri=t.parseHeader("from").uri,this._remote_target=i.uri,this._route_set=t.getHeaders("record-route"),this._ack_seqnum=this._remote_seqnum):"UAC"===n&&(this._id={call_id:t.call_id,local_tag:t.from_tag,remote_tag:t.to_tag,toString(){return this.call_id+this.local_tag+this.remote_tag}},this._state=s,this._local_seqnum=t.cseq,this._local_uri=t.parseHeader("from").uri,this._remote_uri=t.parseHeader("to").uri,this._remote_target=i.uri,this._route_set=t.getHeaders("record-route").reverse(),this._ack_seqnum=null),this._ua.newDialog(this),u.debug(`new ${n} dialog created with status ${this._state===c.STATUS_EARLY?"EARLY":"CONFIRMED"}`)}get id(){return this._id}get local_seqnum(){return this._local_seqnum}set local_seqnum(e){this._local_seqnum=e}get owner(){return this._owner}get uac_pending_reply(){return this._uac_pending_reply}set uac_pending_reply(e){this._uac_pending_reply=e}get uas_pending_reply(){return this._uas_pending_reply}update(e,t){this._state=c.STATUS_CONFIRMED,u.debug(`dialog ${this._id.toString()}  changed to CONFIRMED state`),"UAC"===t&&(this._route_set=e.getHeaders("record-route").reverse())}terminate(){u.debug(`dialog ${this._id.toString()} deleted`),this._ua.destroyDialog(this)}sendRequest(e,t={}){const n=a.cloneArray(t.extraHeaders),s=a.cloneObject(t.eventHandlers),r=t.body||null,i=this._createRequest(e,n,r);return s.onAuthenticated=()=>{this._local_seqnum+=1},new l(this,i,s).send(),i}receiveRequest(e){this._checkInDialogRequest(e)&&(e.method===i.ACK&&null!==this._ack_seqnum?this._ack_seqnum=null:e.method===i.INVITE&&(this._ack_seqnum=e.cseq),this._owner.receiveRequest(e))}_createRequest(e,t,n){t=a.cloneArray(t),this._local_seqnum||(this._local_seqnum=Math.floor(1e4*Math.random()));const s=e===i.CANCEL||e===i.ACK?this._local_seqnum:this._local_seqnum+=1;return new r.OutgoingRequest(e,this._remote_target,this._ua,{cseq:s,call_id:this._id.call_id,from_uri:this._local_uri,from_tag:this._id.local_tag,to_uri:this._remote_uri,to_tag:this._id.remote_tag,route_set:this._route_set},t,n)}_checkInDialogRequest(e){if(this._remote_seqnum)if(e.cseq<this._remote_seqnum){if(e.method!==i.ACK)return e.reply(500),!1;if(null===this._ack_seqnum||e.cseq!==this._ack_seqnum)return!1}else e.cseq>this._remote_seqnum&&(this._remote_seqnum=e.cseq);else this._remote_seqnum=e.cseq;if(e.method===i.INVITE||e.method===i.UPDATE&&e.body){if(!0===this._uac_pending_reply)e.reply(491);else{if(!0===this._uas_pending_reply){const t=1+(10*Math.random()|0);return e.reply(500,null,[`Retry-After:${t}`]),!1}{this._uas_pending_reply=!0;const t=()=>{e.server_transaction.state!==o.C.STATUS_ACCEPTED&&e.server_transaction.state!==o.C.STATUS_COMPLETED&&e.server_transaction.state!==o.C.STATUS_TERMINATED||(e.server_transaction.removeListener("stateChanged",t),this._uas_pending_reply=!1)};e.server_transaction.on("stateChanged",t)}}e.hasHeader("contact")&&e.server_transaction.on("stateChanged",(()=>{e.server_transaction.state===o.C.STATUS_ACCEPTED&&(this._remote_target=e.parseHeader("contact").uri)}))}else e.method===i.NOTIFY&&e.hasHeader("contact")&&e.server_transaction.on("stateChanged",(()=>{e.server_transaction.state===o.C.STATUS_COMPLETED&&(this._remote_target=e.parseHeader("contact").uri)}));return!0}}},917:(e,t,n)=>{const s=n(937),r=n(478),i=n(178),o=n(915),l={onRequestTimeout:()=>{},onTransportError:()=>{},onSuccessResponse:()=>{},onErrorResponse:()=>{},onAuthenticated:()=>{},onDialogError:()=>{}};e.exports=class{constructor(e,t,n){this._dialog=e,this._ua=e._ua,this._request=t,this._eventHandlers=n,this._reattempt=!1,this._reattemptTimer=null;for(const e in l)Object.prototype.hasOwnProperty.call(l,e)&&(this._eventHandlers[e]||(this._eventHandlers[e]=l[e]))}get request(){return this._request}send(){const e=new o(this._ua,this._request,{onRequestTimeout:()=>{this._eventHandlers.onRequestTimeout()},onTransportError:()=>{this._eventHandlers.onTransportError()},onAuthenticated:e=>{this._eventHandlers.onAuthenticated(e)},onReceiveResponse:e=>{this._receiveResponse(e)}});if(e.send(),(this._request.method===s.INVITE||this._request.method===s.UPDATE&&this._request.body)&&e.clientTransaction.state!==r.C.STATUS_TERMINATED){this._dialog.uac_pending_reply=!0;const t=()=>{e.clientTransaction.state!==r.C.STATUS_ACCEPTED&&e.clientTransaction.state!==r.C.STATUS_COMPLETED&&e.clientTransaction.state!==r.C.STATUS_TERMINATED||(e.clientTransaction.removeListener("stateChanged",t),this._dialog.uac_pending_reply=!1)};e.clientTransaction.on("stateChanged",t)}}_receiveResponse(e){408===e.status_code||481===e.status_code?this._eventHandlers.onDialogError(e):e.method===s.INVITE&&491===e.status_code?this._reattempt?e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e):(this._request.cseq=this._dialog.local_seqnum+=1,this._reattemptTimer=setTimeout((()=>{this._dialog.owner.status!==i.C.STATUS_TERMINATED&&(this._reattempt=!0,this._request_sender.send())}),1e3)):e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e)}}},535:(e,t,n)=>{const s=n(835),r=n(911),i=new s("DigestAuthentication");e.exports=class{constructor(e){this._credentials=e,this._cnonce=null,this._nc=0,this._ncHex="00000000",this._algorithm=null,this._realm=null,this._nonce=null,this._opaque=null,this._stale=null,this._qop=null,this._method=null,this._uri=null,this._ha1=null,this._response=null}get(e){switch(e){case"realm":return this._realm;case"ha1":return this._ha1;default:return void i.warn('get() | cannot get "%s" parameter',e)}}authenticate({method:e,ruri:t,body:n},s,o=null){if(this._algorithm=s.algorithm,this._realm=s.realm,this._nonce=s.nonce,this._opaque=s.opaque,this._stale=s.stale,this._algorithm){if("MD5"!==this._algorithm)return i.warn('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted'),!1}else this._algorithm="MD5";if(!this._nonce)return i.warn("authenticate() | challenge without Digest nonce, authentication aborted"),!1;if(!this._realm)return i.warn("authenticate() | challenge without Digest realm, authentication aborted"),!1;if(!this._credentials.password){if(!this._credentials.ha1)return i.warn("authenticate() | no plain SIP password nor ha1 provided, authentication aborted"),!1;if(this._credentials.realm!==this._realm)return i.warn('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]',this._credentials.realm,this._realm),!1}if(s.qop)if(s.qop.indexOf("auth-int")>-1)this._qop="auth-int";else{if(!(s.qop.indexOf("auth")>-1))return i.warn('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted'),!1;this._qop="auth"}else this._qop=null;this._method=e,this._uri=t,this._cnonce=o||r.createRandomToken(12),this._nc+=1;const l=Number(this._nc).toString(16);let a,u;return this._ncHex="00000000".substr(0,8-l.length)+l,4294967296===this._nc&&(this._nc=1,this._ncHex="00000001"),this._credentials.password?this._ha1=r.calculateMD5(`${this._credentials.username}:${this._realm}:${this._credentials.password}`):this._ha1=this._credentials.ha1,"auth"===this._qop?(a=`${this._method}:${this._uri}`,u=r.calculateMD5(a),i.debug('authenticate() | using qop=auth [a2:"%s"]',a),this._response=r.calculateMD5(`${this._ha1}:${this._nonce}:${this._ncHex}:${this._cnonce}:auth:${u}`)):"auth-int"===this._qop?(a=`${this._method}:${this._uri}:${r.calculateMD5(n||"")}`,u=r.calculateMD5(a),i.debug('authenticate() | using qop=auth-int [a2:"%s"]',a),this._response=r.calculateMD5(`${this._ha1}:${this._nonce}:${this._ncHex}:${this._cnonce}:auth-int:${u}`)):null===this._qop&&(a=`${this._method}:${this._uri}`,u=r.calculateMD5(a),i.debug('authenticate() | using qop=null [a2:"%s"]',a),this._response=r.calculateMD5(`${this._ha1}:${this._nonce}:${u}`)),i.debug("authenticate() | response generated"),!0}toString(){const e=[];if(!this._response)throw new Error("response field does not exist, cannot generate Authorization header");return e.push(`algorithm=${this._algorithm}`),e.push(`username="${this._credentials.username}"`),e.push(`realm="${this._realm}"`),e.push(`nonce="${this._nonce}"`),e.push(`uri="${this._uri}"`),e.push(`response="${this._response}"`),this._opaque&&e.push(`opaque="${this._opaque}"`),this._qop&&(e.push(`qop=${this._qop}`),e.push(`cnonce="${this._cnonce}"`),e.push(`nc=${this._ncHex}`)),`Digest ${e.join(", ")}`}}},247:e=>{class t extends Error{constructor(e,t){super(),this.code=1,this.name="CONFIGURATION_ERROR",this.parameter=e,this.value=t,this.message=this.value?`Invalid value ${JSON.stringify(this.value)} for parameter "${this.parameter}"`:`Missing parameter: ${this.parameter}`}}class n extends Error{constructor(e){super(),this.code=2,this.name="INVALID_STATE_ERROR",this.status=e,this.message=`Invalid status: ${e}`}}class s extends Error{constructor(e){super(),this.code=3,this.name="NOT_SUPPORTED_ERROR",this.message=e}}class r extends Error{constructor(e){super(),this.code=4,this.name="NOT_READY_ERROR",this.message=e}}e.exports={ConfigurationError:t,InvalidStateError:n,NotSupportedError:s,NotReadyError:r}},845:(e,t,n)=>{e.exports=function(){function e(e){return'"'+e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}var t={parse:function(t,s){var r={CRLF:u,DIGIT:c,ALPHA:h,HEXDIG:d,WSP:_,OCTET:p,DQUOTE:f,SP:m,HTAB:g,alphanum:v,reserved:T,unreserved:b,mark:C,escaped:S,LWS:A,SWS:E,HCOLON:y,TEXT_UTF8_TRIM:w,TEXT_UTF8char:R,UTF8_NONASCII:I,UTF8_CONT:x,LHEX:function(){var e;return null===(e=c())&&(/^[a-f]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[a-f]"))),e},token:O,token_nodot:N,separators:function(){var e;return 40===t.charCodeAt(i)?(e="(",i++):(e=null,a('"("')),null===e&&(41===t.charCodeAt(i)?(e=")",i++):(e=null,a('")"')),null===e&&(60===t.charCodeAt(i)?(e="<",i++):(e=null,a('"<"')),null===e&&(62===t.charCodeAt(i)?(e=">",i++):(e=null,a('">"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,a('"@"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,a('","')),null===e&&(59===t.charCodeAt(i)?(e=";",i++):(e=null,a('";"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,a('":"')),null===e&&(92===t.charCodeAt(i)?(e="\\",i++):(e=null,a('"\\\\"')),null===e&&null===(e=f())&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,a('"/"')),null===e&&(91===t.charCodeAt(i)?(e="[",i++):(e=null,a('"["')),null===e&&(93===t.charCodeAt(i)?(e="]",i++):(e=null,a('"]"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,a('"?"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,a('"="')),null===e&&(123===t.charCodeAt(i)?(e="{",i++):(e=null,a('"{"')),null===e&&(125===t.charCodeAt(i)?(e="}",i++):(e=null,a('"}"')),null===e&&null===(e=m())&&(e=g())))))))))))))))),e},word:$,STAR:P,SLASH:U,EQUAL:D,LPAREN:M,RPAREN:H,RAQUOT:q,LAQUOT:k,COMMA:L,SEMI:F,COLON:j,LDQUOT:G,RDQUOT:z,comment:function e(){var t,n,s,r;if(r=i,null!==(t=M())){for(n=[],null===(s=V())&&null===(s=K())&&(s=e());null!==s;)n.push(s),null===(s=V())&&null===(s=K())&&(s=e());null!==n&&null!==(s=H())?t=[t,n,s]:(t=null,i=r)}else t=null,i=r;return t},ctext:V,quoted_string:W,quoted_string_clean:B,qdtext:Y,quoted_pair:K,SIP_URI_noparams:J,SIP_URI:X,uri_scheme:Q,uri_scheme_sips:Z,uri_scheme_sip:ee,userinfo:te,user:ne,user_unreserved:se,password:re,hostport:ie,host:oe,hostname:le,domainlabel:ae,toplabel:ue,IPv6reference:ce,IPv6address:he,h16:de,ls32:_e,IPv4address:pe,dec_octet:fe,port:me,uri_parameters:ge,uri_parameter:ve,transport_param:Te,user_param:be,method_param:Ce,ttl_param:Se,maddr_param:Ae,lr_param:Ee,other_param:ye,pname:we,pvalue:Re,paramchar:Ie,param_unreserved:xe,headers:Oe,header:Ne,hname:$e,hvalue:Pe,hnv_unreserved:Ue,Request_Response:function(){var e;return null===(e=ct())&&(e=De()),e},Request_Line:De,Request_URI:Me,absoluteURI:He,hier_part:qe,net_path:ke,abs_path:Le,opaque_part:Fe,uric:je,uric_no_slash:Ge,path_segments:ze,segment:Ve,param:We,pchar:Be,scheme:Ye,authority:Ke,srvr:Je,reg_name:Xe,query:Qe,SIP_Version:Ze,INVITEm:et,ACKm:tt,OPTIONSm:nt,BYEm:st,CANCELm:rt,REGISTERm:it,SUBSCRIBEm:ot,NOTIFYm:lt,REFERm:at,Method:ut,Status_Line:ct,Status_Code:ht,extension_code:dt,Reason_Phrase:_t,Allow_Events:function(){var e,t,n,s,r,o;if(r=i,null!==(e=Ht())){for(t=[],o=i,null!==(n=L())&&null!==(s=Ht())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=Ht())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Call_ID:function(){var e,n,s,r,o,l;return r=i,o=i,null!==(e=$())?(l=i,64===t.charCodeAt(i)?(n="@",i++):(n=null,a('"@"')),null!==n&&null!==(s=$())?n=[n,s]:(n=null,i=l),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){Ln=t.substring(i,e)}(r)),null===e&&(i=r),e},Contact:function(){var e,t,n,s,r,o,l;if(r=i,null===(e=P()))if(o=i,null!==(e=pt())){for(t=[],l=i,null!==(n=L())&&null!==(s=pt())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=L())&&null!==(s=pt())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){var t,n;for(n=Ln.multi_header.length,t=0;t<n;t++)if(null===Ln.multi_header[t].parsed){Ln=null;break}Ln=null!==Ln?Ln.multi_header:-1}()),null===e&&(i=r),e},contact_param:pt,name_addr:ft,display_name:mt,contact_params:gt,c_p_q:vt,c_p_expires:Tt,delta_seconds:bt,qvalue:Ct,generic_param:St,gen_value:At,Content_Disposition:function(){var e,t,n,s,r,o;if(r=i,null!==(e=Et())){for(t=[],o=i,null!==(n=F())&&null!==(s=yt())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=yt())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},disp_type:Et,disp_param:yt,handling_param:wt,Content_Encoding:function(){var e,t,n,s,r,o;if(r=i,null!==(e=O())){for(t=[],o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Content_Length:function(){var e,t,n;if(n=i,null!==(t=c()))for(e=[];null!==t;)e.push(t),t=c();else e=null;return null!==e&&(e=void(Ln=parseInt(e.join("")))),null===e&&(i=n),e},Content_Type:function(){var e,n;return n=i,null!==(e=Rt())&&(e=function(e){Ln=t.substring(i,e)}(n)),null===e&&(i=n),e},media_type:Rt,m_type:It,discrete_type:xt,composite_type:Ot,extension_token:Nt,x_token:$t,m_subtype:Pt,m_parameter:Ut,m_value:Dt,CSeq:function(){var e,t,n,s;return s=i,null!==(e=Mt())&&null!==(t=A())&&null!==(n=ut())?e=[e,t,n]:(e=null,i=s),e},CSeq_value:Mt,Expires:function(){var e,t;return t=i,null!==(e=bt())&&(e=void(Ln=e)),null===e&&(i=t),e},Event:function(){var e,t,n,s,r,o,l,a;if(r=i,o=i,null!==(e=Ht())){for(t=[],l=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(a=e[0],e=void(Ln.event=a.join("").toLowerCase())),null===e&&(i=r),e},event_type:Ht,From:function(){var e,t,n,s,r,o,l;if(r=i,o=i,null===(e=J())&&(e=ft()),null!==e){for(t=[],l=i,null!==(n=F())&&null!==(s=qt())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=qt())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){var t=Ln.tag;try{Ln=new kn(Ln.uri,Ln.display_name,Ln.params),t&&Ln.setParam("tag",t)}catch(e){Ln=-1}}()),null===e&&(i=r),e},from_param:qt,tag_param:kt,Max_Forwards:function(){var e,t,n;if(n=i,null!==(t=c()))for(e=[];null!==t;)e.push(t),t=c();else e=null;return null!==e&&(e=void(Ln=parseInt(e.join("")))),null===e&&(i=n),e},Min_Expires:function(){var e,t;return t=i,null!==(e=bt())&&(e=void(Ln=e)),null===e&&(i=t),e},Name_Addr_Header:function(){var e,t,n,s,r,o,l,a,u,c;for(a=i,u=i,e=[],t=mt();null!==t;)e.push(t),t=mt();if(null!==e)if(null!==(t=k()))if(null!==(n=X()))if(null!==(s=q())){for(r=[],c=i,null!==(o=F())&&null!==(l=St())?o=[o,l]:(o=null,i=c);null!==o;)r.push(o),c=i,null!==(o=F())&&null!==(l=St())?o=[o,l]:(o=null,i=c);null!==r?e=[e,t,n,s,r]:(e=null,i=u)}else e=null,i=u;else e=null,i=u;else e=null,i=u;else e=null,i=u;return null!==e&&(e=function(e){try{Ln=new kn(Ln.uri,Ln.display_name,Ln.params)}catch(e){Ln=-1}}()),null===e&&(i=a),e},Proxy_Authenticate:function(){return Lt()},challenge:Lt,other_challenge:Ft,auth_param:jt,digest_cln:Gt,realm:zt,realm_value:Vt,domain:Wt,URI:Bt,nonce:Yt,nonce_value:Kt,opaque:Jt,stale:Xt,algorithm:Qt,qop_options:Zt,qop_value:en,Proxy_Require:function(){var e,t,n,s,r,o;if(r=i,null!==(e=O())){for(t=[],o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Record_Route:function(){var e,t,n,s,r,o,l;if(r=i,o=i,null!==(e=tn())){for(t=[],l=i,null!==(n=L())&&null!==(s=tn())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=L())&&null!==(s=tn())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){var t,n;for(n=Ln.multi_header.length,t=0;t<n;t++)if(null===Ln.multi_header[t].parsed){Ln=null;break}Ln=null!==Ln?Ln.multi_header:-1}()),null===e&&(i=r),e},rec_route:tn,Reason:function(){var e,n,s,r,o,l,u;if(o=i,l=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"SIP"')),null===e&&(e=O()),null!==e){for(n=[],u=i,null!==(s=F())&&null!==(r=nn())?s=[s,r]:(s=null,i=u);null!==s;)n.push(s),u=i,null!==(s=F())&&null!==(r=nn())?s=[s,r]:(s=null,i=u);null!==n?e=[e,n]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(e,t){if(Ln.protocol=t.toLowerCase(),Ln.params||(Ln.params={}),Ln.params.text&&'"'===Ln.params.text[0]){var n=Ln.params.text;Ln.text=n.substring(1,n.length-1),delete Ln.params.text}}(0,e[0])),null===e&&(i=o),e},reason_param:nn,reason_cause:sn,Require:function(){var e,t,n,s,r,o;if(r=i,null!==(e=O())){for(t=[],o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},Route:function(){var e,t,n,s,r,o;if(r=i,null!==(e=rn())){for(t=[],o=i,null!==(n=L())&&null!==(s=rn())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=rn())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},route_param:rn,Subscription_State:function(){var e,t,n,s,r,o;if(r=i,null!==(e=on())){for(t=[],o=i,null!==(n=F())&&null!==(s=ln())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=ln())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},substate_value:on,subexp_params:ln,event_reason_value:an,Subject:function(){var e;return null!==(e=w())?e:""},Supported:function(){var e,t,n,s,r,o;if(r=i,null!==(e=O())){for(t=[],o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=O())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return null!==e?e:""},To:function(){var e,t,n,s,r,o,l;if(r=i,o=i,null===(e=J())&&(e=ft()),null!==e){for(t=[],l=i,null!==(n=F())&&null!==(s=un())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=un())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){var t=Ln.tag;try{Ln=new kn(Ln.uri,Ln.display_name,Ln.params),t&&Ln.setParam("tag",t)}catch(e){Ln=-1}}()),null===e&&(i=r),e},to_param:un,Via:function(){var e,t,n,s,r,o;if(r=i,null!==(e=cn())){for(t=[],o=i,null!==(n=L())&&null!==(s=cn())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=L())&&null!==(s=cn())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},via_param:cn,via_params:hn,via_ttl:dn,via_maddr:_n,via_received:pn,via_branch:fn,response_port:mn,rport:gn,sent_protocol:vn,protocol_name:Tn,transport:bn,sent_by:Cn,via_host:Sn,via_port:An,ttl:En,WWW_Authenticate:function(){return Lt()},Session_Expires:function(){var e,t,n,s,r,o;if(r=i,null!==(e=yn())){for(t=[],o=i,null!==(n=F())&&null!==(s=wn())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=wn())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},s_e_expires:yn,s_e_params:wn,s_e_refresher:Rn,extension_header:function(){var e,t,n,s;return s=i,null!==(e=O())&&null!==(t=y())&&null!==(n=In())?e=[e,t,n]:(e=null,i=s),e},header_value:In,message_body:function(){var e,t;for(e=[],t=p();null!==t;)e.push(t),t=p();return e},uuid_URI:function(){var e,n,s;return s=i,"uuid:"===t.substr(i,5)?(e="uuid:",i+=5):(e=null,a('"uuid:"')),null!==e&&null!==(n=xn())?e=[e,n]:(e=null,i=s),e},uuid:xn,hex4:On,hex8:Nn,hex12:$n,Refer_To:function(){var e,t,n,s,r,o,l;if(r=i,o=i,null===(e=J())&&(e=ft()),null!==e){for(t=[],l=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){try{Ln=new kn(Ln.uri,Ln.display_name,Ln.params)}catch(e){Ln=-1}}()),null===e&&(i=r),e},Replaces:function(){var e,t,n,s,r,o;if(r=i,null!==(e=Pn())){for(t=[],o=i,null!==(n=F())&&null!==(s=Un())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=Un())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e},call_id:Pn,replaces_param:Un,to_tag:Dn,from_tag:Mn,early_flag:Hn};if(void 0!==s){if(void 0===r[s])throw new Error("Invalid rule name: "+e(s)+".")}else s="CRLF";var i=0,o=0,l=[];function a(e){i<o||(i>o&&(o=i,l=[]),l.push(e))}function u(){var e;return"\r\n"===t.substr(i,2)?(e="\r\n",i+=2):(e=null,a('"\\r\\n"')),e}function c(){var e;return/^[0-9]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[0-9]")),e}function h(){var e;return/^[a-zA-Z]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[a-zA-Z]")),e}function d(){var e;return/^[0-9a-fA-F]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[0-9a-fA-F]")),e}function _(){var e;return null===(e=m())&&(e=g()),e}function p(){var e;return/^[\0-\xFF]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[\\0-\\xFF]")),e}function f(){var e;return/^["]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a('["]')),e}function m(){var e;return 32===t.charCodeAt(i)?(e=" ",i++):(e=null,a('" "')),e}function g(){var e;return 9===t.charCodeAt(i)?(e="\t",i++):(e=null,a('"\\t"')),e}function v(){var e;return/^[a-zA-Z0-9]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[a-zA-Z0-9]")),e}function T(){var e;return 59===t.charCodeAt(i)?(e=";",i++):(e=null,a('";"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,a('"/"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,a('"?"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,a('":"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,a('"@"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,a('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,a('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,a('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,a('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,a('","'))))))))))),e}function b(){var e;return null===(e=v())&&(e=C()),e}function C(){var e;return 45===t.charCodeAt(i)?(e="-",i++):(e=null,a('"-"')),null===e&&(95===t.charCodeAt(i)?(e="_",i++):(e=null,a('"_"')),null===e&&(46===t.charCodeAt(i)?(e=".",i++):(e=null,a('"."')),null===e&&(33===t.charCodeAt(i)?(e="!",i++):(e=null,a('"!"')),null===e&&(126===t.charCodeAt(i)?(e="~",i++):(e=null,a('"~"')),null===e&&(42===t.charCodeAt(i)?(e="*",i++):(e=null,a('"*"')),null===e&&(39===t.charCodeAt(i)?(e="'",i++):(e=null,a('"\'"')),null===e&&(40===t.charCodeAt(i)?(e="(",i++):(e=null,a('"("')),null===e&&(41===t.charCodeAt(i)?(e=")",i++):(e=null,a('")"')))))))))),e}function S(){var e,n,s,r,o;return r=i,o=i,37===t.charCodeAt(i)?(e="%",i++):(e=null,a('"%"')),null!==e&&null!==(n=d())&&null!==(s=d())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=e.join("")),null===e&&(i=r),e}function A(){var e,t,n,s,r,o;for(s=i,r=i,o=i,e=[],t=_();null!==t;)e.push(t),t=_();if(null!==e&&null!==(t=u())?e=[e,t]:(e=null,i=o),null!==(e=null!==e?e:"")){if(null!==(n=_()))for(t=[];null!==n;)t.push(n),n=_();else t=null;null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return null!==e&&(e=" "),null===e&&(i=s),e}function E(){var e;return null!==(e=A())?e:""}function y(){var e,n,s,r,o;for(r=i,o=i,e=[],null===(n=m())&&(n=g());null!==n;)e.push(n),null===(n=m())&&(n=g());return null!==e?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=":"),null===e&&(i=r),e}function w(){var e,n,s,r,o,l,a;if(o=i,l=i,null!==(n=R()))for(e=[];null!==n;)e.push(n),n=R();else e=null;if(null!==e){for(n=[],a=i,s=[],r=A();null!==r;)s.push(r),r=A();for(null!==s&&null!==(r=R())?s=[s,r]:(s=null,i=a);null!==s;){for(n.push(s),a=i,s=[],r=A();null!==r;)s.push(r),r=A();null!==s&&null!==(r=R())?s=[s,r]:(s=null,i=a)}null!==n?e=[e,n]:(e=null,i=l)}else e=null,i=l;return null!==e&&(e=function(e){return t.substring(i,e)}(o)),null===e&&(i=o),e}function R(){var e;return/^[!-~]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[!-~]")),null===e&&(e=I()),e}function I(){var e;return/^[\x80-\uFFFF]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[\\x80-\\uFFFF]")),e}function x(){var e;return/^[\x80-\xBF]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[\\x80-\\xBF]")),e}function O(){var e,n,s;if(s=i,null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,a('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,a('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,a('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,a('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,a('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,a('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,a('"~"')))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,a('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,a('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,a('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,a('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,a('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,a('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,a('"~"'))))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(i,e)}(s)),null===e&&(i=s),e}function N(){var e,n,s;if(s=i,null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,a('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,a('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,a('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,a('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,a('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,a('"~"'))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,a('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,a('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,a('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,a('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,a('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,a('"~"')))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(i,e)}(s)),null===e&&(i=s),e}function $(){var e,n,s;if(s=i,null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,a('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,a('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,a('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,a('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,a('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,a('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,a('"~"')),null===n&&(40===t.charCodeAt(i)?(n="(",i++):(n=null,a('"("')),null===n&&(41===t.charCodeAt(i)?(n=")",i++):(n=null,a('")"')),null===n&&(60===t.charCodeAt(i)?(n="<",i++):(n=null,a('"<"')),null===n&&(62===t.charCodeAt(i)?(n=">",i++):(n=null,a('">"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null===n&&(92===t.charCodeAt(i)?(n="\\",i++):(n=null,a('"\\\\"')),null===n&&null===(n=f())&&(47===t.charCodeAt(i)?(n="/",i++):(n=null,a('"/"')),null===n&&(91===t.charCodeAt(i)?(n="[",i++):(n=null,a('"["')),null===n&&(93===t.charCodeAt(i)?(n="]",i++):(n=null,a('"]"')),null===n&&(63===t.charCodeAt(i)?(n="?",i++):(n=null,a('"?"')),null===n&&(123===t.charCodeAt(i)?(n="{",i++):(n=null,a('"{"')),null===n&&(125===t.charCodeAt(i)?(n="}",i++):(n=null,a('"}"')))))))))))))))))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=v())&&(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null===n&&(46===t.charCodeAt(i)?(n=".",i++):(n=null,a('"."')),null===n&&(33===t.charCodeAt(i)?(n="!",i++):(n=null,a('"!"')),null===n&&(37===t.charCodeAt(i)?(n="%",i++):(n=null,a('"%"')),null===n&&(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null===n&&(95===t.charCodeAt(i)?(n="_",i++):(n=null,a('"_"')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(96===t.charCodeAt(i)?(n="`",i++):(n=null,a('"`"')),null===n&&(39===t.charCodeAt(i)?(n="'",i++):(n=null,a('"\'"')),null===n&&(126===t.charCodeAt(i)?(n="~",i++):(n=null,a('"~"')),null===n&&(40===t.charCodeAt(i)?(n="(",i++):(n=null,a('"("')),null===n&&(41===t.charCodeAt(i)?(n=")",i++):(n=null,a('")"')),null===n&&(60===t.charCodeAt(i)?(n="<",i++):(n=null,a('"<"')),null===n&&(62===t.charCodeAt(i)?(n=">",i++):(n=null,a('">"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null===n&&(92===t.charCodeAt(i)?(n="\\",i++):(n=null,a('"\\\\"')),null===n&&null===(n=f())&&(47===t.charCodeAt(i)?(n="/",i++):(n=null,a('"/"')),null===n&&(91===t.charCodeAt(i)?(n="[",i++):(n=null,a('"["')),null===n&&(93===t.charCodeAt(i)?(n="]",i++):(n=null,a('"]"')),null===n&&(63===t.charCodeAt(i)?(n="?",i++):(n=null,a('"?"')),null===n&&(123===t.charCodeAt(i)?(n="{",i++):(n=null,a('"{"')),null===n&&(125===t.charCodeAt(i)?(n="}",i++):(n=null,a('"}"'))))))))))))))))))))))));else e=null;return null!==e&&(e=function(e){return t.substring(i,e)}(s)),null===e&&(i=s),e}function P(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(42===t.charCodeAt(i)?(n="*",i++):(n=null,a('"*"')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="*"),null===e&&(i=r),e}function U(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(47===t.charCodeAt(i)?(n="/",i++):(n=null,a('"/"')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="/"),null===e&&(i=r),e}function D(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="="),null===e&&(i=r),e}function M(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(40===t.charCodeAt(i)?(n="(",i++):(n=null,a('"("')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e="("),null===e&&(i=r),e}function H(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(41===t.charCodeAt(i)?(n=")",i++):(n=null,a('")"')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=")"),null===e&&(i=r),e}function q(){var e,n,s,r;return s=i,r=i,62===t.charCodeAt(i)?(e=">",i++):(e=null,a('">"')),null!==e&&null!==(n=E())?e=[e,n]:(e=null,i=r),null!==e&&(e=">"),null===e&&(i=s),e}function k(){var e,n,s,r;return s=i,r=i,null!==(e=E())?(60===t.charCodeAt(i)?(n="<",i++):(n=null,a('"<"')),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==e&&(e="<"),null===e&&(i=s),e}function L(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(44===t.charCodeAt(i)?(n=",",i++):(n=null,a('","')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=","),null===e&&(i=r),e}function F(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(59===t.charCodeAt(i)?(n=";",i++):(n=null,a('";"')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=";"),null===e&&(i=r),e}function j(){var e,n,s,r,o;return r=i,o=i,null!==(e=E())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=E())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=":"),null===e&&(i=r),e}function G(){var e,t,n,s;return n=i,s=i,null!==(e=E())&&null!==(t=f())?e=[e,t]:(e=null,i=s),null!==e&&(e='"'),null===e&&(i=n),e}function z(){var e,t,n,s;return n=i,s=i,null!==(e=f())&&null!==(t=E())?e=[e,t]:(e=null,i=s),null!==e&&(e='"'),null===e&&(i=n),e}function V(){var e;return/^[!-']/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[!-']")),null===e&&(/^[*-[]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[*-[]")),null===e&&(/^[\]-~]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[\\]-~]")),null===e&&null===(e=I())&&(e=A()))),e}function W(){var e,n,s,r,o,l;if(o=i,l=i,null!==(e=E()))if(null!==(n=f())){for(s=[],null===(r=Y())&&(r=K());null!==r;)s.push(r),null===(r=Y())&&(r=K());null!==s&&null!==(r=f())?e=[e,n,s,r]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;return null!==e&&(e=function(e){return t.substring(i,e)}(o)),null===e&&(i=o),e}function B(){var e,n,s,r,o,l;if(o=i,l=i,null!==(e=E()))if(null!==(n=f())){for(s=[],null===(r=Y())&&(r=K());null!==r;)s.push(r),null===(r=Y())&&(r=K());null!==s&&null!==(r=f())?e=[e,n,s,r]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;return null!==e&&(e=function(e){var n=t.substring(i,e).trim();return n.substring(1,n.length-1).replace(/\\([\x00-\x09\x0b-\x0c\x0e-\x7f])/g,"$1")}(o)),null===e&&(i=o),e}function Y(){var e;return null===(e=A())&&(33===t.charCodeAt(i)?(e="!",i++):(e=null,a('"!"')),null===e&&(/^[#-[]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[#-[]")),null===e&&(/^[\]-~]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[\\]-~]")),null===e&&(e=I())))),e}function K(){var e,n,s;return s=i,92===t.charCodeAt(i)?(e="\\",i++):(e=null,a('"\\\\"')),null!==e?(/^[\0-\t]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,a("[\\0-\\t]")),null===n&&(/^[\x0B-\f]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,a("[\\x0B-\\f]")),null===n&&(/^[\x0E-]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,a("[\\x0E-]")))),null!==n?e=[e,n]:(e=null,i=s)):(e=null,i=s),e}function J(){var e,n,s,r,o,l;return o=i,l=i,null!==(e=Q())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=null!==(s=te())?s:"")&&null!==(r=ie())?e=[e,n,s,r]:(e=null,i=l)):(e=null,i=l),null!==e&&(e=function(e){try{Ln.uri=new qn(Ln.scheme,Ln.user,Ln.host,Ln.port),delete Ln.scheme,delete Ln.user,delete Ln.host,delete Ln.host_type,delete Ln.port}catch(e){Ln=-1}}()),null===e&&(i=o),e}function X(){var e,n,r,o,l,u,c,h;return c=i,h=i,null!==(e=Q())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(r=null!==(r=te())?r:"")&&null!==(o=ie())&&null!==(l=ge())&&null!==(u=null!==(u=Oe())?u:"")?e=[e,n,r,o,l,u]:(e=null,i=h)):(e=null,i=h),null!==e&&(e=function(e){try{Ln.uri=new qn(Ln.scheme,Ln.user,Ln.host,Ln.port,Ln.uri_params,Ln.uri_headers),delete Ln.scheme,delete Ln.user,delete Ln.host,delete Ln.host_type,delete Ln.port,delete Ln.uri_params,"SIP_URI"===s&&(Ln=Ln.uri)}catch(e){Ln=-1}}()),null===e&&(i=c),e}function Q(){var e;return null===(e=Z())&&(e=ee()),e}function Z(){var e,n,s;return n=i,"sips"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,a('"sips"')),null!==e&&(s=e,e=void(Ln.scheme=s.toLowerCase())),null===e&&(i=n),e}function ee(){var e,n,s;return n=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"sip"')),null!==e&&(s=e,e=void(Ln.scheme=s.toLowerCase())),null===e&&(i=n),e}function te(){var e,n,s,r,o,l;return r=i,o=i,null!==(e=ne())?(l=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=re())?n=[n,s]:(n=null,i=l),null!==(n=null!==n?n:"")?(64===t.charCodeAt(i)?(s="@",i++):(s=null,a('"@"')),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){Ln.user=decodeURIComponent(t.substring(i-1,e))}(r)),null===e&&(i=r),e}function ne(){var e,t;if(null===(t=b())&&null===(t=S())&&(t=se()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=b())&&null===(t=S())&&(t=se());else e=null;return e}function se(){var e;return 38===t.charCodeAt(i)?(e="&",i++):(e=null,a('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,a('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,a('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,a('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,a('","')),null===e&&(59===t.charCodeAt(i)?(e=";",i++):(e=null,a('";"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,a('"?"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,a('"/"'))))))))),e}function re(){var e,n,s;for(s=i,e=[],null===(n=b())&&null===(n=S())&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,a('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,a('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,a('","')))))));null!==n;)e.push(n),null===(n=b())&&null===(n=S())&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,a('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')),null===n&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,a('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,a('","')))))));return null!==e&&(e=function(e){Ln.password=t.substring(i,e)}(s)),null===e&&(i=s),e}function ie(){var e,n,s,r,o;return r=i,null!==(e=oe())?(o=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=me())?n=[n,s]:(n=null,i=o),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=r)):(e=null,i=r),e}function oe(){var e,n;return n=i,null===(e=le())&&null===(e=pe())&&(e=ce()),null!==e&&(e=function(e){return Ln.host=t.substring(i,e).toLowerCase(),Ln.host}(n)),null===e&&(i=n),e}function le(){var e,n,s,r,o,l;for(r=i,o=i,e=[],l=i,null!==(n=ae())?(46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')),null!==s?n=[n,s]:(n=null,i=l)):(n=null,i=l);null!==n;)e.push(n),l=i,null!==(n=ae())?(46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')),null!==s?n=[n,s]:(n=null,i=l)):(n=null,i=l);return null!==e&&null!==(n=ue())?(46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')),null!==(s=null!==s?s:"")?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){return Ln.host_type="domain",t.substring(i,e)}(r)),null===e&&(i=r),e}function ae(){var e,n,s,r;if(r=i,null!==(e=v())){for(n=[],null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,a('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,a('"_"'))));null!==s;)n.push(s),null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,a('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,a('"_"'))));null!==n?e=[e,n]:(e=null,i=r)}else e=null,i=r;return e}function ue(){var e,n,s,r;if(r=i,null!==(e=h())){for(n=[],null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,a('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,a('"_"'))));null!==s;)n.push(s),null===(s=v())&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,a('"-"')),null===s&&(95===t.charCodeAt(i)?(s="_",i++):(s=null,a('"_"'))));null!==n?e=[e,n]:(e=null,i=r)}else e=null,i=r;return e}function ce(){var e,n,s,r,o;return r=i,o=i,91===t.charCodeAt(i)?(e="[",i++):(e=null,a('"["')),null!==e&&null!==(n=he())?(93===t.charCodeAt(i)?(s="]",i++):(s=null,a('"]"')),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){return Ln.host_type="IPv6",t.substring(i,e)}(r)),null===e&&(i=r),e}function he(){var e,n,s,r,o,l,u,c,h,d,_,p,f,m,g,v;return m=i,g=i,null!==(e=de())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?(58===t.charCodeAt(i)?(r=":",i++):(r=null,a('":"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(i)?(l=":",i++):(l=null,a('":"')),null!==l&&null!==(u=de())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,a('":"')),null!==c&&null!==(h=de())?(58===t.charCodeAt(i)?(d=":",i++):(d=null,a('":"')),null!==d&&null!==(_=de())?(58===t.charCodeAt(i)?(p=":",i++):(p=null,a('":"')),null!==p&&null!==(f=_e())?e=[e,n,s,r,o,l,u,c,h,d,_,p,f]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?(58===t.charCodeAt(i)?(u=":",i++):(u=null,a('":"')),null!==u&&null!==(c=de())?(58===t.charCodeAt(i)?(h=":",i++):(h=null,a('":"')),null!==h&&null!==(d=de())?(58===t.charCodeAt(i)?(_=":",i++):(_=null,a('":"')),null!==_&&null!==(p=_e())?e=[e,n,s,r,o,l,u,c,h,d,_,p]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?(58===t.charCodeAt(i)?(u=":",i++):(u=null,a('":"')),null!==u&&null!==(c=de())?(58===t.charCodeAt(i)?(h=":",i++):(h=null,a('":"')),null!==h&&null!==(d=_e())?e=[e,n,s,r,o,l,u,c,h,d]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?(58===t.charCodeAt(i)?(u=":",i++):(u=null,a('":"')),null!==u&&null!==(c=_e())?e=[e,n,s,r,o,l,u,c]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=_e())?e=[e,n,s,r,o,l]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=de())?(58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=_e())?e=[e,n,s,r]:(e=null,i=g)):(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=_e())?e=[e,n]:(e=null,i=g),null===e&&(g=i,"::"===t.substr(i,2)?(e="::",i+=2):(e=null,a('"::"')),null!==e&&null!==(n=de())?e=[e,n]:(e=null,i=g),null===e&&(g=i,null!==(e=de())?("::"===t.substr(i,2)?(n="::",i+=2):(n=null,a('"::"')),null!==n&&null!==(s=de())?(58===t.charCodeAt(i)?(r=":",i++):(r=null,a('":"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(i)?(l=":",i++):(l=null,a('":"')),null!==l&&null!==(u=de())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,a('":"')),null!==c&&null!==(h=de())?(58===t.charCodeAt(i)?(d=":",i++):(d=null,a('":"')),null!==d&&null!==(_=_e())?e=[e,n,s,r,o,l,u,c,h,d,_]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,null!==(e=de())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?("::"===t.substr(i,2)?(s="::",i+=2):(s=null,a('"::"')),null!==s&&null!==(r=de())?(58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?(58===t.charCodeAt(i)?(u=":",i++):(u=null,a('":"')),null!==u&&null!==(c=de())?(58===t.charCodeAt(i)?(h=":",i++):(h=null,a('":"')),null!==h&&null!==(d=_e())?e=[e,n,s,r,o,l,u,c,h,d]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,null!==(e=de())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?("::"===t.substr(i,2)?(r="::",i+=2):(r=null,a('"::"')),null!==r&&null!==(o=de())?(58===t.charCodeAt(i)?(l=":",i++):(l=null,a('":"')),null!==l&&null!==(u=de())?(58===t.charCodeAt(i)?(c=":",i++):(c=null,a('":"')),null!==c&&null!==(h=_e())?e=[e,n,s,r,o,l,u,c,h]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,null!==(e=de())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,a('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?("::"===t.substr(i,2)?(o="::",i+=2):(o=null,a('"::"')),null!==o&&null!==(l=de())?(58===t.charCodeAt(i)?(u=":",i++):(u=null,a('":"')),null!==u&&null!==(c=_e())?e=[e,n,s,r,o,l,u,c]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,null!==(e=de())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,a('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?(v=i,58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?o=[o,l]:(o=null,i=v),null!==(o=null!==o?o:"")?("::"===t.substr(i,2)?(l="::",i+=2):(l=null,a('"::"')),null!==l&&null!==(u=_e())?e=[e,n,s,r,o,l,u]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,null!==(e=de())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,a('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?(v=i,58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?o=[o,l]:(o=null,i=v),null!==(o=null!==o?o:"")?(v=i,58===t.charCodeAt(i)?(l=":",i++):(l=null,a('":"')),null!==l&&null!==(u=de())?l=[l,u]:(l=null,i=v),null!==(l=null!==l?l:"")?("::"===t.substr(i,2)?(u="::",i+=2):(u=null,a('"::"')),null!==u&&null!==(c=de())?e=[e,n,s,r,o,l,u,c]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g),null===e&&(g=i,null!==(e=de())?(v=i,58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?n=[n,s]:(n=null,i=v),null!==(n=null!==n?n:"")?(v=i,58===t.charCodeAt(i)?(s=":",i++):(s=null,a('":"')),null!==s&&null!==(r=de())?s=[s,r]:(s=null,i=v),null!==(s=null!==s?s:"")?(v=i,58===t.charCodeAt(i)?(r=":",i++):(r=null,a('":"')),null!==r&&null!==(o=de())?r=[r,o]:(r=null,i=v),null!==(r=null!==r?r:"")?(v=i,58===t.charCodeAt(i)?(o=":",i++):(o=null,a('":"')),null!==o&&null!==(l=de())?o=[o,l]:(o=null,i=v),null!==(o=null!==o?o:"")?(v=i,58===t.charCodeAt(i)?(l=":",i++):(l=null,a('":"')),null!==l&&null!==(u=de())?l=[l,u]:(l=null,i=v),null!==(l=null!==l?l:"")?(v=i,58===t.charCodeAt(i)?(u=":",i++):(u=null,a('":"')),null!==u&&null!==(c=de())?u=[u,c]:(u=null,i=v),null!==(u=null!==u?u:"")?("::"===t.substr(i,2)?(c="::",i+=2):(c=null,a('"::"')),null!==c?e=[e,n,s,r,o,l,u,c]:(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g)):(e=null,i=g))))))))))))))),null!==e&&(e=function(e){return Ln.host_type="IPv6",t.substring(i,e)}(m)),null===e&&(i=m),e}function de(){var e,t,n,s,r;return r=i,null!==(e=d())&&null!==(t=null!==(t=d())?t:"")&&null!==(n=null!==(n=d())?n:"")&&null!==(s=null!==(s=d())?s:"")?e=[e,t,n,s]:(e=null,i=r),e}function _e(){var e,n,s,r;return r=i,null!==(e=de())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n&&null!==(s=de())?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),null===e&&(e=pe()),e}function pe(){var e,n,s,r,o,l,u,c,h;return c=i,h=i,null!==(e=fe())?(46===t.charCodeAt(i)?(n=".",i++):(n=null,a('"."')),null!==n&&null!==(s=fe())?(46===t.charCodeAt(i)?(r=".",i++):(r=null,a('"."')),null!==r&&null!==(o=fe())?(46===t.charCodeAt(i)?(l=".",i++):(l=null,a('"."')),null!==l&&null!==(u=fe())?e=[e,n,s,r,o,l,u]:(e=null,i=h)):(e=null,i=h)):(e=null,i=h)):(e=null,i=h),null!==e&&(e=function(e){return Ln.host_type="IPv4",t.substring(i,e)}(c)),null===e&&(i=c),e}function fe(){var e,n,s,r;return r=i,"25"===t.substr(i,2)?(e="25",i+=2):(e=null,a('"25"')),null!==e?(/^[0-5]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,a("[0-5]")),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null===e&&(r=i,50===t.charCodeAt(i)?(e="2",i++):(e=null,a('"2"')),null!==e?(/^[0-4]/.test(t.charAt(i))?(n=t.charAt(i),i++):(n=null,a("[0-4]")),null!==n&&null!==(s=c())?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),null===e&&(r=i,49===t.charCodeAt(i)?(e="1",i++):(e=null,a('"1"')),null!==e&&null!==(n=c())&&null!==(s=c())?e=[e,n,s]:(e=null,i=r),null===e&&(r=i,/^[1-9]/.test(t.charAt(i))?(e=t.charAt(i),i++):(e=null,a("[1-9]")),null!==e&&null!==(n=c())?e=[e,n]:(e=null,i=r),null===e&&(e=c())))),e}function me(){var e,t,n,s,r,o,l,a;return o=i,l=i,null!==(e=null!==(e=c())?e:"")&&null!==(t=null!==(t=c())?t:"")&&null!==(n=null!==(n=c())?n:"")&&null!==(s=null!==(s=c())?s:"")&&null!==(r=null!==(r=c())?r:"")?e=[e,t,n,s,r]:(e=null,i=l),null!==e&&(a=e,a=parseInt(a.join("")),Ln.port=a,e=a),null===e&&(i=o),e}function ge(){var e,n,s,r;for(e=[],r=i,59===t.charCodeAt(i)?(n=";",i++):(n=null,a('";"')),null!==n&&null!==(s=ve())?n=[n,s]:(n=null,i=r);null!==n;)e.push(n),r=i,59===t.charCodeAt(i)?(n=";",i++):(n=null,a('";"')),null!==n&&null!==(s=ve())?n=[n,s]:(n=null,i=r);return e}function ve(){var e;return null===(e=Te())&&null===(e=be())&&null===(e=Ce())&&null===(e=Se())&&null===(e=Ae())&&null===(e=Ee())&&(e=ye()),e}function Te(){var e,n,s,r,o;return s=i,r=i,"transport="===t.substr(i,10).toLowerCase()?(e=t.substr(i,10),i+=10):(e=null,a('"transport="')),null!==e?("udp"===t.substr(i,3).toLowerCase()?(n=t.substr(i,3),i+=3):(n=null,a('"udp"')),null===n&&("tcp"===t.substr(i,3).toLowerCase()?(n=t.substr(i,3),i+=3):(n=null,a('"tcp"')),null===n&&("sctp"===t.substr(i,4).toLowerCase()?(n=t.substr(i,4),i+=4):(n=null,a('"sctp"')),null===n&&("tls"===t.substr(i,3).toLowerCase()?(n=t.substr(i,3),i+=3):(n=null,a('"tls"')),null===n&&(n=O())))),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==e&&(o=e[1],Ln.uri_params||(Ln.uri_params={}),e=void(Ln.uri_params.transport=o.toLowerCase())),null===e&&(i=s),e}function be(){var e,n,s,r,o;return s=i,r=i,"user="===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"user="')),null!==e?("phone"===t.substr(i,5).toLowerCase()?(n=t.substr(i,5),i+=5):(n=null,a('"phone"')),null===n&&("ip"===t.substr(i,2).toLowerCase()?(n=t.substr(i,2),i+=2):(n=null,a('"ip"')),null===n&&(n=O())),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==e&&(o=e[1],Ln.uri_params||(Ln.uri_params={}),e=void(Ln.uri_params.user=o.toLowerCase())),null===e&&(i=s),e}function Ce(){var e,n,s,r,o;return s=i,r=i,"method="===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"method="')),null!==e&&null!==(n=ut())?e=[e,n]:(e=null,i=r),null!==e&&(o=e[1],Ln.uri_params||(Ln.uri_params={}),e=void(Ln.uri_params.method=o)),null===e&&(i=s),e}function Se(){var e,n,s,r,o;return s=i,r=i,"ttl="===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,a('"ttl="')),null!==e&&null!==(n=En())?e=[e,n]:(e=null,i=r),null!==e&&(o=e[1],Ln.params||(Ln.params={}),e=void(Ln.params.ttl=o)),null===e&&(i=s),e}function Ae(){var e,n,s,r,o;return s=i,r=i,"maddr="===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"maddr="')),null!==e&&null!==(n=oe())?e=[e,n]:(e=null,i=r),null!==e&&(o=e[1],Ln.uri_params||(Ln.uri_params={}),e=void(Ln.uri_params.maddr=o)),null===e&&(i=s),e}function Ee(){var e,n,s,r,o,l;return r=i,o=i,"lr"===t.substr(i,2).toLowerCase()?(e=t.substr(i,2),i+=2):(e=null,a('"lr"')),null!==e?(l=i,61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null!==n&&null!==(s=O())?n=[n,s]:(n=null,i=l),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(Ln.uri_params||(Ln.uri_params={}),e=void(Ln.uri_params.lr=void 0)),null===e&&(i=r),e}function ye(){var e,n,s,r,o,l,u,c;return r=i,o=i,null!==(e=we())?(l=i,61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null!==n&&null!==(s=Re())?n=[n,s]:(n=null,i=l),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(u=e[0],c=e[1],Ln.uri_params||(Ln.uri_params={}),c=void 0===c?void 0:c[1],e=void(Ln.uri_params[u.toLowerCase()]=c)),null===e&&(i=r),e}function we(){var e,t,n;if(n=i,null!==(t=Ie()))for(e=[];null!==t;)e.push(t),t=Ie();else e=null;return null!==e&&(e=e.join("")),null===e&&(i=n),e}function Re(){var e,t,n;if(n=i,null!==(t=Ie()))for(e=[];null!==t;)e.push(t),t=Ie();else e=null;return null!==e&&(e=e.join("")),null===e&&(i=n),e}function Ie(){var e;return null===(e=xe())&&null===(e=b())&&(e=S()),e}function xe(){var e;return 91===t.charCodeAt(i)?(e="[",i++):(e=null,a('"["')),null===e&&(93===t.charCodeAt(i)?(e="]",i++):(e=null,a('"]"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,a('"/"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,a('":"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,a('"&"')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,a('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,a('"$"')))))))),e}function Oe(){var e,n,s,r,o,l,u;if(l=i,63===t.charCodeAt(i)?(e="?",i++):(e=null,a('"?"')),null!==e)if(null!==(n=Ne())){for(s=[],u=i,38===t.charCodeAt(i)?(r="&",i++):(r=null,a('"&"')),null!==r&&null!==(o=Ne())?r=[r,o]:(r=null,i=u);null!==r;)s.push(r),u=i,38===t.charCodeAt(i)?(r="&",i++):(r=null,a('"&"')),null!==r&&null!==(o=Ne())?r=[r,o]:(r=null,i=u);null!==s?e=[e,n,s]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;return e}function Ne(){var e,n,s,r,o,l,u;return r=i,o=i,null!==(e=$e())?(61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null!==n&&null!==(s=Pe())?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(l=e[0],u=e[2],l=l.join("").toLowerCase(),u=u.join(""),Ln.uri_headers||(Ln.uri_headers={}),e=void(Ln.uri_headers[l]?Ln.uri_headers[l].push(u):Ln.uri_headers[l]=[u])),null===e&&(i=r),e}function $e(){var e,t;if(null===(t=Ue())&&null===(t=b())&&(t=S()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=Ue())&&null===(t=b())&&(t=S());else e=null;return e}function Pe(){var e,t;for(e=[],null===(t=Ue())&&null===(t=b())&&(t=S());null!==t;)e.push(t),null===(t=Ue())&&null===(t=b())&&(t=S());return e}function Ue(){var e;return 91===t.charCodeAt(i)?(e="[",i++):(e=null,a('"["')),null===e&&(93===t.charCodeAt(i)?(e="]",i++):(e=null,a('"]"')),null===e&&(47===t.charCodeAt(i)?(e="/",i++):(e=null,a('"/"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,a('"?"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,a('":"')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,a('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,a('"$"')))))))),e}function De(){var e,t,n,s,r,o;return o=i,null!==(e=ut())&&null!==(t=m())&&null!==(n=Me())&&null!==(s=m())&&null!==(r=Ze())?e=[e,t,n,s,r]:(e=null,i=o),e}function Me(){var e;return null===(e=X())&&(e=He()),e}function He(){var e,n,s,r;return r=i,null!==(e=Ye())?(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null!==n?(null===(s=qe())&&(s=Fe()),null!==s?e=[e,n,s]:(e=null,i=r)):(e=null,i=r)):(e=null,i=r),e}function qe(){var e,n,s,r,o;return r=i,null===(e=ke())&&(e=Le()),null!==e?(o=i,63===t.charCodeAt(i)?(n="?",i++):(n=null,a('"?"')),null!==n&&null!==(s=Qe())?n=[n,s]:(n=null,i=o),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=r)):(e=null,i=r),e}function ke(){var e,n,s,r;return r=i,"//"===t.substr(i,2)?(e="//",i+=2):(e=null,a('"//"')),null!==e&&null!==(n=Ke())&&null!==(s=null!==(s=Le())?s:"")?e=[e,n,s]:(e=null,i=r),e}function Le(){var e,n,s;return s=i,47===t.charCodeAt(i)?(e="/",i++):(e=null,a('"/"')),null!==e&&null!==(n=ze())?e=[e,n]:(e=null,i=s),e}function Fe(){var e,t,n,s;if(s=i,null!==(e=Ge())){for(t=[],n=je();null!==n;)t.push(n),n=je();null!==t?e=[e,t]:(e=null,i=s)}else e=null,i=s;return e}function je(){var e;return null===(e=T())&&null===(e=b())&&(e=S()),e}function Ge(){var e;return null===(e=b())&&null===(e=S())&&(59===t.charCodeAt(i)?(e=";",i++):(e=null,a('";"')),null===e&&(63===t.charCodeAt(i)?(e="?",i++):(e=null,a('"?"')),null===e&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,a('":"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,a('"@"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,a('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,a('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,a('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,a('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,a('","'))))))))))),e}function ze(){var e,n,s,r,o,l;if(o=i,null!==(e=Ve())){for(n=[],l=i,47===t.charCodeAt(i)?(s="/",i++):(s=null,a('"/"')),null!==s&&null!==(r=Ve())?s=[s,r]:(s=null,i=l);null!==s;)n.push(s),l=i,47===t.charCodeAt(i)?(s="/",i++):(s=null,a('"/"')),null!==s&&null!==(r=Ve())?s=[s,r]:(s=null,i=l);null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return e}function Ve(){var e,n,s,r,o,l;for(o=i,e=[],n=Be();null!==n;)e.push(n),n=Be();if(null!==e){for(n=[],l=i,59===t.charCodeAt(i)?(s=";",i++):(s=null,a('";"')),null!==s&&null!==(r=We())?s=[s,r]:(s=null,i=l);null!==s;)n.push(s),l=i,59===t.charCodeAt(i)?(s=";",i++):(s=null,a('";"')),null!==s&&null!==(r=We())?s=[s,r]:(s=null,i=l);null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return e}function We(){var e,t;for(e=[],t=Be();null!==t;)e.push(t),t=Be();return e}function Be(){var e;return null===(e=b())&&null===(e=S())&&(58===t.charCodeAt(i)?(e=":",i++):(e=null,a('":"')),null===e&&(64===t.charCodeAt(i)?(e="@",i++):(e=null,a('"@"')),null===e&&(38===t.charCodeAt(i)?(e="&",i++):(e=null,a('"&"')),null===e&&(61===t.charCodeAt(i)?(e="=",i++):(e=null,a('"="')),null===e&&(43===t.charCodeAt(i)?(e="+",i++):(e=null,a('"+"')),null===e&&(36===t.charCodeAt(i)?(e="$",i++):(e=null,a('"$"')),null===e&&(44===t.charCodeAt(i)?(e=",",i++):(e=null,a('","'))))))))),e}function Ye(){var e,n,s,r,o;if(r=i,o=i,null!==(e=h())){for(n=[],null===(s=h())&&null===(s=c())&&(43===t.charCodeAt(i)?(s="+",i++):(s=null,a('"+"')),null===s&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,a('"-"')),null===s&&(46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')))));null!==s;)n.push(s),null===(s=h())&&null===(s=c())&&(43===t.charCodeAt(i)?(s="+",i++):(s=null,a('"+"')),null===s&&(45===t.charCodeAt(i)?(s="-",i++):(s=null,a('"-"')),null===s&&(46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')))));null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){Ln.scheme=t.substring(i,e)}(r)),null===e&&(i=r),e}function Ke(){var e;return null===(e=Je())&&(e=Xe()),e}function Je(){var e,n,s,r;return s=i,r=i,null!==(e=te())?(64===t.charCodeAt(i)?(n="@",i++):(n=null,a('"@"')),null!==n?e=[e,n]:(e=null,i=r)):(e=null,i=r),null!==(e=null!==e?e:"")&&null!==(n=ie())?e=[e,n]:(e=null,i=s),null!==e?e:""}function Xe(){var e,n;if(null===(n=b())&&null===(n=S())&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,a('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,a('","')),null===n&&(59===t.charCodeAt(i)?(n=";",i++):(n=null,a('";"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null===n&&(64===t.charCodeAt(i)?(n="@",i++):(n=null,a('"@"')),null===n&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,a('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"')))))))))),null!==n)for(e=[];null!==n;)e.push(n),null===(n=b())&&null===(n=S())&&(36===t.charCodeAt(i)?(n="$",i++):(n=null,a('"$"')),null===n&&(44===t.charCodeAt(i)?(n=",",i++):(n=null,a('","')),null===n&&(59===t.charCodeAt(i)?(n=";",i++):(n=null,a('";"')),null===n&&(58===t.charCodeAt(i)?(n=":",i++):(n=null,a('":"')),null===n&&(64===t.charCodeAt(i)?(n="@",i++):(n=null,a('"@"')),null===n&&(38===t.charCodeAt(i)?(n="&",i++):(n=null,a('"&"')),null===n&&(61===t.charCodeAt(i)?(n="=",i++):(n=null,a('"="')),null===n&&(43===t.charCodeAt(i)?(n="+",i++):(n=null,a('"+"'))))))))));else e=null;return e}function Qe(){var e,t;for(e=[],t=je();null!==t;)e.push(t),t=je();return e}function Ze(){var e,n,s,r,o,l,u,h;if(u=i,h=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"SIP"')),null!==e)if(47===t.charCodeAt(i)?(n="/",i++):(n=null,a('"/"')),null!==n){if(null!==(r=c()))for(s=[];null!==r;)s.push(r),r=c();else s=null;if(null!==s)if(46===t.charCodeAt(i)?(r=".",i++):(r=null,a('"."')),null!==r){if(null!==(l=c()))for(o=[];null!==l;)o.push(l),l=c();else o=null;null!==o?e=[e,n,s,r,o]:(e=null,i=h)}else e=null,i=h;else e=null,i=h}else e=null,i=h;else e=null,i=h;return null!==e&&(e=function(e){Ln.sip_version=t.substring(i,e)}(u)),null===e&&(i=u),e}function et(){var e;return"INVITE"===t.substr(i,6)?(e="INVITE",i+=6):(e=null,a('"INVITE"')),e}function tt(){var e;return"ACK"===t.substr(i,3)?(e="ACK",i+=3):(e=null,a('"ACK"')),e}function nt(){var e;return"OPTIONS"===t.substr(i,7)?(e="OPTIONS",i+=7):(e=null,a('"OPTIONS"')),e}function st(){var e;return"BYE"===t.substr(i,3)?(e="BYE",i+=3):(e=null,a('"BYE"')),e}function rt(){var e;return"CANCEL"===t.substr(i,6)?(e="CANCEL",i+=6):(e=null,a('"CANCEL"')),e}function it(){var e;return"REGISTER"===t.substr(i,8)?(e="REGISTER",i+=8):(e=null,a('"REGISTER"')),e}function ot(){var e;return"SUBSCRIBE"===t.substr(i,9)?(e="SUBSCRIBE",i+=9):(e=null,a('"SUBSCRIBE"')),e}function lt(){var e;return"NOTIFY"===t.substr(i,6)?(e="NOTIFY",i+=6):(e=null,a('"NOTIFY"')),e}function at(){var e;return"REFER"===t.substr(i,5)?(e="REFER",i+=5):(e=null,a('"REFER"')),e}function ut(){var e,n;return n=i,null===(e=et())&&null===(e=tt())&&null===(e=nt())&&null===(e=st())&&null===(e=rt())&&null===(e=it())&&null===(e=ot())&&null===(e=lt())&&null===(e=at())&&(e=O()),null!==e&&(e=function(e){return Ln.method=t.substring(i,e),Ln.method}(n)),null===e&&(i=n),e}function ct(){var e,t,n,s,r,o;return o=i,null!==(e=Ze())&&null!==(t=m())&&null!==(n=ht())&&null!==(s=m())&&null!==(r=_t())?e=[e,t,n,s,r]:(e=null,i=o),e}function ht(){var e,t,n;return t=i,null!==(e=dt())&&(n=e,e=void(Ln.status_code=parseInt(n.join("")))),null===e&&(i=t),e}function dt(){var e,t,n,s;return s=i,null!==(e=c())&&null!==(t=c())&&null!==(n=c())?e=[e,t,n]:(e=null,i=s),e}function _t(){var e,n,s;for(s=i,e=[],null===(n=T())&&null===(n=b())&&null===(n=S())&&null===(n=I())&&null===(n=x())&&null===(n=m())&&(n=g());null!==n;)e.push(n),null===(n=T())&&null===(n=b())&&null===(n=S())&&null===(n=I())&&null===(n=x())&&null===(n=m())&&(n=g());return null!==e&&(e=function(e){Ln.reason_phrase=t.substring(i,e)}(s)),null===e&&(i=s),e}function pt(){var e,t,n,s,r,o,l;if(r=i,o=i,null===(e=J())&&(e=ft()),null!==e){for(t=[],l=i,null!==(n=F())&&null!==(s=gt())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=gt())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){var t;Ln.multi_header||(Ln.multi_header=[]);try{t=new kn(Ln.uri,Ln.display_name,Ln.params),delete Ln.uri,delete Ln.display_name,delete Ln.params}catch(e){t=null}Ln.multi_header.push({possition:i,offset:e,parsed:t})}(r)),null===e&&(i=r),e}function ft(){var e,t,n,s,r;return r=i,null!==(e=null!==(e=mt())?e:"")&&null!==(t=k())&&null!==(n=X())&&null!==(s=q())?e=[e,t,n,s]:(e=null,i=r),e}function mt(){var e,t,n,s,r,o,l,a;if(r=i,o=i,null!==(e=O())){for(t=[],l=i,null!==(n=A())&&null!==(s=O())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=A())&&null!==(s=O())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null===e&&(e=B()),null!==e&&(a=e,e=void(Ln.display_name="string"==typeof a?a:a[1].reduce((function(e,t){return e+t[0]+t[1]}),a[0]))),null===e&&(i=r),e}function gt(){var e;return null===(e=vt())&&null===(e=Tt())&&(e=St()),e}function vt(){var e,n,s,r,o,l;return r=i,o=i,"q"===t.substr(i,1).toLowerCase()?(e=t.substr(i,1),i++):(e=null,a('"q"')),null!==e&&null!==(n=D())&&null!==(s=Ct())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],Ln.params||(Ln.params={}),e=void(Ln.params.q=l)),null===e&&(i=r),e}function Tt(){var e,n,s,r,o,l;return r=i,o=i,"expires"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"expires"')),null!==e&&null!==(n=D())&&null!==(s=bt())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],Ln.params||(Ln.params={}),e=void(Ln.params.expires=l)),null===e&&(i=r),e}function bt(){var e,t,n;if(n=i,null!==(t=c()))for(e=[];null!==t;)e.push(t),t=c();else e=null;return null!==e&&(e=parseInt(e.join(""))),null===e&&(i=n),e}function Ct(){var e,n,s,r,o,l,u,h;return l=i,u=i,48===t.charCodeAt(i)?(e="0",i++):(e=null,a('"0"')),null!==e?(h=i,46===t.charCodeAt(i)?(n=".",i++):(n=null,a('"."')),null!==n&&null!==(s=null!==(s=c())?s:"")&&null!==(r=null!==(r=c())?r:"")&&null!==(o=null!==(o=c())?o:"")?n=[n,s,r,o]:(n=null,i=h),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=u)):(e=null,i=u),null!==e&&(e=function(e){return parseFloat(t.substring(i,e))}(l)),null===e&&(i=l),e}function St(){var e,t,n,s,r,o,l,a;return s=i,r=i,null!==(e=O())?(o=i,null!==(t=D())&&null!==(n=At())?t=[t,n]:(t=null,i=o),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,i=r)):(e=null,i=r),null!==e&&(l=e[0],a=e[1],Ln.params||(Ln.params={}),a=void 0===a?void 0:a[1],e=void(Ln.params[l.toLowerCase()]=a)),null===e&&(i=s),e}function At(){var e;return null===(e=O())&&null===(e=oe())&&(e=W()),e}function Et(){var e;return"render"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"render"')),null===e&&("session"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"session"')),null===e&&("icon"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,a('"icon"')),null===e&&("alert"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"alert"')),null===e&&(e=O())))),e}function yt(){var e;return null===(e=wt())&&(e=St()),e}function wt(){var e,n,s,r;return r=i,"handling"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,a('"handling"')),null!==e&&null!==(n=D())?("optional"===t.substr(i,8).toLowerCase()?(s=t.substr(i,8),i+=8):(s=null,a('"optional"')),null===s&&("required"===t.substr(i,8).toLowerCase()?(s=t.substr(i,8),i+=8):(s=null,a('"required"')),null===s&&(s=O())),null!==s?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),e}function Rt(){var e,t,n,s,r,o,l,a;if(l=i,null!==(e=It()))if(null!==(t=U()))if(null!==(n=Pt())){for(s=[],a=i,null!==(r=F())&&null!==(o=Ut())?r=[r,o]:(r=null,i=a);null!==r;)s.push(r),a=i,null!==(r=F())&&null!==(o=Ut())?r=[r,o]:(r=null,i=a);null!==s?e=[e,t,n,s]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;else e=null,i=l;return e}function It(){var e;return null===(e=xt())&&(e=Ot()),e}function xt(){var e;return"text"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,a('"text"')),null===e&&("image"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"image"')),null===e&&("audio"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"audio"')),null===e&&("video"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"video"')),null===e&&("application"===t.substr(i,11).toLowerCase()?(e=t.substr(i,11),i+=11):(e=null,a('"application"')),null===e&&(e=Nt()))))),e}function Ot(){var e;return"message"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"message"')),null===e&&("multipart"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,a('"multipart"')),null===e&&(e=Nt())),e}function Nt(){var e;return null===(e=O())&&(e=$t()),e}function $t(){var e,n,s;return s=i,"x-"===t.substr(i,2).toLowerCase()?(e=t.substr(i,2),i+=2):(e=null,a('"x-"')),null!==e&&null!==(n=O())?e=[e,n]:(e=null,i=s),e}function Pt(){var e;return null===(e=Nt())&&(e=O()),e}function Ut(){var e,t,n,s;return s=i,null!==(e=O())&&null!==(t=D())&&null!==(n=Dt())?e=[e,t,n]:(e=null,i=s),e}function Dt(){var e;return null===(e=O())&&(e=W()),e}function Mt(){var e,t,n,s;if(n=i,null!==(t=c()))for(e=[];null!==t;)e.push(t),t=c();else e=null;return null!==e&&(s=e,e=void(Ln.value=parseInt(s.join("")))),null===e&&(i=n),e}function Ht(){var e,n,s,r,o,l;if(o=i,null!==(e=N())){for(n=[],l=i,46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')),null!==s&&null!==(r=N())?s=[s,r]:(s=null,i=l);null!==s;)n.push(s),l=i,46===t.charCodeAt(i)?(s=".",i++):(s=null,a('"."')),null!==s&&null!==(r=N())?s=[s,r]:(s=null,i=l);null!==n?e=[e,n]:(e=null,i=o)}else e=null,i=o;return e}function qt(){var e;return null===(e=kt())&&(e=St()),e}function kt(){var e,n,s,r,o,l;return r=i,o=i,"tag"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"tag"')),null!==e&&null!==(n=D())&&null!==(s=O())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.tag=l)),null===e&&(i=r),e}function Lt(){var e,n,s,r,o,l,u,c;if(u=i,"digest"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"Digest"')),null!==e)if(null!==(n=A()))if(null!==(s=Gt())){for(r=[],c=i,null!==(o=L())&&null!==(l=Gt())?o=[o,l]:(o=null,i=c);null!==o;)r.push(o),c=i,null!==(o=L())&&null!==(l=Gt())?o=[o,l]:(o=null,i=c);null!==r?e=[e,n,s,r]:(e=null,i=u)}else e=null,i=u;else e=null,i=u;else e=null,i=u;return null===e&&(e=Ft()),e}function Ft(){var e,t,n,s,r,o,l,a;if(l=i,null!==(e=O()))if(null!==(t=A()))if(null!==(n=jt())){for(s=[],a=i,null!==(r=L())&&null!==(o=jt())?r=[r,o]:(r=null,i=a);null!==r;)s.push(r),a=i,null!==(r=L())&&null!==(o=jt())?r=[r,o]:(r=null,i=a);null!==s?e=[e,t,n,s]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;else e=null,i=l;return e}function jt(){var e,t,n,s;return s=i,null!==(e=O())&&null!==(t=D())?(null===(n=O())&&(n=W()),null!==n?e=[e,t,n]:(e=null,i=s)):(e=null,i=s),e}function Gt(){var e;return null===(e=zt())&&null===(e=Wt())&&null===(e=Yt())&&null===(e=Jt())&&null===(e=Xt())&&null===(e=Qt())&&null===(e=Zt())&&(e=jt()),e}function zt(){var e,n,s,r;return r=i,"realm"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"realm"')),null!==e&&null!==(n=D())&&null!==(s=Vt())?e=[e,n,s]:(e=null,i=r),e}function Vt(){var e,t,n;return t=i,null!==(e=B())&&(n=e,e=void(Ln.realm=n)),null===e&&(i=t),e}function Wt(){var e,n,s,r,o,l,u,c,h;if(c=i,"domain"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"domain"')),null!==e)if(null!==(n=D()))if(null!==(s=G()))if(null!==(r=Bt())){if(o=[],h=i,null!==(u=m()))for(l=[];null!==u;)l.push(u),u=m();else l=null;for(null!==l&&null!==(u=Bt())?l=[l,u]:(l=null,i=h);null!==l;){if(o.push(l),h=i,null!==(u=m()))for(l=[];null!==u;)l.push(u),u=m();else l=null;null!==l&&null!==(u=Bt())?l=[l,u]:(l=null,i=h)}null!==o&&null!==(l=z())?e=[e,n,s,r,o,l]:(e=null,i=c)}else e=null,i=c;else e=null,i=c;else e=null,i=c;else e=null,i=c;return e}function Bt(){var e;return null===(e=He())&&(e=Le()),e}function Yt(){var e,n,s,r;return r=i,"nonce"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"nonce"')),null!==e&&null!==(n=D())&&null!==(s=Kt())?e=[e,n,s]:(e=null,i=r),e}function Kt(){var e,t,n;return t=i,null!==(e=B())&&(n=e,e=void(Ln.nonce=n)),null===e&&(i=t),e}function Jt(){var e,n,s,r,o,l;return r=i,o=i,"opaque"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"opaque"')),null!==e&&null!==(n=D())&&null!==(s=B())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.opaque=l)),null===e&&(i=r),e}function Xt(){var e,n,s,r,o;return r=i,"stale"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"stale"')),null!==e&&null!==(n=D())?(o=i,"true"===t.substr(i,4).toLowerCase()?(s=t.substr(i,4),i+=4):(s=null,a('"true"')),null!==s&&(s=void(Ln.stale=!0)),null===s&&(i=o),null===s&&(o=i,"false"===t.substr(i,5).toLowerCase()?(s=t.substr(i,5),i+=5):(s=null,a('"false"')),null!==s&&(s=void(Ln.stale=!1)),null===s&&(i=o)),null!==s?e=[e,n,s]:(e=null,i=r)):(e=null,i=r),e}function Qt(){var e,n,s,r,o,l;return r=i,o=i,"algorithm"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,a('"algorithm"')),null!==e&&null!==(n=D())?("md5"===t.substr(i,3).toLowerCase()?(s=t.substr(i,3),i+=3):(s=null,a('"MD5"')),null===s&&("md5-sess"===t.substr(i,8).toLowerCase()?(s=t.substr(i,8),i+=8):(s=null,a('"MD5-sess"')),null===s&&(s=O())),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.algorithm=l.toUpperCase())),null===e&&(i=r),e}function Zt(){var e,n,s,r,o,l,u,c,h,d;if(c=i,"qop"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"qop"')),null!==e)if(null!==(n=D()))if(null!==(s=G())){if(h=i,null!==(r=en())){for(o=[],d=i,44===t.charCodeAt(i)?(l=",",i++):(l=null,a('","')),null!==l&&null!==(u=en())?l=[l,u]:(l=null,i=d);null!==l;)o.push(l),d=i,44===t.charCodeAt(i)?(l=",",i++):(l=null,a('","')),null!==l&&null!==(u=en())?l=[l,u]:(l=null,i=d);null!==o?r=[r,o]:(r=null,i=h)}else r=null,i=h;null!==r&&null!==(o=z())?e=[e,n,s,r,o]:(e=null,i=c)}else e=null,i=c;else e=null,i=c;else e=null,i=c;return e}function en(){var e,n,s;return n=i,"auth-int"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,a('"auth-int"')),null===e&&("auth"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,a('"auth"')),null===e&&(e=O())),null!==e&&(s=e,Ln.qop||(Ln.qop=[]),e=void Ln.qop.push(s.toLowerCase())),null===e&&(i=n),e}function tn(){var e,t,n,s,r,o,l;if(r=i,o=i,null!==(e=ft())){for(t=[],l=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=l);null!==n;)t.push(n),l=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=l);null!==t?e=[e,t]:(e=null,i=o)}else e=null,i=o;return null!==e&&(e=function(e){var t;Ln.multi_header||(Ln.multi_header=[]);try{t=new kn(Ln.uri,Ln.display_name,Ln.params),delete Ln.uri,delete Ln.display_name,delete Ln.params}catch(e){t=null}Ln.multi_header.push({possition:i,offset:e,parsed:t})}(r)),null===e&&(i=r),e}function nn(){var e;return null===(e=sn())&&(e=St()),e}function sn(){var e,n,s,r,o,l,u;if(o=i,l=i,"cause"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"cause"')),null!==e)if(null!==(n=D())){if(null!==(r=c()))for(s=[];null!==r;)s.push(r),r=c();else s=null;null!==s?e=[e,n,s]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;return null!==e&&(u=e[2],e=void(Ln.cause=parseInt(u.join("")))),null===e&&(i=o),e}function rn(){var e,t,n,s,r,o;if(r=i,null!==(e=ft())){for(t=[],o=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=o);null!==n;)t.push(n),o=i,null!==(n=F())&&null!==(s=St())?n=[n,s]:(n=null,i=o);null!==t?e=[e,t]:(e=null,i=r)}else e=null,i=r;return e}function on(){var e,n;return n=i,"active"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"active"')),null===e&&("pending"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"pending"')),null===e&&("terminated"===t.substr(i,10).toLowerCase()?(e=t.substr(i,10),i+=10):(e=null,a('"terminated"')),null===e&&(e=O()))),null!==e&&(e=function(e){Ln.state=t.substring(i,e)}(n)),null===e&&(i=n),e}function ln(){var e,n,s,r,o,l,u,c;return r=i,o=i,"reason"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"reason"')),null!==e&&null!==(n=D())&&null!==(s=an())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=void(void 0!==(l=e[2])&&(Ln.reason=l))),null===e&&(i=r),null===e&&(r=i,o=i,"expires"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"expires"')),null!==e&&null!==(n=D())&&null!==(s=bt())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=void(void 0!==(c=e[2])&&(Ln.expires=c))),null===e&&(i=r),null===e&&(r=i,o=i,"retry_after"===t.substr(i,11).toLowerCase()?(e=t.substr(i,11),i+=11):(e=null,a('"retry_after"')),null!==e&&null!==(n=D())&&null!==(s=bt())?e=[e,n,s]:(e=null,i=o),null!==e&&(e=void(void 0!==(u=e[2])&&(Ln.retry_after=u))),null===e&&(i=r),null===e&&(e=St()))),e}function an(){var e;return"deactivated"===t.substr(i,11).toLowerCase()?(e=t.substr(i,11),i+=11):(e=null,a('"deactivated"')),null===e&&("probation"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,a('"probation"')),null===e&&("rejected"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,a('"rejected"')),null===e&&("timeout"===t.substr(i,7).toLowerCase()?(e=t.substr(i,7),i+=7):(e=null,a('"timeout"')),null===e&&("giveup"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"giveup"')),null===e&&("noresource"===t.substr(i,10).toLowerCase()?(e=t.substr(i,10),i+=10):(e=null,a('"noresource"')),null===e&&("invariant"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,a('"invariant"')),null===e&&(e=O()))))))),e}function un(){var e;return null===(e=kt())&&(e=St()),e}function cn(){var e,t,n,s,r,o,l,a;if(l=i,null!==(e=vn()))if(null!==(t=A()))if(null!==(n=Cn())){for(s=[],a=i,null!==(r=F())&&null!==(o=hn())?r=[r,o]:(r=null,i=a);null!==r;)s.push(r),a=i,null!==(r=F())&&null!==(o=hn())?r=[r,o]:(r=null,i=a);null!==s?e=[e,t,n,s]:(e=null,i=l)}else e=null,i=l;else e=null,i=l;else e=null,i=l;return e}function hn(){var e;return null===(e=dn())&&null===(e=_n())&&null===(e=pn())&&null===(e=fn())&&null===(e=mn())&&(e=St()),e}function dn(){var e,n,s,r,o,l;return r=i,o=i,"ttl"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"ttl"')),null!==e&&null!==(n=D())&&null!==(s=En())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.ttl=l)),null===e&&(i=r),e}function _n(){var e,n,s,r,o,l;return r=i,o=i,"maddr"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"maddr"')),null!==e&&null!==(n=D())&&null!==(s=oe())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.maddr=l)),null===e&&(i=r),e}function pn(){var e,n,s,r,o,l;return r=i,o=i,"received"===t.substr(i,8).toLowerCase()?(e=t.substr(i,8),i+=8):(e=null,a('"received"')),null!==e&&null!==(n=D())?(null===(s=pe())&&(s=he()),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.received=l)),null===e&&(i=r),e}function fn(){var e,n,s,r,o,l;return r=i,o=i,"branch"===t.substr(i,6).toLowerCase()?(e=t.substr(i,6),i+=6):(e=null,a('"branch"')),null!==e&&null!==(n=D())&&null!==(s=O())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.branch=l)),null===e&&(i=r),e}function mn(){var e,n,s,r,o;return r=i,"rport"===t.substr(i,5).toLowerCase()?(e=t.substr(i,5),i+=5):(e=null,a('"rport"')),null!==e?(o=i,null!==(n=D())&&null!==(s=gn())?n=[n,s]:(n=null,i=o),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=r)):(e=null,i=r),e}function gn(){var e,t,n,s,r,o,l,a;return o=i,l=i,null!==(e=null!==(e=c())?e:"")&&null!==(t=null!==(t=c())?t:"")&&null!==(n=null!==(n=c())?n:"")&&null!==(s=null!==(s=c())?s:"")&&null!==(r=null!==(r=c())?r:"")?e=[e,t,n,s,r]:(e=null,i=l),null!==e&&(a=e,e=void(Ln.rport=parseInt(a.join("")))),null===e&&(i=o),e}function vn(){var e,t,n,s,r,o;return o=i,null!==(e=Tn())&&null!==(t=U())&&null!==(n=O())&&null!==(s=U())&&null!==(r=bn())?e=[e,t,n,s,r]:(e=null,i=o),e}function Tn(){var e,n,s;return n=i,"sip"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"SIP"')),null===e&&(e=O()),null!==e&&(s=e,e=void(Ln.protocol=s)),null===e&&(i=n),e}function bn(){var e,n,s;return n=i,"udp"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"UDP"')),null===e&&("tcp"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"TCP"')),null===e&&("tls"===t.substr(i,3).toLowerCase()?(e=t.substr(i,3),i+=3):(e=null,a('"TLS"')),null===e&&("sctp"===t.substr(i,4).toLowerCase()?(e=t.substr(i,4),i+=4):(e=null,a('"SCTP"')),null===e&&(e=O())))),null!==e&&(s=e,e=void(Ln.transport=s)),null===e&&(i=n),e}function Cn(){var e,t,n,s,r;return s=i,null!==(e=Sn())?(r=i,null!==(t=j())&&null!==(n=An())?t=[t,n]:(t=null,i=r),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,i=s)):(e=null,i=s),e}function Sn(){var e,n;return n=i,null===(e=pe())&&null===(e=ce())&&(e=le()),null!==e&&(e=function(e){Ln.host=t.substring(i,e)}(n)),null===e&&(i=n),e}function An(){var e,t,n,s,r,o,l,a;return o=i,l=i,null!==(e=null!==(e=c())?e:"")&&null!==(t=null!==(t=c())?t:"")&&null!==(n=null!==(n=c())?n:"")&&null!==(s=null!==(s=c())?s:"")&&null!==(r=null!==(r=c())?r:"")?e=[e,t,n,s,r]:(e=null,i=l),null!==e&&(a=e,e=void(Ln.port=parseInt(a.join("")))),null===e&&(i=o),e}function En(){var e,t,n,s,r;return s=i,r=i,null!==(e=c())&&null!==(t=null!==(t=c())?t:"")&&null!==(n=null!==(n=c())?n:"")?e=[e,t,n]:(e=null,i=r),null!==e&&(e=parseInt(e.join(""))),null===e&&(i=s),e}function yn(){var e,t,n;return t=i,null!==(e=bt())&&(n=e,e=void(Ln.expires=n)),null===e&&(i=t),e}function wn(){var e;return null===(e=Rn())&&(e=St()),e}function Rn(){var e,n,s,r,o,l;return r=i,o=i,"refresher"===t.substr(i,9).toLowerCase()?(e=t.substr(i,9),i+=9):(e=null,a('"refresher"')),null!==e&&null!==(n=D())?("uac"===t.substr(i,3).toLowerCase()?(s=t.substr(i,3),i+=3):(s=null,a('"uac"')),null===s&&("uas"===t.substr(i,3).toLowerCase()?(s=t.substr(i,3),i+=3):(s=null,a('"uas"'))),null!==s?e=[e,n,s]:(e=null,i=o)):(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.refresher=l.toLowerCase())),null===e&&(i=r),e}function In(){var e,t;for(e=[],null===(t=R())&&null===(t=x())&&(t=A());null!==t;)e.push(t),null===(t=R())&&null===(t=x())&&(t=A());return e}function xn(){var e,n,s,r,o,l,u,c,h,d,_;return d=i,_=i,null!==(e=Nn())?(45===t.charCodeAt(i)?(n="-",i++):(n=null,a('"-"')),null!==n&&null!==(s=On())?(45===t.charCodeAt(i)?(r="-",i++):(r=null,a('"-"')),null!==r&&null!==(o=On())?(45===t.charCodeAt(i)?(l="-",i++):(l=null,a('"-"')),null!==l&&null!==(u=On())?(45===t.charCodeAt(i)?(c="-",i++):(c=null,a('"-"')),null!==c&&null!==(h=$n())?e=[e,n,s,r,o,l,u,c,h]:(e=null,i=_)):(e=null,i=_)):(e=null,i=_)):(e=null,i=_)):(e=null,i=_),null!==e&&(e=function(e,n){Ln=t.substring(i+5,e)}(d,e[0])),null===e&&(i=d),e}function On(){var e,t,n,s,r;return r=i,null!==(e=d())&&null!==(t=d())&&null!==(n=d())&&null!==(s=d())?e=[e,t,n,s]:(e=null,i=r),e}function Nn(){var e,t,n;return n=i,null!==(e=On())&&null!==(t=On())?e=[e,t]:(e=null,i=n),e}function $n(){var e,t,n,s;return s=i,null!==(e=On())&&null!==(t=On())&&null!==(n=On())?e=[e,t,n]:(e=null,i=s),e}function Pn(){var e,n,s,r,o,l;return r=i,o=i,null!==(e=$())?(l=i,64===t.charCodeAt(i)?(n="@",i++):(n=null,a('"@"')),null!==n&&null!==(s=$())?n=[n,s]:(n=null,i=l),null!==(n=null!==n?n:"")?e=[e,n]:(e=null,i=o)):(e=null,i=o),null!==e&&(e=function(e){Ln.call_id=t.substring(i,e)}(r)),null===e&&(i=r),e}function Un(){var e;return null===(e=Dn())&&null===(e=Mn())&&null===(e=Hn())&&(e=St()),e}function Dn(){var e,n,s,r,o,l;return r=i,o=i,"to-tag"===t.substr(i,6)?(e="to-tag",i+=6):(e=null,a('"to-tag"')),null!==e&&null!==(n=D())&&null!==(s=O())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.to_tag=l)),null===e&&(i=r),e}function Mn(){var e,n,s,r,o,l;return r=i,o=i,"from-tag"===t.substr(i,8)?(e="from-tag",i+=8):(e=null,a('"from-tag"')),null!==e&&null!==(n=D())&&null!==(s=O())?e=[e,n,s]:(e=null,i=o),null!==e&&(l=e[2],e=void(Ln.from_tag=l)),null===e&&(i=r),e}function Hn(){var e,n;return n=i,"early-only"===t.substr(i,10)?(e="early-only",i+=10):(e=null,a('"early-only"')),null!==e&&(e=void(Ln.early_only=!0)),null===e&&(i=n),e}var qn=n(258),kn=n(716),Ln={};if(null===r[s]()||i!==t.length){var Fn=Math.max(i,o),jn=Fn<t.length?t.charAt(Fn):null,Gn=function(){for(var e=1,n=1,s=!1,r=0;r<Math.max(i,o);r++){var l=t.charAt(r);"\n"===l?(s||e++,n=1,s=!1):"\r"===l||"\u2028"===l||"\u2029"===l?(e++,n=1,s=!0):(n++,s=!1)}return{line:e,column:n}}();return new this.SyntaxError(function(e){e.sort();for(var t=null,n=[],s=0;s<e.length;s++)e[s]!==t&&(n.push(e[s]),t=e[s]);return n}(l),jn,Fn,Gn.line,Gn.column),-1}return Ln},toSource:function(){return this._source},SyntaxError:function(t,n,s,r,i){this.name="SyntaxError",this.expected=t,this.found=n,this.message=function(t,n){var s;switch(t.length){case 0:s="end of input";break;case 1:s=t[0];break;default:s=t.slice(0,t.length-1).join(", ")+" or "+t[t.length-1]}return"Expected "+s+" but "+(n?e(n):"end of input")+" found."}(t,n),this.offset=s,this.line=r,this.column=i}};return t.SyntaxError.prototype=Error.prototype,t}()},880:(e,t,n)=>{const s=n(403),r=n(937),i=n(247),o=n(911),l=n(43),a=n(258),u=n(716),c=n(845),h=n(622);n(342)("JsSIP")("version %s",s.version),e.exports={C:r,Exceptions:i,Utils:o,UA:l,URI:a,NameAddrHeader:u,WebSocketInterface:h,Grammar:c,debug:n(342),get name(){return s.title},get version(){return s.version}}},835:(e,t,n)=>{const s=n(342);e.exports=class{constructor(e){e?(this._debug=s.default(`JsSIP:${e}`),this._warn=s.default(`JsSIP:WARN:${e}`),this._error=s.default(`JsSIP:ERROR:${e}`)):(this._debug=s.default("JsSIP"),this._warn=s.default("JsSIP:WARN"),this._error=s.default("JsSIP:ERROR")),this._debug.log=console.info.bind(console),this._warn.log=console.warn.bind(console),this._error.log=console.error.bind(console)}get debug(){return this._debug}get warn(){return this._warn}get error(){return this._error}}},531:(e,t,n)=>{const s=n(99).EventEmitter,r=n(835),i=n(937),o=n(490),l=n(911),a=n(915),u=n(247),c=n(258),h=new r("Message");e.exports=class extends s{constructor(e){super(),this._ua=e,this._request=null,this._closed=!1,this._direction=null,this._local_identity=null,this._remote_identity=null,this._is_replied=!1,this._data={}}get direction(){return this._direction}get local_identity(){return this._local_identity}get remote_identity(){return this._remote_identity}send(e,t,n={}){const s=e;if(void 0===e||void 0===t)throw new TypeError("Not enough arguments");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${s}`);const r=l.cloneArray(n.extraHeaders),u=l.cloneObject(n.eventHandlers),h=n.contentType||"text/plain",d={};n.fromUserName&&(d.from_uri=new c("sip",n.fromUserName,this._ua.configuration.uri.host),r.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`)),n.fromDisplayName&&(d.from_display_name=n.fromDisplayName);for(const e in u)Object.prototype.hasOwnProperty.call(u,e)&&this.on(e,u[e]);r.push(`Content-Type: ${h}`),this._request=new o.OutgoingRequest(i.MESSAGE,e,this._ua,d,r),t&&(this._request.body=t);const _=new a(this._ua,this._request,{onRequestTimeout:()=>{this._onRequestTimeout()},onTransportError:()=>{this._onTransportError()},onReceiveResponse:e=>{this._receiveResponse(e)}});this._newMessage("local",this._request),_.send()}init_incoming(e){this._request=e,this._newMessage("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}accept(e={}){const t=l.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"accept" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}reject(e={}){const t=e.status_code||480,n=e.reason_phrase,s=l.cloneArray(e.extraHeaders),r=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"reject" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");if(t<300||t>=700)throw new TypeError(`Invalid status_code: ${t}`);this._is_replied=!0,this._request.reply(t,n,s,r)}_receiveResponse(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:{const t=l.sipErrorCause(e.status_code);this._failed("remote",e,t);break}}}_onRequestTimeout(){this._closed||this._failed("system",null,i.causes.REQUEST_TIMEOUT)}_onTransportError(){this._closed||this._failed("system",null,i.causes.CONNECTION_ERROR)}_close(){this._closed=!0,this._ua.destroyMessage(this)}_newMessage(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newMessage(this,{originator:e,message:this,request:t})}_failed(e,t,n){h.debug("MESSAGE failed"),this._close(),h.debug('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}_succeeded(e,t){h.debug("MESSAGE succeeded"),this._close(),h.debug('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}},716:(e,t,n)=>{const s=n(258),r=n(845);e.exports=class e{static parse(e){return-1!==(e=r.parse(e,"Name_Addr_Header"))?e:void 0}constructor(e,t,n){if(!(e&&e instanceof s))throw new TypeError('missing or invalid "uri" parameter');this._uri=e,this._parameters={},this.display_name=t;for(const e in n)Object.prototype.hasOwnProperty.call(n,e)&&this.setParam(e,n[e])}get uri(){return this._uri}get display_name(){return this._display_name}set display_name(e){this._display_name=0===e?"0":e}setParam(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}getParam(e){if(e)return this._parameters[e.toLowerCase()]}hasParam(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}deleteParam(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){const t=this._parameters[e];return delete this._parameters[e],t}}clearParams(){this._parameters={}}clone(){return new e(this._uri.clone(),this._display_name,JSON.parse(JSON.stringify(this._parameters)))}_quote(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}toString(){let e=this._display_name?`"${this._quote(this._display_name)}" `:"";e+=`<${this._uri.toString()}>`;for(const t in this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,t)&&(e+=`;${t}`,null!==this._parameters[t]&&(e+=`=${this._parameters[t]}`));return e}}},173:(e,t,n)=>{const s=n(99).EventEmitter,r=n(835),i=n(937),o=n(490),l=n(911),a=n(915),u=n(247),c=new r("Options");e.exports=class extends s{constructor(e){super(),this._ua=e,this._request=null,this._closed=!1,this._direction=null,this._local_identity=null,this._remote_identity=null,this._is_replied=!1,this._data={}}get direction(){return this._direction}get local_identity(){return this._local_identity}get remote_identity(){return this._remote_identity}send(e,t,n={}){const s=e;if(void 0===e)throw new TypeError("A target is required for OPTIONS");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${s}`);const r=l.cloneArray(n.extraHeaders),u=l.cloneObject(n.eventHandlers),c=n.contentType||"application/sdp";for(const e in u)Object.prototype.hasOwnProperty.call(u,e)&&this.on(e,u[e]);r.push(`Content-Type: ${c}`),this._request=new o.OutgoingRequest(i.OPTIONS,e,this._ua,null,r),t&&(this._request.body=t);const h=new a(this._ua,this._request,{onRequestTimeout:()=>{this._onRequestTimeout()},onTransportError:()=>{this._onTransportError()},onReceiveResponse:e=>{this._receiveResponse(e)}});this._newOptions("local",this._request),h.send()}init_incoming(e){this._request=e,this._newOptions("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}accept(e={}){const t=l.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"accept" not supported for outgoing Options');if(this._is_replied)throw new Error("incoming Options already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}reject(e={}){const t=e.status_code||480,n=e.reason_phrase,s=l.cloneArray(e.extraHeaders),r=e.body;if("incoming"!==this._direction)throw new u.NotSupportedError('"reject" not supported for outgoing Options');if(this._is_replied)throw new Error("incoming Options already replied");if(t<300||t>=700)throw new TypeError(`Invalid status_code: ${t}`);this._is_replied=!0,this._request.reply(t,n,s,r)}_receiveResponse(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:{const t=l.sipErrorCause(e.status_code);this._failed("remote",e,t);break}}}_onRequestTimeout(){this._closed||this._failed("system",null,i.causes.REQUEST_TIMEOUT)}_onTransportError(){this._closed||this._failed("system",null,i.causes.CONNECTION_ERROR)}_close(){this._closed=!0,this._ua.destroyMessage(this)}_newOptions(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newOptions(this,{originator:e,message:this,request:t})}_failed(e,t,n){c.debug("OPTIONS failed"),this._close(),c.debug('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}_succeeded(e,t){c.debug("OPTIONS succeeded"),this._close(),c.debug('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}},5:(e,t,n)=>{const s=n(835),r=n(845),i=n(490),o=new s("Parser");function l(e,t){let n=t,s=0,r=0;if(e.substring(n,n+2).match(/(^\r\n)/))return-2;for(;0===s;){if(r=e.indexOf("\r\n",n),-1===r)return r;!e.substring(r+2,r+4).match(/(^\r\n)/)&&e.charAt(r+2).match(/(^\s+)/)?n=r+2:s=r}return s}function a(e,t,n,s){let o;const l=t.indexOf(":",n),a=t.substring(n,l).trim(),u=t.substring(l+1,s).trim();switch(a.toLowerCase()){case"via":case"v":e.addHeader("via",u),1===e.getHeaders("via").length?(o=e.parseHeader("Via"),o&&(e.via=o,e.via_branch=o.branch)):o=0;break;case"from":case"f":e.setHeader("from",u),o=e.parseHeader("from"),o&&(e.from=o,e.from_tag=o.getParam("tag"));break;case"to":case"t":e.setHeader("to",u),o=e.parseHeader("to"),o&&(e.to=o,e.to_tag=o.getParam("tag"));break;case"record-route":if(o=r.parse(u,"Record_Route"),-1===o)o=void 0;else for(const t of o)e.addHeader("record-route",u.substring(t.possition,t.offset)),e.headers["Record-Route"][e.getHeaders("record-route").length-1].parsed=t.parsed;break;case"call-id":case"i":e.setHeader("call-id",u),o=e.parseHeader("call-id"),o&&(e.call_id=u);break;case"contact":case"m":if(o=r.parse(u,"Contact"),-1===o)o=void 0;else for(const t of o)e.addHeader("contact",u.substring(t.possition,t.offset)),e.headers.Contact[e.getHeaders("contact").length-1].parsed=t.parsed;break;case"content-length":case"l":e.setHeader("content-length",u),o=e.parseHeader("content-length");break;case"content-type":case"c":e.setHeader("content-type",u),o=e.parseHeader("content-type");break;case"cseq":e.setHeader("cseq",u),o=e.parseHeader("cseq"),o&&(e.cseq=o.value),e instanceof i.IncomingResponse&&(e.method=o.method);break;case"max-forwards":e.setHeader("max-forwards",u),o=e.parseHeader("max-forwards");break;case"www-authenticate":e.setHeader("www-authenticate",u),o=e.parseHeader("www-authenticate");break;case"proxy-authenticate":e.setHeader("proxy-authenticate",u),o=e.parseHeader("proxy-authenticate");break;case"session-expires":case"x":e.setHeader("session-expires",u),o=e.parseHeader("session-expires"),o&&(e.session_expires=o.expires,e.session_expires_refresher=o.refresher);break;case"refer-to":case"r":e.setHeader("refer-to",u),o=e.parseHeader("refer-to"),o&&(e.refer_to=o);break;case"replaces":e.setHeader("replaces",u),o=e.parseHeader("replaces"),o&&(e.replaces=o);break;case"event":case"o":e.setHeader("event",u),o=e.parseHeader("event"),o&&(e.event=o);break;default:e.addHeader(a,u),o=0}return void 0!==o||{error:`error parsing header "${a}"`}}t.parseMessage=(e,t)=>{let n,s,u=e.indexOf("\r\n");if(-1===u)return void o.warn("parseMessage() | no CRLF found, not a SIP message");const c=e.substring(0,u);let h=r.parse(c,"Request_Response");if(-1===h)return void o.warn(`parseMessage() | error parsing first line of SIP message: "${c}"`);h.status_code?(n=new i.IncomingResponse,n.status_code=h.status_code,n.reason_phrase=h.reason_phrase):(n=new i.IncomingRequest(t),n.method=h.method,n.ruri=h.uri),n.data=e;let d=u+2;for(;;){if(u=l(e,d),-2===u){s=d+2;break}if(-1===u)return void o.warn("parseMessage() | malformed message");if(h=a(n,e,d,u),!0!==h)return void o.warn("parseMessage() |",h.error);d=u+2}if(n.hasHeader("content-length")){const t=n.getHeader("content-length");n.body=e.substr(s,t)}else n.body=e.substring(s);return n}},178:(e,t,n)=>{const s=n(99).EventEmitter,r=n(548),i=n(835),o=n(937),l=n(247),a=n(478),u=n(911),c=n(12),h=n(490),d=n(849),_=n(915),p=n(148),f=n(479),m=n(437),g=n(156),v=n(258),T=new i("RTCSession"),b={STATUS_NULL:0,STATUS_INVITE_SENT:1,STATUS_1XX_RECEIVED:2,STATUS_INVITE_RECEIVED:3,STATUS_WAITING_FOR_ANSWER:4,STATUS_ANSWERED:5,STATUS_WAITING_FOR_ACK:6,STATUS_CANCELED:7,STATUS_TERMINATED:8,STATUS_CONFIRMED:9},C=["audio","video"];e.exports=class e extends s{static get C(){return b}constructor(e){T.debug("new"),super(),this._id=null,this._ua=e,this._status=b.STATUS_NULL,this._dialog=null,this._earlyDialogs={},this._contact=null,this._from_tag=null,this._to_tag=null,this._connection=null,this._connectionPromiseQueue=Promise.resolve(),this._request=null,this._is_canceled=!1,this._cancel_reason="",this._is_confirmed=!1,this._late_sdp=!1,this._rtcOfferConstraints=null,this._rtcAnswerConstraints=null,this._localMediaStream=null,this._localMediaStreamLocallyGenerated=!1,this._rtcReady=!0,this._iceReady=!1,this._timers={ackTimer:null,expiresTimer:null,invite2xxTimer:null,userNoAnswerTimer:null},this._direction=null,this._local_identity=null,this._remote_identity=null,this._start_time=null,this._end_time=null,this._tones=null,this._audioMuted=!1,this._videoMuted=!1,this._localHold=!1,this._remoteHold=!1,this._sessionTimers={enabled:this._ua.configuration.session_timers,refreshMethod:this._ua.configuration.session_timers_refresh_method,defaultExpires:o.SESSION_EXPIRES,currentExpires:null,running:!1,refresher:!1,timer:null},this._referSubscribers={},this._data={}}get C(){return b}get causes(){return o.causes}get id(){return this._id}get connection(){return this._connection}get contact(){return this._contact}get direction(){return this._direction}get local_identity(){return this._local_identity}get remote_identity(){return this._remote_identity}get start_time(){return this._start_time}get end_time(){return this._end_time}get data(){return this._data}set data(e){this._data=e}get status(){return this._status}isInProgress(){switch(this._status){case b.STATUS_NULL:case b.STATUS_INVITE_SENT:case b.STATUS_1XX_RECEIVED:case b.STATUS_INVITE_RECEIVED:case b.STATUS_WAITING_FOR_ANSWER:return!0;default:return!1}}isEstablished(){switch(this._status){case b.STATUS_ANSWERED:case b.STATUS_WAITING_FOR_ACK:case b.STATUS_CONFIRMED:return!0;default:return!1}}isEnded(){switch(this._status){case b.STATUS_CANCELED:case b.STATUS_TERMINATED:return!0;default:return!1}}isMuted(){return{audio:this._audioMuted,video:this._videoMuted}}isOnHold(){return{local:this._localHold,remote:this._remoteHold}}connect(e,t={},n){T.debug("connect()");const s=e,r=u.cloneObject(t.eventHandlers),i=u.cloneArray(t.extraHeaders),a=u.cloneObject(t.mediaConstraints,{audio:!0,video:!0}),c=t.mediaStream||null,d=u.cloneObject(t.pcConfig,{iceServers:[]}),_=t.rtcConstraints||null,p=t.rtcOfferConstraints||null;if(this._rtcOfferConstraints=p,this._rtcAnswerConstraints=t.rtcAnswerConstraints||null,this._data=t.data||this._data,void 0===e)throw new TypeError("Not enough arguments");if(this._status!==b.STATUS_NULL)throw new l.InvalidStateError(this._status);if(!window.RTCPeerConnection)throw new l.NotSupportedError("WebRTC not supported");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${s}`);this._sessionTimers.enabled&&u.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=o.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=o.SESSION_EXPIRES);for(const e in r)Object.prototype.hasOwnProperty.call(r,e)&&this.on(e,r[e]);this._from_tag=u.newTag();const f=t.anonymous||!1,m={from_tag:this._from_tag};this._contact=this._ua.contact.toString({anonymous:f,outbound:!0}),f?(m.from_display_name="Anonymous",m.from_uri=new v("sip","anonymous","anonymous.invalid"),i.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`),i.push("Privacy: id")):t.fromUserName&&(m.from_uri=new v("sip",t.fromUserName,this._ua.configuration.uri.host),i.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`)),t.fromDisplayName&&(m.from_display_name=t.fromDisplayName),i.push(`Contact: ${this._contact}`),i.push("Content-Type: application/sdp"),this._sessionTimers.enabled&&i.push(`Session-Expires: ${this._sessionTimers.defaultExpires}${this._ua.configuration.session_timers_force_refresher?";refresher=uac":""}`),this._request=new h.InitialOutgoingInviteRequest(e,this._ua,m,i),this._id=this._request.call_id+this._from_tag,this._createRTCConnection(d,_),this._direction="outgoing",this._local_identity=this._request.from,this._remote_identity=this._request.to,n&&n(this),this._newRTCSession("local",this._request),this._sendInitialRequest(a,p,c)}init_incoming(e,t){let n;T.debug("init_incoming()");const s=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;e.body&&"application/sdp"!==s?e.reply(415):(this._status=b.STATUS_INVITE_RECEIVED,this._from_tag=e.from_tag,this._id=e.call_id+this._from_tag,this._request=e,this._contact=this._ua.contact.toString(),e.hasHeader("expires")&&(n=1e3*e.getHeader("expires")),e.to_tag=u.newTag(),this._createDialog(e,"UAS",!0)?(e.body?this._late_sdp=!1:this._late_sdp=!0,this._status=b.STATUS_WAITING_FOR_ANSWER,this._timers.userNoAnswerTimer=setTimeout((()=>{e.reply(408),this._failed("local",null,o.causes.NO_ANSWER)}),this._ua.configuration.no_answer_timeout),n&&(this._timers.expiresTimer=setTimeout((()=>{this._status===b.STATUS_WAITING_FOR_ANSWER&&(e.reply(487),this._failed("system",null,o.causes.EXPIRES))}),n)),this._direction="incoming",this._local_identity=e.to,this._remote_identity=e.from,t&&t(this),this._newRTCSession("remote",e),this._status!==b.STATUS_TERMINATED&&(e.reply(180,null,[`Contact: ${this._contact}`]),this._progress("local",null))):e.reply(500,"Missing Contact header field"))}answer(e={}){T.debug("answer()");const t=this._request,n=u.cloneArray(e.extraHeaders),s=u.cloneObject(e.mediaConstraints),r=e.mediaStream||null,i=u.cloneObject(e.pcConfig,{iceServers:[]}),a=e.rtcConstraints||null,c=e.rtcAnswerConstraints||null,h=u.cloneObject(e.rtcOfferConstraints);let d,_=!1,p=!1,f=!1,m=!1;if(this._rtcAnswerConstraints=c,this._rtcOfferConstraints=e.rtcOfferConstraints||null,this._data=e.data||this._data,"incoming"!==this._direction)throw new l.NotSupportedError('"answer" not supported for outgoing RTCSession');if(this._status!==b.STATUS_WAITING_FOR_ANSWER)throw new l.InvalidStateError(this._status);if(this._sessionTimers.enabled&&u.isDecimal(e.sessionTimersExpires)&&(e.sessionTimersExpires>=o.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=e.sessionTimersExpires:this._sessionTimers.defaultExpires=o.SESSION_EXPIRES),this._status=b.STATUS_ANSWERED,!this._createDialog(t,"UAS"))return void t.reply(500,"Error creating dialog");clearTimeout(this._timers.userNoAnswerTimer),n.unshift(`Contact: ${this._contact}`);const g=t.parseSDP();Array.isArray(g.media)||(g.media=[g.media]);for(const e of g.media)"audio"===e.type&&(_=!0,e.direction&&"sendrecv"!==e.direction||(f=!0)),"video"===e.type&&(p=!0,e.direction&&"sendrecv"!==e.direction||(m=!0));if(r&&!1===s.audio){d=r.getAudioTracks();for(const e of d)r.removeTrack(e)}if(r&&!1===s.video){d=r.getVideoTracks();for(const e of d)r.removeTrack(e)}r||void 0!==s.audio||(s.audio=f),r||void 0!==s.video||(s.video=m),r||_||h.offerToReceiveAudio||(s.audio=!1),r||p||h.offerToReceiveVideo||(s.video=!1),this._createRTCConnection(i,a),Promise.resolve().then((()=>r||(s.audio||s.video?(this._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(s).catch((e=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");throw t.reply(480),this._failed("local",null,o.causes.USER_DENIED_MEDIA_ACCESS),T.warn('emit "getusermediafailed" [error:%o]',e),this.emit("getusermediafailed",e),new Error("getUserMedia() failed")}))):void 0))).then((e=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");this._localMediaStream=e,e&&e.getTracks().forEach((t=>{this._connection.addTrack(t,e)}))})).then((()=>{if(this._late_sdp)return;const e={originator:"remote",type:"offer",sdp:t.body};T.debug('emit "sdp"'),this.emit("sdp",e);const n=new RTCSessionDescription({type:"offer",sdp:e.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(n))).catch((e=>{throw t.reply(488),this._failed("system",null,o.causes.WEBRTC_ERROR),T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e),new Error("peerconnection.setRemoteDescription() failed")})),this._connectionPromiseQueue})).then((()=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");return this._connecting(t),this._late_sdp?this._createLocalDescription("offer",this._rtcOfferConstraints).catch((()=>{throw t.reply(500),new Error("_createLocalDescription() failed")})):this._createLocalDescription("answer",c).catch((()=>{throw t.reply(500),new Error("_createLocalDescription() failed")}))})).then((e=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");this._handleSessionTimersInIncomingRequest(t,n),t.reply(200,null,n,e,(()=>{this._status=b.STATUS_WAITING_FOR_ACK,this._setInvite2xxTimer(t,e),this._setACKTimer(),this._accepted("local")}),(()=>{this._failed("system",null,o.causes.CONNECTION_ERROR)}))})).catch((e=>{this._status!==b.STATUS_TERMINATED&&T.warn(e)}))}terminate(e={}){T.debug("terminate()");const t=e.cause||o.causes.BYE,n=u.cloneArray(e.extraHeaders),s=e.body;let r,i=e.status_code,c=e.reason_phrase;if(this._status===b.STATUS_TERMINATED)throw new l.InvalidStateError(this._status);switch(this._status){case b.STATUS_NULL:case b.STATUS_INVITE_SENT:case b.STATUS_1XX_RECEIVED:if(T.debug("canceling session"),i&&(i<200||i>=700))throw new TypeError(`Invalid status_code: ${i}`);i&&(c=c||o.REASON_PHRASE[i]||"",r=`SIP ;cause=${i} ;text="${c}"`),this._status===b.STATUS_NULL||this._status===b.STATUS_INVITE_SENT?(this._is_canceled=!0,this._cancel_reason=r):this._status===b.STATUS_1XX_RECEIVED&&this._request.cancel(r),this._status=b.STATUS_CANCELED,this._failed("local",null,o.causes.CANCELED);break;case b.STATUS_WAITING_FOR_ANSWER:case b.STATUS_ANSWERED:if(T.debug("rejecting session"),i=i||480,i<300||i>=700)throw new TypeError(`Invalid status_code: ${i}`);this._request.reply(i,c,n,s),this._failed("local",null,o.causes.REJECTED);break;case b.STATUS_WAITING_FOR_ACK:case b.STATUS_CONFIRMED:if(T.debug("terminating session"),c=e.reason_phrase||o.REASON_PHRASE[i]||"",i&&(i<200||i>=700))throw new TypeError(`Invalid status_code: ${i}`);if(i&&n.push(`Reason: SIP ;cause=${i}; text="${c}"`),this._status===b.STATUS_WAITING_FOR_ACK&&"incoming"===this._direction&&this._request.server_transaction.state!==a.C.STATUS_TERMINATED){const e=this._dialog;this.receiveRequest=({method:t})=>{t===o.ACK&&(this.sendRequest(o.BYE,{extraHeaders:n,body:s}),e.terminate())},this._request.server_transaction.on("stateChanged",(()=>{this._request.server_transaction.state===a.C.STATUS_TERMINATED&&(this.sendRequest(o.BYE,{extraHeaders:n,body:s}),e.terminate())})),this._ended("local",null,t),this._dialog=e,this._ua.newDialog(e)}else this.sendRequest(o.BYE,{extraHeaders:n,body:s}),this._ended("local",null,t)}}sendDTMF(e,t={}){T.debug("sendDTMF() | tones: %s",e);let n=0,s=t.duration||null,r=t.interToneGap||null;const i=t.transportType||o.DTMF_TRANSPORT.INFO;if(void 0===e)throw new TypeError("Not enough arguments");if(this._status!==b.STATUS_CONFIRMED&&this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_1XX_RECEIVED)throw new l.InvalidStateError(this._status);if(i!==o.DTMF_TRANSPORT.INFO&&i!==o.DTMF_TRANSPORT.RFC2833)throw new TypeError(`invalid transportType: ${i}`);if("number"==typeof e&&(e=e.toString()),!e||"string"!=typeof e||!e.match(/^[0-9A-DR#*,]+$/i))throw new TypeError(`Invalid tones: ${e}`);if(s&&!u.isDecimal(s))throw new TypeError(`Invalid tone duration: ${s}`);if(s?s<p.C.MIN_DURATION?(T.debug(`"duration" value is lower than the minimum allowed, setting it to ${p.C.MIN_DURATION} milliseconds`),s=p.C.MIN_DURATION):s>p.C.MAX_DURATION?(T.debug(`"duration" value is greater than the maximum allowed, setting it to ${p.C.MAX_DURATION} milliseconds`),s=p.C.MAX_DURATION):s=Math.abs(s):s=p.C.DEFAULT_DURATION,t.duration=s,r&&!u.isDecimal(r))throw new TypeError(`Invalid interToneGap: ${r}`);if(r?r<p.C.MIN_INTER_TONE_GAP?(T.debug(`"interToneGap" value is lower than the minimum allowed, setting it to ${p.C.MIN_INTER_TONE_GAP} milliseconds`),r=p.C.MIN_INTER_TONE_GAP):r=Math.abs(r):r=p.C.DEFAULT_INTER_TONE_GAP,i!==o.DTMF_TRANSPORT.RFC2833)this._tones?this._tones+=e:(this._tones=e,function e(){let i;if(this._status===b.STATUS_TERMINATED||!this._tones||n>=this._tones.length)return void(this._tones=null);const o=this._tones[n];if(n+=1,","===o)i=2e3;else{const e=new p(this);t.eventHandlers={onFailed:()=>{this._tones=null}},e.send(o,t),i=s+r}setTimeout(e.bind(this),i)}.call(this));else{const t=this._getDTMFRTPSender();t&&(e=t.toneBuffer+e,t.insertDTMF(e,s,r))}}sendInfo(e,t,n={}){if(T.debug("sendInfo()"),this._status!==b.STATUS_CONFIRMED&&this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_1XX_RECEIVED)throw new l.InvalidStateError(this._status);new f(this).send(e,t,n)}mute(e={audio:!0,video:!1}){T.debug("mute()");let t=!1,n=!1;!1===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!0,this._toggleMuteAudio(!0)),!1===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!0,this._toggleMuteVideo(!0)),!0!==t&&!0!==n||this._onmute({audio:t,video:n})}unmute(e={audio:!0,video:!0}){T.debug("unmute()");let t=!1,n=!1;!0===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!1,!1===this._localHold&&this._toggleMuteAudio(!1)),!0===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!1,!1===this._localHold&&this._toggleMuteVideo(!1)),!0!==t&&!0!==n||this._onunmute({audio:t,video:n})}hold(e={},t){if(T.debug("hold()"),this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_CONFIRMED)return!1;if(!0===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!0,this._onhold("local");const n={succeeded:()=>{t&&t()},failed:()=>{this.terminate({cause:o.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Hold Failed"})}};return e.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:n,extraHeaders:e.extraHeaders}):this._sendReinvite({eventHandlers:n,extraHeaders:e.extraHeaders}),!0}unhold(e={},t){if(T.debug("unhold()"),this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_CONFIRMED)return!1;if(!1===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!1,this._onunhold("local");const n={succeeded:()=>{t&&t()},failed:()=>{this.terminate({cause:o.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Unhold Failed"})}};return e.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:n,extraHeaders:e.extraHeaders}):this._sendReinvite({eventHandlers:n,extraHeaders:e.extraHeaders}),!0}renegotiate(e={},t){T.debug("renegotiate()");const n=e.rtcOfferConstraints||null;if(this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_CONFIRMED)return!1;if(!this._isReadyToReOffer())return!1;const s={succeeded:()=>{t&&t()},failed:()=>{this.terminate({cause:o.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Media Renegotiation Failed"})}};return this._setLocalMediaStatus(),e.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:s,rtcOfferConstraints:n,extraHeaders:e.extraHeaders}):this._sendReinvite({eventHandlers:s,rtcOfferConstraints:n,extraHeaders:e.extraHeaders}),!0}refer(e,t){T.debug("refer()");const n=e;if(this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_CONFIRMED)return!1;if(!(e=this._ua.normalizeTarget(e)))throw new TypeError(`Invalid target: ${n}`);const s=new g(this);s.sendRefer(e,t);const r=s.id;return this._referSubscribers[r]=s,s.on("requestFailed",(()=>{delete this._referSubscribers[r]})),s.on("accepted",(()=>{delete this._referSubscribers[r]})),s.on("failed",(()=>{delete this._referSubscribers[r]})),s}sendRequest(e,t){return T.debug("sendRequest()"),this._dialog.sendRequest(e,t)}receiveRequest(e){if(T.debug("receiveRequest()"),e.method===o.CANCEL)this._status!==b.STATUS_WAITING_FOR_ANSWER&&this._status!==b.STATUS_ANSWERED||(this._status=b.STATUS_CANCELED,this._request.reply(487),this._failed("remote",e,o.causes.CANCELED));else switch(e.method){case o.ACK:if(this._status!==b.STATUS_WAITING_FOR_ACK)return;if(this._status=b.STATUS_CONFIRMED,clearTimeout(this._timers.ackTimer),clearTimeout(this._timers.invite2xxTimer),this._late_sdp){if(!e.body){this.terminate({cause:o.causes.MISSING_SDP,status_code:400});break}const t={originator:"remote",type:"answer",sdp:e.body};T.debug('emit "sdp"'),this.emit("sdp",t);const n=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(n))).then((()=>{this._is_confirmed||this._confirmed("remote",e)})).catch((e=>{this.terminate({cause:o.causes.BAD_MEDIA_DESCRIPTION,status_code:488}),T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}))}else this._is_confirmed||this._confirmed("remote",e);break;case o.BYE:this._status===b.STATUS_CONFIRMED||this._status===b.STATUS_WAITING_FOR_ACK?(e.reply(200),this._ended("remote",e,o.causes.BYE)):this._status===b.STATUS_INVITE_RECEIVED||this._status===b.STATUS_WAITING_FOR_ANSWER?(e.reply(200),this._request.reply(487,"BYE Received"),this._ended("remote",e,o.causes.BYE)):e.reply(403,"Wrong Status");break;case o.INVITE:this._status===b.STATUS_CONFIRMED?e.hasHeader("replaces")?this._receiveReplaces(e):this._receiveReinvite(e):e.reply(403,"Wrong Status");break;case o.INFO:if(this._status===b.STATUS_1XX_RECEIVED||this._status===b.STATUS_WAITING_FOR_ANSWER||this._status===b.STATUS_ANSWERED||this._status===b.STATUS_WAITING_FOR_ACK||this._status===b.STATUS_CONFIRMED){const t=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;t&&t.match(/^application\/dtmf-relay/i)?new p(this).init_incoming(e):void 0!==t?new f(this).init_incoming(e):e.reply(415)}else e.reply(403,"Wrong Status");break;case o.UPDATE:this._status===b.STATUS_CONFIRMED?this._receiveUpdate(e):e.reply(403,"Wrong Status");break;case o.REFER:this._status===b.STATUS_CONFIRMED?this._receiveRefer(e):e.reply(403,"Wrong Status");break;case o.NOTIFY:this._status===b.STATUS_CONFIRMED?this._receiveNotify(e):e.reply(403,"Wrong Status");break;default:e.reply(501)}}onTransportError(){T.warn("onTransportError()"),this._status!==b.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:o.causes.CONNECTION_ERROR,cause:o.causes.CONNECTION_ERROR})}onRequestTimeout(){T.warn("onRequestTimeout()"),this._status!==b.STATUS_TERMINATED&&this.terminate({status_code:408,reason_phrase:o.causes.REQUEST_TIMEOUT,cause:o.causes.REQUEST_TIMEOUT})}onDialogError(){T.warn("onDialogError()"),this._status!==b.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:o.causes.DIALOG_ERROR,cause:o.causes.DIALOG_ERROR})}newDTMF(e){T.debug("newDTMF()"),this.emit("newDTMF",e)}newInfo(e){T.debug("newInfo()"),this.emit("newInfo",e)}_isReadyToReOffer(){return this._rtcReady?this._dialog?!0!==this._dialog.uac_pending_reply&&!0!==this._dialog.uas_pending_reply||(T.debug("_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress"),!1):(T.debug("_isReadyToReOffer() | session not established yet"),!1):(T.debug("_isReadyToReOffer() | internal WebRTC status not ready"),!1)}_close(){if(T.debug("close()"),this._localMediaStream&&this._localMediaStreamLocallyGenerated&&(T.debug("close() | closing local MediaStream"),u.closeMediaStream(this._localMediaStream)),this._status!==b.STATUS_TERMINATED){if(this._status=b.STATUS_TERMINATED,this._connection)try{this._connection.close()}catch(e){T.warn("close() | error closing the RTCPeerConnection: %o",e)}for(const e in this._timers)Object.prototype.hasOwnProperty.call(this._timers,e)&&clearTimeout(this._timers[e]);clearTimeout(this._sessionTimers.timer),this._dialog&&(this._dialog.terminate(),delete this._dialog);for(const e in this._earlyDialogs)Object.prototype.hasOwnProperty.call(this._earlyDialogs,e)&&(this._earlyDialogs[e].terminate(),delete this._earlyDialogs[e]);for(const e in this._referSubscribers)Object.prototype.hasOwnProperty.call(this._referSubscribers,e)&&delete this._referSubscribers[e];this._ua.destroyRTCSession(this)}}_setInvite2xxTimer(e,t){let n=c.T1;this._timers.invite2xxTimer=setTimeout(function s(){this._status===b.STATUS_WAITING_FOR_ACK&&(e.reply(200,null,[`Contact: ${this._contact}`],t),n<c.T2&&(n*=2,n>c.T2&&(n=c.T2)),this._timers.invite2xxTimer=setTimeout(s.bind(this),n))}.bind(this),n)}_setACKTimer(){this._timers.ackTimer=setTimeout((()=>{this._status===b.STATUS_WAITING_FOR_ACK&&(T.debug("no ACK received, terminating the session"),clearTimeout(this._timers.invite2xxTimer),this.sendRequest(o.BYE),this._ended("remote",null,o.causes.NO_ACK))}),c.TIMER_H)}_createRTCConnection(e,t){this._connection=new RTCPeerConnection(e,t),this._connection.addEventListener("iceconnectionstatechange",(()=>{"failed"===this._connection.iceConnectionState&&this.terminate({cause:o.causes.RTP_TIMEOUT,status_code:408,reason_phrase:o.causes.RTP_TIMEOUT})})),T.debug('emit "peerconnection"'),this.emit("peerconnection",{peerconnection:this._connection})}_createLocalDescription(e,t){if(T.debug("createLocalDescription()"),"offer"!==e&&"answer"!==e)throw new Error(`createLocalDescription() | invalid type "${e}"`);const n=this._connection;return this._rtcReady=!1,Promise.resolve().then((()=>"offer"===e?n.createOffer(t).catch((e=>(T.warn('emit "peerconnection:createofferfailed" [error:%o]',e),this.emit("peerconnection:createofferfailed",e),Promise.reject(e)))):n.createAnswer(t).catch((e=>(T.warn('emit "peerconnection:createanswerfailed" [error:%o]',e),this.emit("peerconnection:createanswerfailed",e),Promise.reject(e)))))).then((e=>n.setLocalDescription(e).catch((e=>(this._rtcReady=!0,T.warn('emit "peerconnection:setlocaldescriptionfailed" [error:%o]',e),this.emit("peerconnection:setlocaldescriptionfailed",e),Promise.reject(e)))))).then((()=>{const s=t&&t.iceRestart;if("complete"===n.iceGatheringState&&!s||"gathering"===n.iceGatheringState&&this._iceReady){this._rtcReady=!0;const t={originator:"local",type:e,sdp:n.localDescription.sdp};return T.debug('emit "sdp"'),this.emit("sdp",t),Promise.resolve(t.sdp)}return new Promise((t=>{let s,r,i=!1;this._iceReady=!1;const o=()=>{n.removeEventListener("icecandidate",s),n.removeEventListener("icegatheringstatechange",r),i=!0,this._rtcReady=!0,this._iceReady=!0;const o={originator:"local",type:e,sdp:n.localDescription.sdp};T.debug('emit "sdp"'),this.emit("sdp",o),t(o.sdp)};n.addEventListener("icecandidate",s=e=>{const t=e.candidate;t?this.emit("icecandidate",{candidate:t,ready:o}):i||o()}),n.addEventListener("icegatheringstatechange",r=()=>{"complete"!==n.iceGatheringState||i||o()})}))}))}_createDialog(e,t,n){const s="UAS"===t?e.to_tag:e.from_tag,r="UAS"===t?e.from_tag:e.to_tag,i=e.call_id+s+r;let l=this._earlyDialogs[i];if(n)return!!l||(l=new d(this,e,t,d.C.STATUS_EARLY),l.error?(T.debug(l.error),this._failed("remote",e,o.causes.INTERNAL_ERROR),!1):(this._earlyDialogs[i]=l,!0));{if(this._from_tag=e.from_tag,this._to_tag=e.to_tag,l)return l.update(e,t),this._dialog=l,delete this._earlyDialogs[i],!0;const n=new d(this,e,t);return n.error?(T.debug(n.error),this._failed("remote",e,o.causes.INTERNAL_ERROR),!1):(this._dialog=n,!0)}}_receiveReinvite(e){T.debug("receiveReinvite()");const t=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,n={request:e,callback:void 0,reject:function(t={}){s=!0;const n=t.status_code||403,r=t.reason_phrase||"",i=u.cloneArray(t.extraHeaders);if(this._status!==b.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError(`Invalid status_code: ${n}`);e.reply(n,r,i)}.bind(this)};let s=!1;if(this.emit("reinvite",n),!s){if(this._late_sdp=!1,!e.body)return this._late_sdp=!0,this._remoteHold&&(this._remoteHold=!1,this._onunhold("remote")),void(this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._createLocalDescription("offer",this._rtcOfferConstraints))).then((e=>{r.call(this,e)})).catch((()=>{e.reply(500)})));if("application/sdp"!==t)return T.debug("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then((e=>{this._status!==b.STATUS_TERMINATED&&r.call(this,e)})).catch((e=>{T.warn(e)}))}function r(t){const s=[`Contact: ${this._contact}`];this._handleSessionTimersInIncomingRequest(e,s),this._late_sdp&&(t=this._mangleOffer(t)),e.reply(200,null,s,t,(()=>{this._status=b.STATUS_WAITING_FOR_ACK,this._setInvite2xxTimer(e,t),this._setACKTimer()})),"function"==typeof n.callback&&n.callback()}}_receiveUpdate(e){T.debug("receiveUpdate()");const t=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,n={request:e,callback:void 0,reject:function(t={}){s=!0;const n=t.status_code||403,r=t.reason_phrase||"",i=u.cloneArray(t.extraHeaders);if(this._status!==b.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError(`Invalid status_code: ${n}`);e.reply(n,r,i)}.bind(this)};let s=!1;if(this.emit("update",n),!s)if(e.body){if("application/sdp"!==t)return T.debug("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then((e=>{this._status!==b.STATUS_TERMINATED&&r.call(this,e)})).catch((e=>{T.warn(e)}))}else r.call(this,null);function r(t){const s=[`Contact: ${this._contact}`];this._handleSessionTimersInIncomingRequest(e,s),e.reply(200,null,s,t),"function"==typeof n.callback&&n.callback()}}_processInDialogSdpOffer(e){T.debug("_processInDialogSdpOffer()");const t=e.parseSDP();let n=!1;for(const e of t.media){if(-1===C.indexOf(e.type))continue;const s=e.direction||t.direction||"sendrecv";if("sendonly"!==s&&"inactive"!==s){n=!1;break}n=!0}const s={originator:"remote",type:"offer",sdp:e.body};T.debug('emit "sdp"'),this.emit("sdp",s);const r=new RTCSessionDescription({type:"offer",sdp:s.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");return this._connection.setRemoteDescription(r).catch((t=>{throw e.reply(488),T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),this.emit("peerconnection:setremotedescriptionfailed",t),t}))})).then((()=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");!0===this._remoteHold&&!1===n?(this._remoteHold=!1,this._onunhold("remote")):!1===this._remoteHold&&!0===n&&(this._remoteHold=!0,this._onhold("remote"))})).then((()=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");return this._createLocalDescription("answer",this._rtcAnswerConstraints).catch((t=>{throw e.reply(500),T.warn('emit "peerconnection:createtelocaldescriptionfailed" [error:%o]',t),t}))})).catch((e=>{T.warn("_processInDialogSdpOffer() failed [error: %o]",e)})),this._connectionPromiseQueue}_receiveRefer(t){if(T.debug("receiveRefer()"),!t.refer_to)return T.debug("no Refer-To header field present in REFER"),void t.reply(400);if(t.refer_to.uri.scheme!==o.SIP)return T.debug("Refer-To header field points to a non-SIP URI scheme"),void t.reply(416);t.reply(202);const n=new m(this,t.cseq);function s(s,r={}){if(s="function"==typeof s?s:null,this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_CONFIRMED)return!1;const i=new e(this._ua);if(i.on("progress",(({response:e})=>{n.notify(e.status_code,e.reason_phrase)})),i.on("accepted",(({response:e})=>{n.notify(e.status_code,e.reason_phrase)})),i.on("_failed",(({message:e,cause:t})=>{e?n.notify(e.status_code,e.reason_phrase):n.notify(487,t)})),t.refer_to.uri.hasHeader("replaces")){const e=decodeURIComponent(t.refer_to.uri.getHeader("replaces"));r.extraHeaders=u.cloneArray(r.extraHeaders),r.extraHeaders.push(`Replaces: ${e}`)}i.connect(t.refer_to.uri.toAor(),r,s)}function r(){n.notify(603)}T.debug('emit "refer"'),this.emit("refer",{request:t,accept:(e,t)=>{s.call(this,e,t)},reject:()=>{r.call(this)}})}_receiveNotify(e){switch(T.debug("receiveNotify()"),e.event||e.reply(400),e.event.event){case"refer":{let t,n;if(e.event.params&&e.event.params.id)t=e.event.params.id,n=this._referSubscribers[t];else{if(1!==Object.keys(this._referSubscribers).length)return void e.reply(400,"Missing event id parameter");n=this._referSubscribers[Object.keys(this._referSubscribers)[0]]}if(!n)return void e.reply(481,"Subscription does not exist");n.receiveNotify(e),e.reply(200);break}default:e.reply(489)}}_receiveReplaces(t){function n(n){if(this._status!==b.STATUS_WAITING_FOR_ACK&&this._status!==b.STATUS_CONFIRMED)return!1;const s=new e(this._ua);s.on("confirmed",(()=>{this.terminate()})),s.init_incoming(t,n)}function s(){T.debug("Replaced INVITE rejected by the user"),t.reply(486)}T.debug("receiveReplaces()"),this.emit("replaces",{request:t,accept:e=>{n.call(this,e)},reject:()=>{s.call(this)}})}_sendInitialRequest(e,t,n){const s=new _(this._ua,this._request,{onRequestTimeout:()=>{this.onRequestTimeout()},onTransportError:()=>{this.onTransportError()},onAuthenticated:e=>{this._request=e},onReceiveResponse:e=>{this._receiveInviteResponse(e)}});Promise.resolve().then((()=>n||(e.audio||e.video?(this._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(e).catch((e=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");throw this._failed("local",null,o.causes.USER_DENIED_MEDIA_ACCESS),T.warn('emit "getusermediafailed" [error:%o]',e),this.emit("getusermediafailed",e),e}))):void 0))).then((e=>{if(this._status===b.STATUS_TERMINATED)throw new Error("terminated");return this._localMediaStream=e,e&&e.getTracks().forEach((t=>{this._connection.addTrack(t,e)})),this._connecting(this._request),this._createLocalDescription("offer",t).catch((e=>{throw this._failed("local",null,o.causes.WEBRTC_ERROR),e}))})).then((e=>{if(this._is_canceled||this._status===b.STATUS_TERMINATED)throw new Error("terminated");this._request.body=e,this._status=b.STATUS_INVITE_SENT,T.debug('emit "sending" [request:%o]',this._request),this.emit("sending",{request:this._request}),s.send()})).catch((e=>{this._status!==b.STATUS_TERMINATED&&T.warn(e)}))}_getDTMFRTPSender(){const e=this._connection.getSenders().find((e=>e.track&&"audio"===e.track.kind));if(e&&e.dtmf)return e.dtmf;T.warn("sendDTMF() | no local audio track to send DTMF with")}_receiveInviteResponse(e){if(T.debug("receiveInviteResponse()"),this._dialog&&e.status_code>=200&&e.status_code<=299){if(this._dialog.id.call_id===e.call_id&&this._dialog.id.local_tag===e.from_tag&&this._dialog.id.remote_tag===e.to_tag)return void this.sendRequest(o.ACK);{const t=new d(this,e,"UAC");return void 0!==t.error?void T.debug(t.error):(this.sendRequest(o.ACK),void this.sendRequest(o.BYE))}}if(this._is_canceled)e.status_code>=100&&e.status_code<200?this._request.cancel(this._cancel_reason):e.status_code>=200&&e.status_code<299&&this._acceptAndTerminate(e);else if(this._status===b.STATUS_INVITE_SENT||this._status===b.STATUS_1XX_RECEIVED)switch(!0){case/^100$/.test(e.status_code):this._status=b.STATUS_1XX_RECEIVED;break;case/^1[0-9]{2}$/.test(e.status_code):{if(!e.to_tag){T.debug("1xx response received without to tag");break}if(e.hasHeader("contact")&&!this._createDialog(e,"UAC",!0))break;if(this._status=b.STATUS_1XX_RECEIVED,!e.body){this._progress("remote",e);break}const t={originator:"remote",type:"answer",sdp:e.body};T.debug('emit "sdp"'),this.emit("sdp",t);const n=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(n))).then((()=>this._progress("remote",e))).catch((e=>{T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}));break}case/^2[0-9]{2}$/.test(e.status_code):{if(this._status=b.STATUS_CONFIRMED,!e.body){this._acceptAndTerminate(e,400,o.causes.MISSING_SDP),this._failed("remote",e,o.causes.BAD_MEDIA_DESCRIPTION);break}if(!this._createDialog(e,"UAC"))break;const t={originator:"remote",type:"answer",sdp:e.body};T.debug('emit "sdp"'),this.emit("sdp",t);const n=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>{if("stable"===this._connection.signalingState)return this._connection.createOffer(this._rtcOfferConstraints).then((e=>this._connection.setLocalDescription(e))).catch((t=>{this._acceptAndTerminate(e,500,t.toString()),this._failed("local",e,o.causes.WEBRTC_ERROR)}))})).then((()=>{this._connection.setRemoteDescription(n).then((()=>{this._handleSessionTimersInIncomingResponse(e),this._accepted("remote",e),this.sendRequest(o.ACK),this._confirmed("local",null)})).catch((t=>{this._acceptAndTerminate(e,488,"Not Acceptable Here"),this._failed("remote",e,o.causes.BAD_MEDIA_DESCRIPTION),T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),this.emit("peerconnection:setremotedescriptionfailed",t)}))}));break}default:{const t=u.sipErrorCause(e.status_code);this._failed("remote",e,t)}}}_sendReinvite(e={}){T.debug("sendReinvite()");const t=u.cloneArray(e.extraHeaders),n=u.cloneObject(e.eventHandlers),s=e.rtcOfferConstraints||this._rtcOfferConstraints||null;let r=!1;function i(e){if(this._status===b.STATUS_TERMINATED)return;if(this.sendRequest(o.ACK),r)return;if(this._handleSessionTimersInIncomingResponse(e),!e.body)return void l.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void l.call(this);const t={originator:"remote",type:"answer",sdp:e.body};T.debug('emit "sdp"'),this.emit("sdp",t);const s=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(s))).then((()=>{n.succeeded&&n.succeeded(e)})).catch((e=>{l.call(this),T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}))}function l(e){n.failed&&n.failed(e)}t.push(`Contact: ${this._contact}`),t.push("Content-Type: application/sdp"),this._sessionTimers.running&&t.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${this._sessionTimers.refresher?"uac":"uas"}`),this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._createLocalDescription("offer",s))).then((e=>{const n={originator:"local",type:"offer",sdp:e=this._mangleOffer(e)};T.debug('emit "sdp"'),this.emit("sdp",n),this.sendRequest(o.INVITE,{extraHeaders:t,body:e,eventHandlers:{onSuccessResponse:e=>{i.call(this,e),r=!0},onErrorResponse:e=>{l.call(this,e)},onTransportError:()=>{this.onTransportError()},onRequestTimeout:()=>{this.onRequestTimeout()},onDialogError:()=>{this.onDialogError()}}})})).catch((()=>{l()}))}_sendUpdate(e={}){T.debug("sendUpdate()");const t=u.cloneArray(e.extraHeaders),n=u.cloneObject(e.eventHandlers),s=e.rtcOfferConstraints||this._rtcOfferConstraints||null,r=e.sdpOffer||!1;let i=!1;function l(e){if(this._status!==b.STATUS_TERMINATED&&!i)if(this._handleSessionTimersInIncomingResponse(e),r){if(!e.body)return void a.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void a.call(this);const t={originator:"remote",type:"answer",sdp:e.body};T.debug('emit "sdp"'),this.emit("sdp",t);const s=new RTCSessionDescription({type:"answer",sdp:t.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._connection.setRemoteDescription(s))).then((()=>{n.succeeded&&n.succeeded(e)})).catch((e=>{a.call(this),T.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),this.emit("peerconnection:setremotedescriptionfailed",e)}))}else n.succeeded&&n.succeeded(e)}function a(e){n.failed&&n.failed(e)}t.push(`Contact: ${this._contact}`),this._sessionTimers.running&&t.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${this._sessionTimers.refresher?"uac":"uas"}`),r?(t.push("Content-Type: application/sdp"),this._connectionPromiseQueue=this._connectionPromiseQueue.then((()=>this._createLocalDescription("offer",s))).then((e=>{const n={originator:"local",type:"offer",sdp:e=this._mangleOffer(e)};T.debug('emit "sdp"'),this.emit("sdp",n),this.sendRequest(o.UPDATE,{extraHeaders:t,body:e,eventHandlers:{onSuccessResponse:e=>{l.call(this,e),i=!0},onErrorResponse:e=>{a.call(this,e)},onTransportError:()=>{this.onTransportError()},onRequestTimeout:()=>{this.onRequestTimeout()},onDialogError:()=>{this.onDialogError()}}})})).catch((()=>{a.call(this)}))):this.sendRequest(o.UPDATE,{extraHeaders:t,eventHandlers:{onSuccessResponse:e=>{l.call(this,e)},onErrorResponse:e=>{a.call(this,e)},onTransportError:()=>{this.onTransportError()},onRequestTimeout:()=>{this.onRequestTimeout()},onDialogError:()=>{this.onDialogError()}}})}_acceptAndTerminate(e,t,n){T.debug("acceptAndTerminate()");const s=[];t&&(n=n||o.REASON_PHRASE[t]||"",s.push(`Reason: SIP ;cause=${t}; text="${n}"`)),(this._dialog||this._createDialog(e,"UAC"))&&(this.sendRequest(o.ACK),this.sendRequest(o.BYE,{extraHeaders:s})),this._status=b.STATUS_TERMINATED}_mangleOffer(e){if(!this._localHold&&!this._remoteHold)return e;if(e=r.parse(e),this._localHold&&!this._remoteHold){T.debug("mangleOffer() | me on hold, mangling offer");for(const t of e.media)-1!==C.indexOf(t.type)&&(t.direction?"sendrecv"===t.direction?t.direction="sendonly":"recvonly"===t.direction&&(t.direction="inactive"):t.direction="sendonly")}else if(this._localHold&&this._remoteHold){T.debug("mangleOffer() | both on hold, mangling offer");for(const t of e.media)-1!==C.indexOf(t.type)&&(t.direction="inactive")}else if(this._remoteHold){T.debug("mangleOffer() | remote on hold, mangling offer");for(const t of e.media)-1!==C.indexOf(t.type)&&(t.direction?"sendrecv"===t.direction?t.direction="recvonly":"recvonly"===t.direction&&(t.direction="inactive"):t.direction="recvonly")}return r.write(e)}_setLocalMediaStatus(){let e=!0,t=!0;(this._localHold||this._remoteHold)&&(e=!1,t=!1),this._audioMuted&&(e=!1),this._videoMuted&&(t=!1),this._toggleMuteAudio(!e),this._toggleMuteVideo(!t)}_handleSessionTimersInIncomingRequest(e,t){if(!this._sessionTimers.enabled)return;let n;e.session_expires&&e.session_expires>=o.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,n=e.session_expires_refresher||"uas"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,n="uas"),t.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${n}`),this._sessionTimers.refresher="uas"===n,this._runSessionTimer()}_handleSessionTimersInIncomingResponse(e){if(!this._sessionTimers.enabled)return;let t;e.session_expires&&e.session_expires>=o.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,t=e.session_expires_refresher||"uac"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,t="uac"),this._sessionTimers.refresher="uac"===t,this._runSessionTimer()}_runSessionTimer(){const e=this._sessionTimers.currentExpires;this._sessionTimers.running=!0,clearTimeout(this._sessionTimers.timer),this._sessionTimers.refresher?this._sessionTimers.timer=setTimeout((()=>{this._status!==b.STATUS_TERMINATED&&this._isReadyToReOffer()&&(T.debug("runSessionTimer() | sending session refresh request"),this._sessionTimers.refreshMethod===o.UPDATE?this._sendUpdate():this._sendReinvite())}),500*e):this._sessionTimers.timer=setTimeout((()=>{this._status!==b.STATUS_TERMINATED&&(T.warn("runSessionTimer() | timer expired, terminating the session"),this.terminate({cause:o.causes.REQUEST_TIMEOUT,status_code:408,reason_phrase:"Session Timer Expired"}))}),1100*e)}_toggleMuteAudio(e){const t=this._connection.getSenders().filter((e=>e.track&&"audio"===e.track.kind));for(const n of t)n.track.enabled=!e}_toggleMuteVideo(e){const t=this._connection.getSenders().filter((e=>e.track&&"video"===e.track.kind));for(const n of t)n.track.enabled=!e}_newRTCSession(e,t){T.debug("newRTCSession()"),this._ua.newRTCSession(this,{originator:e,session:this,request:t})}_connecting(e){T.debug("session connecting"),T.debug('emit "connecting"'),this.emit("connecting",{request:e})}_progress(e,t){T.debug("session progress"),T.debug('emit "progress"'),this.emit("progress",{originator:e,response:t||null})}_accepted(e,t){T.debug("session accepted"),this._start_time=new Date,T.debug('emit "accepted"'),this.emit("accepted",{originator:e,response:t||null})}_confirmed(e,t){T.debug("session confirmed"),this._is_confirmed=!0,T.debug('emit "confirmed"'),this.emit("confirmed",{originator:e,ack:t||null})}_ended(e,t,n){T.debug("session ended"),this._end_time=new Date,this._close(),T.debug('emit "ended"'),this.emit("ended",{originator:e,message:t||null,cause:n})}_failed(e,t,n){T.debug("session failed"),T.debug('emit "_failed"'),this.emit("_failed",{originator:e,message:t||null,cause:n}),this._close(),T.debug('emit "failed"'),this.emit("failed",{originator:e,message:t||null,cause:n})}_onhold(e){T.debug("session onhold"),this._setLocalMediaStatus(),T.debug('emit "hold"'),this.emit("hold",{originator:e})}_onunhold(e){T.debug("session onunhold"),this._setLocalMediaStatus(),T.debug('emit "unhold"'),this.emit("unhold",{originator:e})}_onmute({audio:e,video:t}){T.debug("session onmute"),this._setLocalMediaStatus(),T.debug('emit "muted"'),this.emit("muted",{audio:e,video:t})}_onunmute({audio:e,video:t}){T.debug("session onunmute"),this._setLocalMediaStatus(),T.debug('emit "unmuted"'),this.emit("unmuted",{audio:e,video:t})}}},148:(e,t,n)=>{const s=n(99).EventEmitter,r=n(835),i=n(937),o=n(247),l=n(911),a=new r("RTCSession:DTMF"),u={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500};e.exports=class extends s{constructor(e){super(),this._session=e,this._direction=null,this._tone=null,this._duration=null,this._request=null}get tone(){return this._tone}get duration(){return this._duration}send(e,t={}){if(void 0===e)throw new TypeError("Not enough arguments");if(this._direction="outgoing",this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new o.InvalidStateError(this._session.status);const n=l.cloneArray(t.extraHeaders);if(this.eventHandlers=l.cloneObject(t.eventHandlers),"string"==typeof e)e=e.toUpperCase();else{if("number"!=typeof e)throw new TypeError(`Invalid tone: ${e}`);e=e.toString()}if(!e.match(/^[0-9A-DR#*]$/))throw new TypeError(`Invalid tone: ${e}`);this._tone=e,this._duration=t.duration,n.push("Content-Type: application/dtmf-relay");let s=`Signal=${this._tone}\r\n`;s+=`Duration=${this._duration}`,this._session.newDTMF({originator:"local",dtmf:this,request:this._request}),this._session.sendRequest(i.INFO,{extraHeaders:n,eventHandlers:{onSuccessResponse:e=>{this.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:e=>{this.eventHandlers.onFailed&&this.eventHandlers.onFailed(),this.emit("failed",{originator:"remote",response:e})},onRequestTimeout:()=>{this._session.onRequestTimeout()},onTransportError:()=>{this._session.onTransportError()},onDialogError:()=>{this._session.onDialogError()}},body:s})}init_incoming(e){const t=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,n=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(this._direction="incoming",this._request=e,e.reply(200),e.body){const s=e.body.split("\n");s.length>=1&&t.test(s[0])&&(this._tone=s[0].replace(t,"$2")),s.length>=2&&n.test(s[1])&&(this._duration=parseInt(s[1].replace(n,"$2"),10))}this._duration||(this._duration=u.DEFAULT_DURATION),this._tone?this._session.newDTMF({originator:"remote",dtmf:this,request:e}):a.debug("invalid INFO DTMF received, discarded")}},e.exports.C=u},479:(e,t,n)=>{const s=n(99).EventEmitter,r=n(937),i=n(247),o=n(911);e.exports=class extends s{constructor(e){super(),this._session=e,this._direction=null,this._contentType=null,this._body=null}get contentType(){return this._contentType}get body(){return this._body}send(e,t,n={}){if(this._direction="outgoing",void 0===e)throw new TypeError("Not enough arguments");if(this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new i.InvalidStateError(this._session.status);this._contentType=e,this._body=t;const s=o.cloneArray(n.extraHeaders);s.push(`Content-Type: ${e}`),this._session.newInfo({originator:"local",info:this,request:this.request}),this._session.sendRequest(r.INFO,{extraHeaders:s,eventHandlers:{onSuccessResponse:e=>{this.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:e=>{this.emit("failed",{originator:"remote",response:e})},onTransportError:()=>{this._session.onTransportError()},onRequestTimeout:()=>{this._session.onRequestTimeout()},onDialogError:()=>{this._session.onDialogError()}},body:t})}init_incoming(e){this._direction="incoming",this.request=e,e.reply(200),this._contentType=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,this._body=e.body,this._session.newInfo({originator:"remote",info:this,request:e})}}},437:(e,t,n)=>{const s=n(835),r=n(937),i=new s("RTCSession:ReferNotifier");e.exports=class{constructor(e,t,n){this._session=e,this._id=t,this._expires=n||300,this._active=!0,this.notify(100)}notify(e,t){if(i.debug("notify()"),!1===this._active)return;let n;t=t||r.REASON_PHRASE[e]||"",n=e>=200?"terminated;reason=noresource":`active;expires=${this._expires}`,this._session.sendRequest(r.NOTIFY,{extraHeaders:[`Event: refer;id=${this._id}`,`Subscription-State: ${n}`,"Content-Type: message/sipfrag;version=2.0"],body:`SIP/2.0 ${e} ${t}`,eventHandlers:{onErrorResponse(){this._active=!1}}})}}},156:(e,t,n)=>{const s=n(99).EventEmitter,r=n(835),i=n(937),o=n(845),l=n(911),a=new r("RTCSession:ReferSubscriber");e.exports=class extends s{constructor(e){super(),this._id=null,this._session=e}get id(){return this._id}sendRefer(e,t={}){a.debug("sendRefer()");const n=l.cloneArray(t.extraHeaders),s=l.cloneObject(t.eventHandlers);for(const e in s)Object.prototype.hasOwnProperty.call(s,e)&&this.on(e,s[e]);let r=null;t.replaces&&(r=t.replaces._request.call_id,r+=`;to-tag=${t.replaces._to_tag}`,r+=`;from-tag=${t.replaces._from_tag}`,r=encodeURIComponent(r));const o=`Refer-To: <${e}${r?`?Replaces=${r}`:""}>`;if(n.push(o),!n.some((e=>e.toLowerCase().startsWith("referred-by:")))){const e=`Referred-By: <${this._session._ua._configuration.uri._scheme}:${this._session._ua._configuration.uri._user}@${this._session._ua._configuration.uri._host}>`;n.push(e)}n.push(`Contact: ${this._session.contact}`);const u=this._session.sendRequest(i.REFER,{extraHeaders:n,eventHandlers:{onSuccessResponse:e=>{this._requestSucceeded(e)},onErrorResponse:e=>{this._requestFailed(e,i.causes.REJECTED)},onTransportError:()=>{this._requestFailed(null,i.causes.CONNECTION_ERROR)},onRequestTimeout:()=>{this._requestFailed(null,i.causes.REQUEST_TIMEOUT)},onDialogError:()=>{this._requestFailed(null,i.causes.DIALOG_ERROR)}}});this._id=u.cseq}receiveNotify(e){if(a.debug("receiveNotify()"),!e.body)return;const t=o.parse(e.body.trim(),"Status_Line");if(-1!==t)switch(!0){case/^100$/.test(t.status_code):this.emit("trying",{request:e,status_line:t});break;case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",{request:e,status_line:t});break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("accepted",{request:e,status_line:t});break;default:this.emit("failed",{request:e,status_line:t})}else a.debug(`receiveNotify() | error parsing NOTIFY body: "${e.body}"`)}_requestSucceeded(e){a.debug("REFER succeeded"),a.debug('emit "requestSucceeded"'),this.emit("requestSucceeded",{response:e})}_requestFailed(e,t){a.debug("REFER failed"),a.debug('emit "requestFailed"'),this.emit("requestFailed",{response:e||null,cause:t})}}},349:(e,t,n)=>{const s=n(835),r=n(911),i=n(937),o=n(490),l=n(915),a=new s("Registrator");e.exports=class{constructor(e,t){this._reg_id=1,this._ua=e,this._transport=t,this._registrar=e.configuration.registrar_server,this._expires=e.configuration.register_expires,this._call_id=r.createRandomToken(22),this._cseq=0,this._to_uri=e.configuration.uri,this._registrationTimer=null,this._registering=!1,this._registered=!1,this._contact=this._ua.contact.toString(),this._contact+=";+sip.ice",this._extraHeaders=[],this._extraContactParams="",this._sipInstance=`"<urn:uuid:${this._ua.configuration.instance_id}>"`,this._contact+=`;reg-id=${this._reg_id}`,this._contact+=`;+sip.instance=${this._sipInstance}`}get registered(){return this._registered}setExtraHeaders(e){Array.isArray(e)||(e=[]),this._extraHeaders=e.slice()}setExtraContactParams(e){e instanceof Object||(e={}),this._extraContactParams="";for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)){const n=e[t];this._extraContactParams+=`;${t}`,n&&(this._extraContactParams+=`=${n}`)}}register(){if(this._registering)return void a.debug("Register request in progress...");const e=this._extraHeaders.slice();e.push(`Contact: ${this._contact};expires=${this._expires}${this._extraContactParams}`),e.push(`Expires: ${this._expires}`);const t=new o.OutgoingRequest(i.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},e),n=new l(this._ua,t,{onRequestTimeout:()=>{this._registrationFailure(null,i.causes.REQUEST_TIMEOUT)},onTransportError:()=>{this._registrationFailure(null,i.causes.CONNECTION_ERROR)},onAuthenticated:()=>{this._cseq+=1},onReceiveResponse:e=>{if(e.cseq===this._cseq)switch(null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):{if(this._registering=!1,!e.hasHeader("Contact")){a.debug("no Contact header in response to REGISTER, response ignored");break}const t=e.headers.Contact.reduce(((e,t)=>e.concat(t.parsed)),[]);let n=t.find((e=>this._sipInstance===e.getParam("+sip.instance")&&this._reg_id===parseInt(e.getParam("reg-id"))));if(n||(n=t.find((e=>e.uri.user===this._ua.contact.uri.user))),!n){a.debug("no Contact header pointing to us, response ignored");break}let s=n.getParam("expires");!s&&e.hasHeader("expires")&&(s=e.getHeader("expires")),s||(s=this._expires),s=Number(s),s<10&&(s=10);const r=s>64?1e3*s/2+Math.floor(1e3*(s/2-32)*Math.random()):1e3*s-5e3;this._registrationTimer=setTimeout((()=>{this._registrationTimer=null,0===this._ua.listeners("registrationExpiring").length?this.register():this._ua.emit("registrationExpiring")}),r),n.hasParam("temp-gruu")&&(this._ua.contact.temp_gruu=n.getParam("temp-gruu").replace(/"/g,"")),n.hasParam("pub-gruu")&&(this._ua.contact.pub_gruu=n.getParam("pub-gruu").replace(/"/g,"")),this._registered||(this._registered=!0,this._ua.registered({response:e}));break}case/^423$/.test(e.status_code):e.hasHeader("min-expires")?(this._expires=Number(e.getHeader("min-expires")),this._expires<10&&(this._expires=10),this.register()):(a.debug("423 response received for REGISTER without Min-Expires"),this._registrationFailure(e,i.causes.SIP_FAILURE_CODE));break;default:{const t=r.sipErrorCause(e.status_code);this._registrationFailure(e,t)}}}});this._registering=!0,n.send()}unregister(e={}){if(!this._registered)return void a.debug("already unregistered");this._registered=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null);const t=this._extraHeaders.slice();e.all?t.push(`Contact: *${this._extraContactParams}`):t.push(`Contact: ${this._contact};expires=0${this._extraContactParams}`),t.push("Expires: 0");const n=new o.OutgoingRequest(i.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},t);new l(this._ua,n,{onRequestTimeout:()=>{this._unregistered(null,i.causes.REQUEST_TIMEOUT)},onTransportError:()=>{this._unregistered(null,i.causes.CONNECTION_ERROR)},onAuthenticated:()=>{this._cseq+=1},onReceiveResponse:e=>{switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._unregistered(e);break;default:{const t=r.sipErrorCause(e.status_code);this._unregistered(e,t)}}}}).send()}close(){this._registered&&this.unregister()}onTransportClosed(){this._registering=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),this._registered&&(this._registered=!1,this._ua.unregistered({}))}_registrationFailure(e,t){this._registering=!1,this._ua.registrationFailed({response:e||null,cause:t}),this._registered&&(this._registered=!1,this._ua.unregistered({response:e||null,cause:t}))}_unregistered(e,t){this._registering=!1,this._registered=!1,this._ua.unregistered({response:e||null,cause:t||null})}}},915:(e,t,n)=>{const s=n(835),r=n(937),i=n(535),o=n(478),l=new s("RequestSender"),a={onRequestTimeout:()=>{},onTransportError:()=>{},onReceiveResponse:()=>{},onAuthenticated:()=>{}};e.exports=class{constructor(e,t,n){this._ua=e,this._eventHandlers=n,this._method=t.method,this._request=t,this._auth=null,this._challenged=!1,this._staled=!1;for(const e in a)Object.prototype.hasOwnProperty.call(a,e)&&(this._eventHandlers[e]||(this._eventHandlers[e]=a[e]));e.status!==e.C.STATUS_USER_CLOSED||this._method===r.BYE&&this._method===r.ACK||this._eventHandlers.onTransportError()}send(){const e={onRequestTimeout:()=>{this._eventHandlers.onRequestTimeout()},onTransportError:()=>{this._eventHandlers.onTransportError()},onReceiveResponse:e=>{this._receiveResponse(e)}};switch(this._method){case"INVITE":this.clientTransaction=new o.InviteClientTransaction(this._ua,this._ua.transport,this._request,e);break;case"ACK":this.clientTransaction=new o.AckClientTransaction(this._ua,this._ua.transport,this._request,e);break;default:this.clientTransaction=new o.NonInviteClientTransaction(this._ua,this._ua.transport,this._request,e)}this._ua._configuration.authorization_jwt&&this._request.setHeader("Authorization",this._ua._configuration.authorization_jwt),this.clientTransaction.send()}_receiveResponse(e){let t,n;const s=e.status_code;if(401!==s&&407!==s||null===this._ua.configuration.password&&null===this._ua.configuration.ha1)this._eventHandlers.onReceiveResponse(e);else{if(401===e.status_code?(t=e.parseHeader("www-authenticate"),n="authorization"):(t=e.parseHeader("proxy-authenticate"),n="proxy-authorization"),!t)return l.debug(`${e.status_code} with wrong or missing challenge, cannot authenticate`),void this._eventHandlers.onReceiveResponse(e);if(!this._challenged||!this._staled&&!0===t.stale){if(this._auth||(this._auth=new i({username:this._ua.configuration.authorization_user,password:this._ua.configuration.password,realm:this._ua.configuration.realm,ha1:this._ua.configuration.ha1})),!this._auth.authenticate(this._request,t))return void this._eventHandlers.onReceiveResponse(e);this._challenged=!0,this._ua.set("realm",this._auth.get("realm")),this._ua.set("ha1",this._auth.get("ha1")),t.stale&&(this._staled=!0),this._request=this._request.clone(),this._request.cseq+=1,this._request.setHeader("cseq",`${this._request.cseq} ${this._method}`),this._request.setHeader(n,this._auth.toString()),this._eventHandlers.onAuthenticated(this._request),this.send()}else this._eventHandlers.onReceiveResponse(e)}}}},490:(e,t,n)=>{const s=n(548),r=n(835),i=n(937),o=n(911),l=n(716),a=n(845),u=new r("SIPMessage");class c{constructor(e,t,n,s,r,a){if(!e||!t||!n)return null;s=s||{},this.ua=n,this.headers={},this.method=e,this.ruri=t,this.body=a,this.extraHeaders=o.cloneArray(r),s.route_set?this.setHeader("route",s.route_set):n.configuration.use_preloaded_route&&this.setHeader("route",`<${n.transport.sip_uri};lr>`),this.setHeader("via",""),this.setHeader("max-forwards",i.MAX_FORWARDS);const u=s.to_uri||t,c=s.to_tag?{tag:s.to_tag}:null,h=void 0!==s.to_display_name?s.to_display_name:null;this.to=new l(u,h,c),this.setHeader("to",this.to.toString());const d=s.from_uri||n.configuration.uri,_={tag:s.from_tag||o.newTag()};let p;p=void 0!==s.from_display_name?s.from_display_name:n.configuration.display_name?n.configuration.display_name:null,this.from=new l(d,p,_),this.setHeader("from",this.from.toString());const f=s.call_id||n.configuration.jssip_id+o.createRandomToken(15);this.call_id=f,this.setHeader("call-id",f);const m=s.cseq||Math.floor(1e4*Math.random());this.cseq=m,this.setHeader("cseq",`${m} ${e}`)}setHeader(e,t){const n=new RegExp(`^\\s*${e}\\s*:`,"i");for(let e=0;e<this.extraHeaders.length;e++)n.test(this.extraHeaders[e])&&this.extraHeaders.splice(e,1);this.headers[o.headerize(e)]=Array.isArray(t)?t:[t]}getHeader(e){const t=this.headers[o.headerize(e)];if(t){if(t[0])return t[0]}else{const t=new RegExp(`^\\s*${e}\\s*:`,"i");for(const e of this.extraHeaders)if(t.test(e))return e.substring(e.indexOf(":")+1).trim()}}getHeaders(e){const t=this.headers[o.headerize(e)],n=[];if(t){for(const e of t)n.push(e);return n}{const t=new RegExp(`^\\s*${e}\\s*:`,"i");for(const e of this.extraHeaders)t.test(e)&&n.push(e.substring(e.indexOf(":")+1).trim());return n}}hasHeader(e){if(this.headers[o.headerize(e)])return!0;{const t=new RegExp(`^\\s*${e}\\s*:`,"i");for(const e of this.extraHeaders)if(t.test(e))return!0}return!1}parseSDP(e){return!e&&this.sdp||(this.sdp=s.parse(this.body||"")),this.sdp}toString(){let e=`${this.method} ${this.ruri} SIP/2.0\r\n`;for(const t in this.headers)if(Object.prototype.hasOwnProperty.call(this.headers,t))for(const n of this.headers[t])e+=`${t}: ${n}\r\n`;for(const t of this.extraHeaders)e+=`${t.trim()}\r\n`;const t=[];switch(this.method){case i.REGISTER:t.push("path","gruu");break;case i.INVITE:this.ua.configuration.session_timers&&t.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&t.push("gruu"),t.push("ice","replaces");break;case i.UPDATE:this.ua.configuration.session_timers&&t.push("timer"),t.push("ice")}t.push("outbound");const n=this.ua.configuration.user_agent||i.USER_AGENT;return e+=`Allow: ${i.ALLOWED_METHODS}\r\n`,e+=`Supported: ${t}\r\n`,e+=`User-Agent: ${n}\r\n`,this.body?(e+=`Content-Length: ${o.str_utf8_length(this.body)}\r\n\r\n`,e+=this.body):e+="Content-Length: 0\r\n\r\n",e}clone(){const e=new c(this.method,this.ruri,this.ua);return Object.keys(this.headers).forEach((function(t){e.headers[t]=this.headers[t].slice()}),this),e.body=this.body,e.extraHeaders=o.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e}}class h extends c{constructor(e,t,n,s,r){super(i.INVITE,e,t,n,s,r),this.transaction=null}cancel(e){this.transaction.cancel(e)}clone(){const e=new h(this.ruri,this.ua);return Object.keys(this.headers).forEach((function(t){e.headers[t]=this.headers[t].slice()}),this),e.body=this.body,e.extraHeaders=o.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e.transaction=this.transaction,e}}class d{constructor(){this.data=null,this.headers=null,this.method=null,this.via=null,this.via_branch=null,this.call_id=null,this.cseq=null,this.from=null,this.from_tag=null,this.to=null,this.to_tag=null,this.body=null,this.sdp=null}addHeader(e,t){const n={raw:t};e=o.headerize(e),this.headers[e]?this.headers[e].push(n):this.headers[e]=[n]}getHeader(e){const t=this.headers[o.headerize(e)];if(t)return t[0]?t[0].raw:void 0}getHeaders(e){const t=this.headers[o.headerize(e)],n=[];if(!t)return[];for(const e of t)n.push(e.raw);return n}hasHeader(e){return!!this.headers[o.headerize(e)]}parseHeader(e,t=0){if(e=o.headerize(e),!this.headers[e])return void u.debug(`header "${e}" not present`);if(t>=this.headers[e].length)return void u.debug(`not so many "${e}" headers present`);const n=this.headers[e][t],s=n.raw;if(n.parsed)return n.parsed;const r=a.parse(s,e.replace(/-/g,"_"));return-1===r?(this.headers[e].splice(t,1),void u.debug(`error parsing "${e}" header field with value "${s}"`)):(n.parsed=r,r)}s(e,t){return this.parseHeader(e,t)}setHeader(e,t){const n={raw:t};this.headers[o.headerize(e)]=[n]}parseSDP(e){return!e&&this.sdp||(this.sdp=s.parse(this.body||"")),this.sdp}toString(){return this.data}}e.exports={OutgoingRequest:c,InitialOutgoingInviteRequest:h,IncomingRequest:class extends d{constructor(e){super(),this.ua=e,this.headers={},this.ruri=null,this.transport=null,this.server_transaction=null}reply(e,t,n,s,r,l){const a=[];let u=this.getHeader("To");if(t=t||null,!(e=e||null)||e<100||e>699)throw new TypeError(`Invalid status_code: ${e}`);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError(`Invalid reason_phrase: ${t}`);t=t||i.REASON_PHRASE[e]||"",n=o.cloneArray(n);let c=`SIP/2.0 ${e} ${t}\r\n`;if(this.method===i.INVITE&&e>100&&e<=200){const e=this.getHeaders("record-route");for(const t of e)c+=`Record-Route: ${t}\r\n`}const h=this.getHeaders("via");for(const e of h)c+=`Via: ${e}\r\n`;!this.to_tag&&e>100?u+=`;tag=${o.newTag()}`:this.to_tag&&!this.s("to").hasParam("tag")&&(u+=`;tag=${this.to_tag}`),c+=`To: ${u}\r\n`,c+=`From: ${this.getHeader("From")}\r\n`,c+=`Call-ID: ${this.call_id}\r\n`,c+=`CSeq: ${this.cseq} ${this.method}\r\n`;for(const e of n)c+=`${e.trim()}\r\n`;switch(this.method){case i.INVITE:this.ua.configuration.session_timers&&a.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&a.push("gruu"),a.push("ice","replaces");break;case i.UPDATE:this.ua.configuration.session_timers&&a.push("timer"),s&&a.push("ice"),a.push("replaces")}a.push("outbound"),this.method===i.OPTIONS?(c+=`Allow: ${i.ALLOWED_METHODS}\r\n`,c+=`Accept: ${i.ACCEPTED_BODY_TYPES}\r\n`):405===e?c+=`Allow: ${i.ALLOWED_METHODS}\r\n`:415===e&&(c+=`Accept: ${i.ACCEPTED_BODY_TYPES}\r\n`),c+=`Supported: ${a}\r\n`,s?(c+="Content-Type: application/sdp\r\n",c+=`Content-Length: ${o.str_utf8_length(s)}\r\n\r\n`,c+=s):c+="Content-Length: 0\r\n\r\n",this.server_transaction.receiveResponse(e,c,r,l)}reply_sl(e=null,t=null){const n=this.getHeaders("via");if(!e||e<100||e>699)throw new TypeError(`Invalid status_code: ${e}`);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError(`Invalid reason_phrase: ${t}`);let s=`SIP/2.0 ${e} ${t=t||i.REASON_PHRASE[e]||""}\r\n`;for(const e of n)s+=`Via: ${e}\r\n`;let r=this.getHeader("To");!this.to_tag&&e>100?r+=`;tag=${o.newTag()}`:this.to_tag&&!this.s("to").hasParam("tag")&&(r+=`;tag=${this.to_tag}`),s+=`To: ${r}\r\n`,s+=`From: ${this.getHeader("From")}\r\n`,s+=`Call-ID: ${this.call_id}\r\n`,s+=`CSeq: ${this.cseq} ${this.method}\r\n`,s+="Content-Length: 0\r\n\r\n",this.transport.send(s)}},IncomingResponse:class extends d{constructor(){super(),this.headers={},this.status_code=null,this.reason_phrase=null}}}},497:(e,t,n)=>{const s=n(835),r=n(911),i=n(845),o=new s("Socket");t.isSocket=e=>{if(Array.isArray(e))return!1;if(void 0===e)return o.warn("undefined JsSIP.Socket instance"),!1;try{if(!r.isString(e.url))throw o.warn("missing or invalid JsSIP.Socket url property"),new Error("Missing or invalid JsSIP.Socket url property");if(!r.isString(e.via_transport))throw o.warn("missing or invalid JsSIP.Socket via_transport property"),new Error("Missing or invalid JsSIP.Socket via_transport property");if(-1===i.parse(e.sip_uri,"SIP_URI"))throw o.warn("missing or invalid JsSIP.Socket sip_uri property"),new Error("missing or invalid JsSIP.Socket sip_uri property")}catch(e){return!1}try{["connect","disconnect","send"].forEach((t=>{if(!r.isFunction(e[t]))throw o.warn(`missing or invalid JsSIP.Socket method: ${t}`),new Error(`Missing or invalid JsSIP.Socket method: ${t}`)}))}catch(e){return!1}return!0}},12:e=>{e.exports={T1:500,T2:4e3,T4:5e3,TIMER_B:32e3,TIMER_D:0,TIMER_F:32e3,TIMER_H:32e3,TIMER_I:0,TIMER_J:0,TIMER_K:0,TIMER_L:32e3,TIMER_M:32e3,PROVISIONAL_RESPONSE_INTERVAL:6e4}},478:(e,t,n)=>{const s=n(99).EventEmitter,r=n(835),i=n(937),o=n(490),l=n(12),a=new r("NonInviteClientTransaction"),u=new r("InviteClientTransaction"),c=new r("AckClientTransaction"),h=new r("NonInviteServerTransaction"),d=new r("InviteServerTransaction"),_={STATUS_TRYING:1,STATUS_PROCEEDING:2,STATUS_CALLING:3,STATUS_ACCEPTED:4,STATUS_COMPLETED:5,STATUS_TERMINATED:6,STATUS_CONFIRMED:7,NON_INVITE_CLIENT:"nict",NON_INVITE_SERVER:"nist",INVITE_CLIENT:"ict",INVITE_SERVER:"ist"};e.exports={C:_,NonInviteClientTransaction:class extends s{constructor(e,t,n,s){super(),this.type=_.NON_INVITE_CLIENT,this.id=`z9hG4bK${Math.floor(1e7*Math.random())}`,this.ua=e,this.transport=t,this.request=n,this.eventHandlers=s;let r=`SIP/2.0/${t.via_transport}`;r+=` ${e.configuration.via_host};branch=${this.id}`,this.request.setHeader("via",r),this.ua.newTransaction(this)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}send(){this.stateChanged(_.STATUS_TRYING),this.F=setTimeout((()=>{this.timer_F()}),l.TIMER_F),this.transport.send(this.request)||this.onTransportError()}onTransportError(){a.debug(`transport error occurred, deleting transaction ${this.id}`),clearTimeout(this.F),clearTimeout(this.K),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onTransportError()}timer_F(){a.debug(`Timer F expired for transaction ${this.id}`),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout()}timer_K(){this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}receiveResponse(e){const t=e.status_code;if(t<200)switch(this.state){case _.STATUS_TRYING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e)}else switch(this.state){case _.STATUS_TRYING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_COMPLETED),clearTimeout(this.F),408===t?this.eventHandlers.onRequestTimeout():this.eventHandlers.onReceiveResponse(e),this.K=setTimeout((()=>{this.timer_K()}),l.TIMER_K)}}},InviteClientTransaction:class extends s{constructor(e,t,n,s){super(),this.type=_.INVITE_CLIENT,this.id=`z9hG4bK${Math.floor(1e7*Math.random())}`,this.ua=e,this.transport=t,this.request=n,this.eventHandlers=s,n.transaction=this;let r=`SIP/2.0/${t.via_transport}`;r+=` ${e.configuration.via_host};branch=${this.id}`,this.request.setHeader("via",r),this.ua.newTransaction(this)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}send(){this.stateChanged(_.STATUS_CALLING),this.B=setTimeout((()=>{this.timer_B()}),l.TIMER_B),this.transport.send(this.request)||this.onTransportError()}onTransportError(){clearTimeout(this.B),clearTimeout(this.D),clearTimeout(this.M),this.state!==_.STATUS_ACCEPTED&&(u.debug(`transport error occurred, deleting transaction ${this.id}`),this.eventHandlers.onTransportError()),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}timer_M(){u.debug(`Timer M expired for transaction ${this.id}`),this.state===_.STATUS_ACCEPTED&&(clearTimeout(this.B),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}timer_B(){u.debug(`Timer B expired for transaction ${this.id}`),this.state===_.STATUS_CALLING&&(this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout())}timer_D(){u.debug(`Timer D expired for transaction ${this.id}`),clearTimeout(this.B),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}sendACK(e){const t=new o.OutgoingRequest(i.ACK,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",e.getHeader("to")),this.D=setTimeout((()=>{this.timer_D()}),l.TIMER_D),this.transport.send(t)}cancel(e){if(this.state!==_.STATUS_PROCEEDING)return;const t=new o.OutgoingRequest(i.CANCEL,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",this.request.getHeader("to")),e&&t.setHeader("reason",e),this.transport.send(t)}receiveResponse(e){const t=e.status_code;if(t>=100&&t<=199)switch(this.state){case _.STATUS_CALLING:this.stateChanged(_.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e);break;case _.STATUS_PROCEEDING:this.eventHandlers.onReceiveResponse(e)}else if(t>=200&&t<=299)switch(this.state){case _.STATUS_CALLING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_ACCEPTED),this.M=setTimeout((()=>{this.timer_M()}),l.TIMER_M),this.eventHandlers.onReceiveResponse(e);break;case _.STATUS_ACCEPTED:this.eventHandlers.onReceiveResponse(e)}else if(t>=300&&t<=699)switch(this.state){case _.STATUS_CALLING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_COMPLETED),this.sendACK(e),this.eventHandlers.onReceiveResponse(e);break;case _.STATUS_COMPLETED:this.sendACK(e)}}},AckClientTransaction:class extends s{constructor(e,t,n,s){super(),this.id=`z9hG4bK${Math.floor(1e7*Math.random())}`,this.transport=t,this.request=n,this.eventHandlers=s;let r=`SIP/2.0/${t.via_transport}`;r+=` ${e.configuration.via_host};branch=${this.id}`,this.request.setHeader("via",r)}get C(){return _}send(){this.transport.send(this.request)||this.onTransportError()}onTransportError(){c.debug(`transport error occurred for transaction ${this.id}`),this.eventHandlers.onTransportError()}},NonInviteServerTransaction:class extends s{constructor(e,t,n){super(),this.type=_.NON_INVITE_SERVER,this.id=n.via_branch,this.ua=e,this.transport=t,this.request=n,this.last_response="",n.server_transaction=this,this.state=_.STATUS_TRYING,e.newTransaction(this)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}timer_J(){h.debug(`Timer J expired for transaction ${this.id}`),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}onTransportError(){this.transportError||(this.transportError=!0,h.debug(`transport error occurred, deleting transaction ${this.id}`),clearTimeout(this.J),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}receiveResponse(e,t,n,s){if(100===e)switch(this.state){case _.STATUS_TRYING:this.stateChanged(_.STATUS_PROCEEDING),this.transport.send(t)||this.onTransportError();break;case _.STATUS_PROCEEDING:this.last_response=t,this.transport.send(t)?n&&n():(this.onTransportError(),s&&s())}else if(e>=200&&e<=699)switch(this.state){case _.STATUS_TRYING:case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_COMPLETED),this.last_response=t,this.J=setTimeout((()=>{this.timer_J()}),l.TIMER_J),this.transport.send(t)?n&&n():(this.onTransportError(),s&&s())}}},InviteServerTransaction:class extends s{constructor(e,t,n){super(),this.type=_.INVITE_SERVER,this.id=n.via_branch,this.ua=e,this.transport=t,this.request=n,this.last_response="",n.server_transaction=this,this.state=_.STATUS_PROCEEDING,e.newTransaction(this),this.resendProvisionalTimer=null,n.reply(100)}get C(){return _}stateChanged(e){this.state=e,this.emit("stateChanged")}timer_H(){d.debug(`Timer H expired for transaction ${this.id}`),this.state===_.STATUS_COMPLETED&&d.debug("ACK not received, dialog will be terminated"),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}timer_I(){this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this)}timer_L(){d.debug(`Timer L expired for transaction ${this.id}`),this.state===_.STATUS_ACCEPTED&&(this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}onTransportError(){this.transportError||(this.transportError=!0,d.debug(`transport error occurred, deleting transaction ${this.id}`),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),clearTimeout(this.L),clearTimeout(this.H),clearTimeout(this.I),this.stateChanged(_.STATUS_TERMINATED),this.ua.destroyTransaction(this))}resend_provisional(){this.transport.send(this.last_response)||this.onTransportError()}receiveResponse(e,t,n,s){if(e>=100&&e<=199&&this.state===_.STATUS_PROCEEDING&&(this.transport.send(t)||this.onTransportError(),this.last_response=t),e>100&&e<=199&&this.state===_.STATUS_PROCEEDING)null===this.resendProvisionalTimer&&(this.resendProvisionalTimer=setInterval((()=>{this.resend_provisional()}),l.PROVISIONAL_RESPONSE_INTERVAL));else if(e>=200&&e<=299)switch(this.state){case _.STATUS_PROCEEDING:this.stateChanged(_.STATUS_ACCEPTED),this.last_response=t,this.L=setTimeout((()=>{this.timer_L()}),l.TIMER_L),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null);case _.STATUS_ACCEPTED:this.transport.send(t)?n&&n():(this.onTransportError(),s&&s())}else e>=300&&e<=699&&this.state===_.STATUS_PROCEEDING&&(null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),this.transport.send(t)?(this.stateChanged(_.STATUS_COMPLETED),this.H=setTimeout((()=>{this.timer_H()}),l.TIMER_H),n&&n()):(this.onTransportError(),s&&s()))}},checkTransaction:function({_transactions:e},t){let n;switch(t.method){case i.INVITE:if(n=e.ist[t.via_branch],n)return n.state===_.STATUS_PROCEEDING&&n.transport.send(n.last_response),!0;break;case i.ACK:if(n=e.ist[t.via_branch],!n)return!1;if(n.state===_.STATUS_ACCEPTED)return!1;if(n.state===_.STATUS_COMPLETED)return n.state=_.STATUS_CONFIRMED,n.I=setTimeout((()=>{n.timer_I()}),l.TIMER_I),!0;break;case i.CANCEL:return n=e.ist[t.via_branch],n?(t.reply_sl(200),n.state!==_.STATUS_PROCEEDING):(t.reply_sl(481),!0);default:if(n=e.nist[t.via_branch],n){switch(n.state){case _.STATUS_TRYING:break;case _.STATUS_PROCEEDING:case _.STATUS_COMPLETED:n.transport.send(n.last_response)}return!0}}}}},557:(e,t,n)=>{const s=n(835),r=n(497),i=n(937),o=new s("Transport"),l={min_interval:i.CONNECTION_RECOVERY_MIN_INTERVAL,max_interval:i.CONNECTION_RECOVERY_MAX_INTERVAL};e.exports=class{constructor(e,t=l){o.debug("new()"),this.status=2,this.socket=null,this.sockets=[],this.recovery_options=t,this.recover_attempts=0,this.recovery_timer=null,this.close_requested=!1;try{this.textDecoder=new TextDecoder("utf8")}catch(e){o.warn(`cannot use TextDecoder: ${e}`)}if(void 0===e)throw new TypeError("Invalid argument. undefined 'sockets' argument");e instanceof Array||(e=[e]),e.forEach((function(e){if(!r.isSocket(e.socket))throw new TypeError("Invalid argument. invalid 'JsSIP.Socket' instance");if(e.weight&&!Number(e.weight))throw new TypeError("Invalid argument. 'weight' attribute is not a number");this.sockets.push({socket:e.socket,weight:e.weight||0,status:0})}),this),this._getSocket()}get via_transport(){return this.socket.via_transport}get url(){return this.socket.url}get sip_uri(){return this.socket.sip_uri}connect(){o.debug("connect()"),this.isConnected()?o.debug("Transport is already connected"):this.isConnecting()?o.debug("Transport is connecting"):(this.close_requested=!1,this.status=1,this.onconnecting({socket:this.socket,attempts:this.recover_attempts}),this.close_requested||(this.socket.onconnect=this._onConnect.bind(this),this.socket.ondisconnect=this._onDisconnect.bind(this),this.socket.ondata=this._onData.bind(this),this.socket.connect()))}disconnect(){o.debug("close()"),this.close_requested=!0,this.recover_attempts=0,this.status=2,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.socket.onconnect=()=>{},this.socket.ondisconnect=()=>{},this.socket.ondata=()=>{},this.socket.disconnect(),this.ondisconnect({socket:this.socket,error:!1})}send(e){if(o.debug("send()"),!this.isConnected())return o.warn("unable to send message, transport is not connected"),!1;const t=e.toString();return o.debug(`sending message:\n\n${t}\n`),this.socket.send(t)}isConnected(){return 0===this.status}isConnecting(){return 1===this.status}_reconnect(){this.recover_attempts+=1;let e=Math.floor(Math.random()*Math.pow(2,this.recover_attempts)+1);e<this.recovery_options.min_interval?e=this.recovery_options.min_interval:e>this.recovery_options.max_interval&&(e=this.recovery_options.max_interval),o.debug(`reconnection attempt: ${this.recover_attempts}. next connection attempt in ${e} seconds`),this.recovery_timer=setTimeout((()=>{this.close_requested||this.isConnected()||this.isConnecting()||(this._getSocket(),this.connect())}),1e3*e)}_getSocket(){let e=[];if(this.sockets.forEach((t=>{1!==t.status&&(0===e.length?e.push(t):t.weight>e[0].weight?e=[t]:t.weight===e[0].weight&&e.push(t))})),0===e.length)return this.sockets.forEach((e=>{e.status=0})),void this._getSocket();const t=Math.floor(Math.random()*e.length);this.socket=e[t].socket}_onConnect(){this.recover_attempts=0,this.status=0,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.onconnect({socket:this})}_onDisconnect(e,t,n){this.status=2,this.ondisconnect({socket:this.socket,error:e,code:t,reason:n}),this.close_requested||(this.sockets.forEach((function(e){this.socket===e.socket&&(e.status=1)}),this),this._reconnect(e))}_onData(e){if("\r\n"!==e){if("string"!=typeof e){try{e=this.textDecoder?this.textDecoder.decode(e):String.fromCharCode.apply(null,new Uint8Array(e))}catch(e){return void o.debug("received binary message failed to be converted into string, message discarded")}o.debug(`received binary message:\n\n${e}\n`)}else o.debug(`received text message:\n\n${e}\n`);this.ondata({transport:this,message:e})}else o.debug("received message with CRLF Keep Alive response")}}},43:(e,t,n)=>{const s=n(99).EventEmitter,r=n(835),i=n(937),o=n(349),l=n(178),a=n(531),u=n(173),c=n(478),h=n(557),d=n(911),_=n(247),p=n(258),f=n(5),m=n(490),g=n(7),v=n(561),T=new r("UA"),b={STATUS_INIT:0,STATUS_READY:1,STATUS_USER_CLOSED:2,STATUS_NOT_READY:3,CONFIGURATION_ERROR:1,NETWORK_ERROR:2};function C(e){this.emit("connecting",e)}function S(e){this._status!==b.STATUS_USER_CLOSED&&(this._status=b.STATUS_READY,this._error=null,this.emit("connected",e),this._dynConfiguration.register&&this._registrator.register())}function A(e){const t=["nict","ict","nist","ist"];for(const e of t)for(const t in this._transactions[e])Object.prototype.hasOwnProperty.call(this._transactions[e],t)&&this._transactions[e][t].onTransportError();this.emit("disconnected",e),this._registrator.onTransportClosed(),this._status!==b.STATUS_USER_CLOSED&&(this._status=b.STATUS_NOT_READY,this._error=b.NETWORK_ERROR)}function E(e){const t=e.transport;let n=e.message;if(n=f.parseMessage(n,this),n&&!(this._status===b.STATUS_USER_CLOSED&&n instanceof m.IncomingRequest)&&g(n,this,t))if(n instanceof m.IncomingRequest)n.transport=t,this.receiveRequest(n);else if(n instanceof m.IncomingResponse){let e;switch(n.method){case i.INVITE:e=this._transactions.ict[n.via_branch],e&&e.receiveResponse(n);break;case i.ACK:break;default:e=this._transactions.nict[n.via_branch],e&&e.receiveResponse(n)}}}e.exports=class extends s{static get C(){return b}constructor(e){if(T.debug("new() [configuration:%o]",e),super(),this._cache={credentials:{}},this._configuration=Object.assign({},v.settings),this._dynConfiguration={},this._dialogs={},this._applicants={},this._sessions={},this._transport=null,this._contact=null,this._status=b.STATUS_INIT,this._error=null,this._transactions={nist:{},nict:{},ist:{},ict:{}},this._data={},this._closeTimer=null,void 0===e)throw new TypeError("Not enough arguments");try{this._loadConfig(e)}catch(e){throw this._status=b.STATUS_NOT_READY,this._error=b.CONFIGURATION_ERROR,e}this._registrator=new o(this)}get C(){return b}get status(){return this._status}get contact(){return this._contact}get configuration(){return this._configuration}get transport(){return this._transport}start(){T.debug("start()"),this._status===b.STATUS_INIT?this._transport.connect():this._status===b.STATUS_USER_CLOSED?(T.debug("restarting UA"),null!==this._closeTimer&&(clearTimeout(this._closeTimer),this._closeTimer=null,this._transport.disconnect()),this._status=b.STATUS_INIT,this._transport.connect()):this._status===b.STATUS_READY?T.debug("UA is in READY status, not restarted"):T.debug("ERROR: connection is down, Auto-Recovery system is trying to reconnect"),this._dynConfiguration.register=this._configuration.register}register(){T.debug("register()"),this._dynConfiguration.register=!0,this._registrator.register()}unregister(e){T.debug("unregister()"),this._dynConfiguration.register=!1,this._registrator.unregister(e)}registrator(){return this._registrator}isRegistered(){return this._registrator.registered}isConnected(){return this._transport.isConnected()}call(e,t){T.debug("call()");const n=new l(this);return n.connect(e,t),n}sendMessage(e,t,n){T.debug("sendMessage()");const s=new a(this);return s.send(e,t,n),s}sendOptions(e,t,n){T.debug("sendOptions()");const s=new u(this);return s.send(e,t,n),s}terminateSessions(e){T.debug("terminateSessions()");for(const t in this._sessions)this._sessions[t].isEnded()||this._sessions[t].terminate(e)}stop(){if(T.debug("stop()"),this._dynConfiguration={},this._status===b.STATUS_USER_CLOSED)return void T.debug("UA already closed");this._registrator.close();const e=Object.keys(this._sessions).length;for(const e in this._sessions)if(Object.prototype.hasOwnProperty.call(this._sessions,e)){T.debug(`closing session ${e}`);try{this._sessions[e].terminate()}catch(e){}}for(const e in this._applicants)if(Object.prototype.hasOwnProperty.call(this._applicants,e))try{this._applicants[e].close()}catch(e){}this._status=b.STATUS_USER_CLOSED,0===Object.keys(this._transactions.nict).length+Object.keys(this._transactions.nist).length+Object.keys(this._transactions.ict).length+Object.keys(this._transactions.ist).length&&0===e?this._transport.disconnect():this._closeTimer=setTimeout((()=>{this._closeTimer=null,this._transport.disconnect()}),2e3)}normalizeTarget(e){return d.normalizeTarget(e,this._configuration.hostport_params)}get(e){switch(e){case"authorization_user":return this._configuration.authorization_user;case"realm":return this._configuration.realm;case"ha1":return this._configuration.ha1;case"authorization_jwt":return this._configuration.authorization_jwt;default:return void T.warn('get() | cannot get "%s" parameter in runtime',e)}}set(e,t){switch(e){case"authorization_user":this._configuration.authorization_user=String(t);break;case"password":this._configuration.password=String(t);break;case"realm":this._configuration.realm=String(t);break;case"ha1":this._configuration.ha1=String(t),this._configuration.password=null;break;case"authorization_jwt":this._configuration.authorization_jwt=String(t);break;case"display_name":this._configuration.display_name=t;break;default:return T.warn('set() | cannot set "%s" parameter in runtime',e),!1}return!0}newTransaction(e){this._transactions[e.type][e.id]=e,this.emit("newTransaction",{transaction:e})}destroyTransaction(e){delete this._transactions[e.type][e.id],this.emit("transactionDestroyed",{transaction:e})}newDialog(e){this._dialogs[e.id]=e}destroyDialog(e){delete this._dialogs[e.id]}newMessage(e,t){this._applicants[e]=e,this.emit("newMessage",t)}newOptions(e,t){this._applicants[e]=e,this.emit("newOptions",t)}destroyMessage(e){delete this._applicants[e]}newRTCSession(e,t){this._sessions[e.id]=e,this.emit("newRTCSession",t)}destroyRTCSession(e){delete this._sessions[e.id]}registered(e){this.emit("registered",e)}unregistered(e){this.emit("unregistered",e)}registrationFailed(e){this.emit("registrationFailed",e)}receiveRequest(e){const t=e.method;if(e.ruri.user!==this._configuration.uri.user&&e.ruri.user!==this._contact.uri.user)return T.debug("Request-URI does not point to us"),void(e.method!==i.ACK&&e.reply_sl(404));if(e.ruri.scheme===i.SIPS)return void e.reply_sl(416);if(c.checkTransaction(this,e))return;if(t===i.INVITE?new c.InviteServerTransaction(this,this._transport,e):t!==i.ACK&&t!==i.CANCEL&&new c.NonInviteServerTransaction(this,this._transport,e),t===i.OPTIONS){if(0===this.listeners("newOptions").length)return void e.reply(200);new u(this).init_incoming(e)}else if(t===i.MESSAGE){if(0===this.listeners("newMessage").length)return void e.reply(405);new a(this).init_incoming(e)}else if(t===i.INVITE&&!e.to_tag&&0===this.listeners("newRTCSession").length)return void e.reply(405);let n,s;if(e.to_tag)n=this._findDialog(e.call_id,e.from_tag,e.to_tag),n?n.receiveRequest(e):t===i.NOTIFY?(s=this._findSession(e),s?s.receiveRequest(e):(T.debug("received NOTIFY request for a non existent subscription"),e.reply(481,"Subscription does not exist"))):t!==i.ACK&&e.reply(481);else switch(t){case i.INVITE:if(window.RTCPeerConnection)if(e.hasHeader("replaces")){const t=e.replaces;n=this._findDialog(t.call_id,t.from_tag,t.to_tag),n?(s=n.owner,s.isEnded()?e.reply(603):s.receiveRequest(e)):e.reply(481)}else s=new l(this),s.init_incoming(e);else T.warn("INVITE received but WebRTC is not supported"),e.reply(488);break;case i.BYE:e.reply(481);break;case i.CANCEL:s=this._findSession(e),s?s.receiveRequest(e):T.debug("received CANCEL request for a non existent session");break;case i.ACK:break;case i.NOTIFY:this.emit("sipEvent",{event:e.event,request:e}),e.reply(200);break;default:e.reply(405)}}_findSession({call_id:e,from_tag:t,to_tag:n}){const s=e+t,r=this._sessions[s],i=e+n,o=this._sessions[i];return r||o||null}_findDialog(e,t,n){let s=e+t+n,r=this._dialogs[s];return r||(s=e+n+t,r=this._dialogs[s],r||null)}_loadConfig(e){try{v.load(this._configuration,e)}catch(e){throw e}0===this._configuration.display_name&&(this._configuration.display_name="0"),this._configuration.instance_id||(this._configuration.instance_id=d.newUUID()),this._configuration.jssip_id=d.createRandomToken(5);const t=this._configuration.uri.clone();t.user=null,this._configuration.hostport_params=t.toString().replace(/^sip:/i,"");try{this._transport=new h(this._configuration.sockets,{max_interval:this._configuration.connection_recovery_max_interval,min_interval:this._configuration.connection_recovery_min_interval}),this._transport.onconnecting=C.bind(this),this._transport.onconnect=S.bind(this),this._transport.ondisconnect=A.bind(this),this._transport.ondata=E.bind(this)}catch(e){throw T.warn(e),new _.ConfigurationError("sockets",this._configuration.sockets)}if(delete this._configuration.sockets,this._configuration.authorization_user||(this._configuration.authorization_user=this._configuration.uri.user),!this._configuration.registrar_server){const e=this._configuration.uri.clone();e.user=null,e.clearParams(),e.clearHeaders(),this._configuration.registrar_server=e}this._configuration.no_answer_timeout*=1e3,this._configuration.contact_uri?this._configuration.via_host=this._configuration.contact_uri.host:this._configuration.contact_uri=new p("sip",d.createRandomToken(8),this._configuration.via_host,null,{transport:"ws"}),this._contact={pub_gruu:null,temp_gruu:null,uri:this._configuration.contact_uri,toString(e={}){const t=e.anonymous||null,n=e.outbound||null;let s="<";return s+=t?this.temp_gruu||"sip:anonymous@anonymous.invalid;transport=ws":this.pub_gruu||this.uri.toString(),!n||(t?this.temp_gruu:this.pub_gruu)||(s+=";ob"),s+=">",s}};const n=["authorization_user","password","realm","ha1","authorization_jwt","display_name","register"];for(const e in this._configuration)Object.prototype.hasOwnProperty.call(this._configuration,e)&&(-1!==n.indexOf(e)?Object.defineProperty(this._configuration,e,{writable:!0,configurable:!1}):Object.defineProperty(this._configuration,e,{writable:!1,configurable:!1}));T.debug("configuration parameters after validation:");for(const e in this._configuration)if(Object.prototype.hasOwnProperty.call(v.settings,e))switch(e){case"uri":case"registrar_server":T.debug(`- ${e}: ${this._configuration[e]}`);break;case"password":case"ha1":case"authorization_jwt":T.debug(`- ${e}: NOT SHOWN`);break;default:T.debug(`- ${e}: ${JSON.stringify(this._configuration[e])}`)}}}},258:(e,t,n)=>{const s=n(937),r=n(911),i=n(845);e.exports=class e{static parse(e){return-1!==(e=i.parse(e,"SIP_URI"))?e:void 0}constructor(e,t,n,r,i={},o={}){if(!n)throw new TypeError('missing or invalid "host" parameter');this._parameters={},this._headers={},this._scheme=e||s.SIP,this._user=t,this._host=n,this._port=r;for(const e in i)Object.prototype.hasOwnProperty.call(i,e)&&this.setParam(e,i[e]);for(const e in o)Object.prototype.hasOwnProperty.call(o,e)&&this.setHeader(e,o[e])}get scheme(){return this._scheme}set scheme(e){this._scheme=e.toLowerCase()}get user(){return this._user}set user(e){this._user=e}get host(){return this._host}set host(e){this._host=e.toLowerCase()}get port(){return this._port}set port(e){this._port=0===e?e:parseInt(e,10)||null}setParam(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}getParam(e){if(e)return this._parameters[e.toLowerCase()]}hasParam(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}deleteParam(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){const t=this._parameters[e];return delete this._parameters[e],t}}clearParams(){this._parameters={}}setHeader(e,t){this._headers[r.headerize(e)]=Array.isArray(t)?t:[t]}getHeader(e){if(e)return this._headers[r.headerize(e)]}hasHeader(e){if(e)return!!this._headers.hasOwnProperty(r.headerize(e))}deleteHeader(e){if(e=r.headerize(e),this._headers.hasOwnProperty(e)){const t=this._headers[e];return delete this._headers[e],t}}clearHeaders(){this._headers={}}clone(){return new e(this._scheme,this._user,this._host,this._port,JSON.parse(JSON.stringify(this._parameters)),JSON.parse(JSON.stringify(this._headers)))}toString(){const e=[];let t=`${this._scheme}:`;this._user&&(t+=`${r.escapeUser(this._user)}@`),t+=this._host,(this._port||0===this._port)&&(t+=`:${this._port}`);for(const e in this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,e)&&(t+=`;${e}`,null!==this._parameters[e]&&(t+=`=${this._parameters[e]}`));for(const t in this._headers)if(Object.prototype.hasOwnProperty.call(this._headers,t))for(const n of this._headers[t])e.push(`${t}=${n}`);return e.length>0&&(t+=`?${e.join("&")}`),t}toAor(e){let t=`${this._scheme}:`;return this._user&&(t+=`${r.escapeUser(this._user)}@`),t+=this._host,e&&(this._port||0===this._port)&&(t+=`:${this._port}`),t}}},911:(e,t,n)=>{const s=n(937),r=n(258),i=n(845);t.str_utf8_length=e=>unescape(encodeURIComponent(e)).length;const o=t.isFunction=e=>void 0!==e&&"[object Function]"===Object.prototype.toString.call(e);t.isString=e=>void 0!==e&&"[object String]"===Object.prototype.toString.call(e),t.isDecimal=e=>!isNaN(e)&&parseFloat(e)===parseInt(e,10),t.isEmpty=e=>null===e||""===e||void 0===e||Array.isArray(e)&&0===e.length||"number"==typeof e&&isNaN(e),t.hasMethods=function(e,...t){for(const n of t)if(o(e[n]))return!1;return!0};const l=t.createRandomToken=(e,t=32)=>{let n,s,r="";for(n=0;n<e;n++)s=Math.random()*t|0,r+=s.toString(t);return r};t.newTag=()=>l(10),t.newUUID=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})),t.hostType=e=>{if(e)return-1!==(e=i.parse(e,"host"))?e.host_type:void 0};const a=t.escapeUser=e=>encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/");t.normalizeTarget=(e,t)=>{if(e){if(e instanceof r)return e;if("string"==typeof e){const n=e.split("@");let i,o,l;switch(n.length){case 1:if(!t)return;i=e,o=t;break;case 2:i=n[0],o=n[1];break;default:i=n.slice(0,n.length-1).join("@"),o=n[n.length-1]}return i=i.replace(/^(sips?|tel):/i,""),/^[-.()]*\+?[0-9\-.()]+$/.test(i)&&(i=i.replace(/[-.()]/g,"")),e=`${s.SIP}:${a(i)}@${o}`,(l=r.parse(e))?l:void 0}}},t.headerize=e=>{const t={"Call-Id":"Call-ID",Cseq:"CSeq","Www-Authenticate":"WWW-Authenticate"},n=e.toLowerCase().replace(/_/g,"-").split("-");let s="";const r=n.length;let i;for(i=0;i<r;i++)0!==i&&(s+="-"),s+=n[i].charAt(0).toUpperCase()+n[i].substring(1);return t[s]&&(s=t[s]),s},t.sipErrorCause=e=>{for(const t in s.SIP_ERROR_CAUSES)if(-1!==s.SIP_ERROR_CAUSES[t].indexOf(e))return s.causes[t];return s.causes.SIP_FAILURE_CODE},t.getRandomTestNetIP=()=>`192.0.2.${1,254,Math.floor(254*Math.random()+1)}`,t.calculateMD5=e=>{function t(e,t){return e<<t|e>>>32-t}function n(e,t){const n=2147483648&e,s=2147483648&t,r=1073741824&e,i=1073741824&t,o=(1073741823&e)+(1073741823&t);return r&i?2147483648^o^n^s:r|i?1073741824&o?3221225472^o^n^s:1073741824^o^n^s:o^n^s}function s(e,s,r,i,o,l,a){return e=n(e,n(n(function(e,t,n){return e&t|~e&n}(s,r,i),o),a)),n(t(e,l),s)}function r(e,s,r,i,o,l,a){return e=n(e,n(n(function(e,t,n){return e&n|t&~n}(s,r,i),o),a)),n(t(e,l),s)}function i(e,s,r,i,o,l,a){return e=n(e,n(n(function(e,t,n){return e^t^n}(s,r,i),o),a)),n(t(e,l),s)}function o(e,s,r,i,o,l,a){return e=n(e,n(n(function(e,t,n){return t^(e|~n)}(s,r,i),o),a)),n(t(e,l),s)}function l(e){let t,n,s="",r="";for(n=0;n<=3;n++)t=e>>>8*n&255,r=`0${t.toString(16)}`,s+=r.substr(r.length-2,2);return s}let a,u,c,h,d,_,p,f,m,g=[];for(e=function(e){e=e.replace(/\r\n/g,"\n");let t="";for(let n=0;n<e.length;n++){const s=e.charCodeAt(n);s<128?t+=String.fromCharCode(s):s>127&&s<2048?(t+=String.fromCharCode(s>>6|192),t+=String.fromCharCode(63&s|128)):(t+=String.fromCharCode(s>>12|224),t+=String.fromCharCode(s>>6&63|128),t+=String.fromCharCode(63&s|128))}return t}(e),g=function(e){let t;const n=e.length,s=n+8,r=16*((s-s%64)/64+1),i=new Array(r-1);let o=0,l=0;for(;l<n;)t=(l-l%4)/4,o=l%4*8,i[t]=i[t]|e.charCodeAt(l)<<o,l++;return t=(l-l%4)/4,o=l%4*8,i[t]=i[t]|128<<o,i[r-2]=n<<3,i[r-1]=n>>>29,i}(e),_=1732584193,p=4023233417,f=2562383102,m=271733878,a=0;a<g.length;a+=16)u=_,c=p,h=f,d=m,_=s(_,p,f,m,g[a+0],7,3614090360),m=s(m,_,p,f,g[a+1],12,3905402710),f=s(f,m,_,p,g[a+2],17,606105819),p=s(p,f,m,_,g[a+3],22,3250441966),_=s(_,p,f,m,g[a+4],7,4118548399),m=s(m,_,p,f,g[a+5],12,1200080426),f=s(f,m,_,p,g[a+6],17,2821735955),p=s(p,f,m,_,g[a+7],22,4249261313),_=s(_,p,f,m,g[a+8],7,1770035416),m=s(m,_,p,f,g[a+9],12,2336552879),f=s(f,m,_,p,g[a+10],17,4294925233),p=s(p,f,m,_,g[a+11],22,2304563134),_=s(_,p,f,m,g[a+12],7,1804603682),m=s(m,_,p,f,g[a+13],12,4254626195),f=s(f,m,_,p,g[a+14],17,2792965006),p=s(p,f,m,_,g[a+15],22,1236535329),_=r(_,p,f,m,g[a+1],5,4129170786),m=r(m,_,p,f,g[a+6],9,3225465664),f=r(f,m,_,p,g[a+11],14,643717713),p=r(p,f,m,_,g[a+0],20,3921069994),_=r(_,p,f,m,g[a+5],5,3593408605),m=r(m,_,p,f,g[a+10],9,38016083),f=r(f,m,_,p,g[a+15],14,3634488961),p=r(p,f,m,_,g[a+4],20,3889429448),_=r(_,p,f,m,g[a+9],5,568446438),m=r(m,_,p,f,g[a+14],9,3275163606),f=r(f,m,_,p,g[a+3],14,4107603335),p=r(p,f,m,_,g[a+8],20,1163531501),_=r(_,p,f,m,g[a+13],5,2850285829),m=r(m,_,p,f,g[a+2],9,4243563512),f=r(f,m,_,p,g[a+7],14,1735328473),p=r(p,f,m,_,g[a+12],20,2368359562),_=i(_,p,f,m,g[a+5],4,4294588738),m=i(m,_,p,f,g[a+8],11,2272392833),f=i(f,m,_,p,g[a+11],16,1839030562),p=i(p,f,m,_,g[a+14],23,4259657740),_=i(_,p,f,m,g[a+1],4,2763975236),m=i(m,_,p,f,g[a+4],11,1272893353),f=i(f,m,_,p,g[a+7],16,4139469664),p=i(p,f,m,_,g[a+10],23,3200236656),_=i(_,p,f,m,g[a+13],4,681279174),m=i(m,_,p,f,g[a+0],11,3936430074),f=i(f,m,_,p,g[a+3],16,3572445317),p=i(p,f,m,_,g[a+6],23,76029189),_=i(_,p,f,m,g[a+9],4,3654602809),m=i(m,_,p,f,g[a+12],11,3873151461),f=i(f,m,_,p,g[a+15],16,530742520),p=i(p,f,m,_,g[a+2],23,3299628645),_=o(_,p,f,m,g[a+0],6,4096336452),m=o(m,_,p,f,g[a+7],10,1126891415),f=o(f,m,_,p,g[a+14],15,2878612391),p=o(p,f,m,_,g[a+5],21,4237533241),_=o(_,p,f,m,g[a+12],6,1700485571),m=o(m,_,p,f,g[a+3],10,2399980690),f=o(f,m,_,p,g[a+10],15,4293915773),p=o(p,f,m,_,g[a+1],21,2240044497),_=o(_,p,f,m,g[a+8],6,1873313359),m=o(m,_,p,f,g[a+15],10,4264355552),f=o(f,m,_,p,g[a+6],15,2734768916),p=o(p,f,m,_,g[a+13],21,1309151649),_=o(_,p,f,m,g[a+4],6,4149444226),m=o(m,_,p,f,g[a+11],10,3174756917),f=o(f,m,_,p,g[a+2],15,718787259),p=o(p,f,m,_,g[a+9],21,3951481745),_=n(_,u),p=n(p,c),f=n(f,h),m=n(m,d);return(l(_)+l(p)+l(f)+l(m)).toLowerCase()},t.closeMediaStream=e=>{if(e)try{let t;if(e.getTracks){t=e.getTracks();for(const e of t)e.stop()}else{t=e.getAudioTracks();for(const e of t)e.stop();t=e.getVideoTracks();for(const e of t)e.stop()}}catch(t){"function"!=typeof e.stop&&"object"!=typeof e.stop||e.stop()}},t.cloneArray=e=>e&&e.slice()||[],t.cloneObject=(e,t={})=>e&&Object.assign({},e)||t},622:(e,t,n)=>{const s=n(835),r=n(845),i=new s("WebSocketInterface");e.exports=class{constructor(e){i.debug('new() [url:"%s"]',e),this._url=e,this._sip_uri=null,this._via_transport=null,this._ws=null;const t=r.parse(e,"absoluteURI");if(-1===t)throw i.warn(`invalid WebSocket URI: ${e}`),new TypeError(`Invalid argument: ${e}`);if("wss"!==t.scheme&&"ws"!==t.scheme)throw i.warn(`invalid WebSocket URI scheme: ${t.scheme}`),new TypeError(`Invalid argument: ${e}`);this._sip_uri=`sip:${t.host}${t.port?`:${t.port}`:""};transport=ws`,this._via_transport=t.scheme.toUpperCase()}get via_transport(){return this._via_transport}set via_transport(e){this._via_transport=e.toUpperCase()}get sip_uri(){return this._sip_uri}get url(){return this._url}connect(){if(i.debug("connect()"),this.isConnected())i.debug(`WebSocket ${this._url} is already connected`);else if(this.isConnecting())i.debug(`WebSocket ${this._url} is connecting`);else{this._ws&&this.disconnect(),i.debug(`connecting to WebSocket ${this._url}`);try{this._ws=new WebSocket(this._url,"sip"),this._ws.binaryType="arraybuffer",this._ws.onopen=this._onOpen.bind(this),this._ws.onclose=this._onClose.bind(this),this._ws.onmessage=this._onMessage.bind(this),this._ws.onerror=this._onError.bind(this)}catch(e){this._onError(e)}}}disconnect(){i.debug("disconnect()"),this._ws&&(this._ws.onopen=()=>{},this._ws.onclose=()=>{},this._ws.onmessage=()=>{},this._ws.onerror=()=>{},this._ws.close(),this._ws=null)}send(e){return i.debug("send()"),this.isConnected()?(this._ws.send(e),!0):(i.warn("unable to send message, WebSocket is not open"),!1)}isConnected(){return this._ws&&this._ws.readyState===this._ws.OPEN}isConnecting(){return this._ws&&this._ws.readyState===this._ws.CONNECTING}_onOpen(){i.debug(`WebSocket ${this._url} connected`),this.onconnect()}_onClose({wasClean:e,code:t,reason:n}){i.debug(`WebSocket ${this._url} closed`),!1===e&&i.debug("WebSocket abrupt disconnection"),this.ondisconnect(!e,t,n)}_onMessage({data:e}){i.debug("received WebSocket message"),this.ondata(e)}_onError(e){i.warn(`WebSocket ${this._url} error: `,e)}}},7:(e,t,n)=>{const s=n(835),r=n(937),i=n(490),o=n(911),l=new s("sanityCheck"),a=[function(){const e=["from","to","call_id","cseq","via"];for(const t of e)if(!h.hasHeader(t))return l.debug(`missing mandatory header field : ${t}, dropping the response`),!1}],u=[function(){if("sip"!==h.s("to").uri.scheme)return p(416),!1},function(){if(!h.to_tag&&h.call_id.substr(0,5)===d.configuration.jssip_id)return p(482),!1},function(){if(o.str_utf8_length(h.body)<h.getHeader("content-length"))return p(400),!1},function(){const e=h.from_tag,t=h.call_id,n=h.cseq;let s;if(!h.to_tag)if(h.method===r.INVITE){if(d._transactions.ist[h.via_branch])return!1;for(const r in d._transactions.ist)if(Object.prototype.hasOwnProperty.call(d._transactions.ist,r)&&(s=d._transactions.ist[r],s.request.from_tag===e&&s.request.call_id===t&&s.request.cseq===n))return p(482),!1}else{if(d._transactions.nist[h.via_branch])return!1;for(const r in d._transactions.nist)if(Object.prototype.hasOwnProperty.call(d._transactions.nist,r)&&(s=d._transactions.nist[r],s.request.from_tag===e&&s.request.call_id===t&&s.request.cseq===n))return p(482),!1}}],c=[function(){if(h.getHeaders("via").length>1)return l.debug("more than one Via header field present in the response, dropping the response"),!1},function(){if(o.str_utf8_length(h.body)<h.getHeader("content-length"))return l.debug("message body length is lower than the value in Content-Length header field, dropping the response"),!1}];let h,d,_;function p(e){const t=h.getHeaders("via");let n,s=`SIP/2.0 ${e} ${r.REASON_PHRASE[e]}\r\n`;for(const e of t)s+=`Via: ${e}\r\n`;n=h.getHeader("To"),h.to_tag||(n+=`;tag=${o.newTag()}`),s+=`To: ${n}\r\n`,s+=`From: ${h.getHeader("From")}\r\n`,s+=`Call-ID: ${h.call_id}\r\n`,s+=`CSeq: ${h.cseq} ${h.method}\r\n`,s+="\r\n",_.send(s)}e.exports=(e,t,n)=>{h=e,d=t,_=n;for(const e of a)if(!1===e())return!1;if(h instanceof i.IncomingRequest){for(const e of u)if(!1===e())return!1}else if(h instanceof i.IncomingResponse)for(const e of c)if(!1===e())return!1;return!0}},965:e=>{var t=1e3,n=60*t,s=60*n,r=24*s;function i(e,t,n,s){var r=t>=1.5*n;return Math.round(e/n)+" "+s+(r?"s":"")}e.exports=function(e,o){o=o||{};var l,a,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var o=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===u&&isFinite(e))return o.long?(l=e,(a=Math.abs(l))>=r?i(l,a,r,"day"):a>=s?i(l,a,s,"hour"):a>=n?i(l,a,n,"minute"):a>=t?i(l,a,t,"second"):l+" ms"):function(e){var i=Math.abs(e);return i>=r?Math.round(e/r)+"d":i>=s?Math.round(e/s)+"h":i>=n?Math.round(e/n)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},135:e=>{var t=e.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return null!=e.address?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%s trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return null!=e.subtype?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,names:["value","direction","encrypt-uri","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+(e["encrypt-uri"]?" %s":"%v")+" %s"+(e.config?" %s":"")}},{name:"extmapAllowMixed",reg:/^(extmap-allow-mixed)/},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return null!=e.sessionConfig?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"connectionType",reg:/^connection:(new|existing)/,format:"connection:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*(?:\.\d*)*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*(?:\.\d*)*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=null!=e.raddr?" raddr %s rport %d":"%v%v",t+=null!=e.tcptype?" tcptype %s":"%v",null!=e.generation&&(t+=" generation %d"),(t+=null!=e["network-id"]?" network-id %d":"%v")+(null!=e["network-cost"]?" network-cost %d":"%v")}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return null!=e.attribute&&(t+=" %s",null!=e.value&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return null!=e.maxMessageSize?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{name:"bundleOnly",reg:/^(bundle-only)/},{name:"label",reg:/^label:(.+)/,format:"label:%s"},{name:"sctpPort",reg:/^sctp-port:(\d+)$/,format:"sctp-port:%s"},{name:"maxMessageSize",reg:/^max-message-size:(\d+)$/,format:"max-message-size:%s"},{push:"tsRefClocks",reg:/^ts-refclk:([^\s=]*)(?:=(\S*))?/,names:["clksrc","clksrcExt"],format:function(e){return"ts-refclk:%s"+(null!=e.clksrcExt?"=%s":"")}},{name:"mediaClk",reg:/^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,names:["id","mediaClockName","mediaClockValue","rateNumerator","rateDenominator"],format:function(e){var t="mediaclk:";return t+=null!=e.id?"id=%s %s":"%v%s",t+=null!=e.mediaClockValue?"=%s":"",(t+=null!=e.rateNumerator?" rate=%s":"")+(null!=e.rateDenominator?"/%s":"")}},{name:"keywords",reg:/^keywds:(.+)$/,format:"keywds:%s"},{name:"content",reg:/^content:(.+)/,format:"content:%s"},{name:"bfcpFloorCtrl",reg:/^floorctrl:(c-only|s-only|c-s)/,format:"floorctrl:%s"},{name:"bfcpConfId",reg:/^confid:(\d+)/,format:"confid:%s"},{name:"bfcpUserId",reg:/^userid:(\d+)/,format:"userid:%s"},{name:"bfcpFloorId",reg:/^floorid:(.+) (?:m-stream|mstrm):(.+)/,names:["id","mStream"],format:"floorid:%s mstrm:%s"},{push:"invalid",names:["value"]}]};Object.keys(t).forEach((function(e){t[e].forEach((function(e){e.reg||(e.reg=/(.*)/),e.format||(e.format="%s")}))}))},548:(e,t,n)=>{var s=n(975),r=n(285);t.write=r,t.parse=s.parse,t.parseParams=s.parseParams,t.parseFmtpConfig=s.parseFmtpConfig,t.parsePayloads=s.parsePayloads,t.parseRemoteCandidates=s.parseRemoteCandidates,t.parseImageAttributes=s.parseImageAttributes,t.parseSimulcastStreamList=s.parseSimulcastStreamList},975:(e,t,n)=>{var s=function(e){return String(Number(e))===e?Number(e):e},r=function(e,t,n){var r=e.name&&e.names;e.push&&!t[e.push]?t[e.push]=[]:r&&!t[e.name]&&(t[e.name]={});var i=e.push?{}:r?t[e.name]:t;!function(e,t,n,r){if(r&&!n)t[r]=s(e[1]);else for(var i=0;i<n.length;i+=1)null!=e[i+1]&&(t[n[i]]=s(e[i+1]))}(n.match(e.reg),i,e.names,e.name),e.push&&t[e.push].push(i)},i=n(135),o=RegExp.prototype.test.bind(/^([a-z])=(.*)/);t.parse=function(e){var t={},n=[],s=t;return e.split(/(\r\n|\r|\n)/).filter(o).forEach((function(e){var t=e[0],o=e.slice(2);"m"===t&&(n.push({rtp:[],fmtp:[]}),s=n[n.length-1]);for(var l=0;l<(i[t]||[]).length;l+=1){var a=i[t][l];if(a.reg.test(o))return r(a,s,o)}})),t.media=n,t};var l=function(e,t){var n=t.split(/=(.+)/,2);return 2===n.length?e[n[0]]=s(n[1]):1===n.length&&t.length>1&&(e[n[0]]=void 0),e};t.parseParams=function(e){return e.split(/;\s?/).reduce(l,{})},t.parseFmtpConfig=t.parseParams,t.parsePayloads=function(e){return e.toString().split(" ").map(Number)},t.parseRemoteCandidates=function(e){for(var t=[],n=e.split(" ").map(s),r=0;r<n.length;r+=3)t.push({component:n[r],ip:n[r+1],port:n[r+2]});return t},t.parseImageAttributes=function(e){return e.split(" ").map((function(e){return e.substring(1,e.length-1).split(",").reduce(l,{})}))},t.parseSimulcastStreamList=function(e){return e.split(";").map((function(e){return e.split(",").map((function(e){var t,n=!1;return"~"!==e[0]?t=s(e):(t=s(e.substring(1,e.length)),n=!0),{scid:t,paused:n}}))}))}},285:(e,t,n)=>{var s=n(135),r=/%[sdv%]/g,i=function(e){var t=1,n=arguments,s=n.length;return e.replace(r,(function(e){if(t>=s)return e;var r=n[t];switch(t+=1,e){case"%%":return"%";case"%s":return String(r);case"%d":return Number(r);case"%v":return""}}))},o=function(e,t,n){var s=[e+"="+(t.format instanceof Function?t.format(t.push?n:n[t.name]):t.format)];if(t.names)for(var r=0;r<t.names.length;r+=1){var o=t.names[r];t.name?s.push(n[t.name][o]):s.push(n[t.names[r]])}else s.push(n[t.name]);return i.apply(null,s)},l=["v","o","s","i","u","e","p","c","b","t","r","z","a"],a=["i","c","b","a"];e.exports=function(e,t){t=t||{},null==e.version&&(e.version=0),null==e.name&&(e.name=" "),e.media.forEach((function(e){null==e.payloads&&(e.payloads="")}));var n=t.outerOrder||l,r=t.innerOrder||a,i=[];return n.forEach((function(t){s[t].forEach((function(n){n.name in e&&null!=e[n.name]?i.push(o(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach((function(e){i.push(o(t,n,e))}))}))})),e.media.forEach((function(e){i.push(o("m",s.m[0],e)),r.forEach((function(t){s[t].forEach((function(n){n.name in e&&null!=e[n.name]?i.push(o(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach((function(e){i.push(o(t,n,e))}))}))}))})),i.join("\r\n")+"\r\n"}},403:e=>{e.exports=JSON.parse('{"name":"jssip","title":"JsSIP","description":"the Javascript SIP library","version":"3.9.0","homepage":"https://jssip.net","contributors":["José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)","Iñaki Baz Castillo <ibc@aliax.net> (https://inakibaz.me)"],"types":"lib/JsSIP.d.ts","main":"lib-es5/JsSIP.js","keywords":["sip","websocket","webrtc","node","browser","library"],"license":"MIT","repository":{"type":"git","url":"https://github.com/versatica/JsSIP.git"},"bugs":{"url":"https://github.com/versatica/JsSIP/issues"},"dependencies":{"@types/debug":"^4.1.5","@types/node":"^14.14.34","debug":"^4.3.1","events":"^3.3.0","sdp-transform":"^2.14.1"},"devDependencies":{"@babel/core":"^7.13.10","@babel/preset-env":"^7.13.10","ansi-colors":"^3.2.4","browserify":"^16.5.1","eslint":"^5.16.0","fancy-log":"^1.3.3","gulp":"^4.0.2","gulp-babel":"^8.0.0","gulp-eslint":"^5.0.0","gulp-expect-file":"^1.0.2","gulp-header":"^2.0.9","gulp-nodeunit-runner":"^0.2.2","gulp-plumber":"^1.2.1","gulp-rename":"^1.4.0","gulp-uglify-es":"^1.0.4","pegjs":"^0.7.0","vinyl-buffer":"^1.0.1","vinyl-source-stream":"^2.0.0"},"scripts":{"lint":"gulp lint","test":"gulp test","prepublishOnly":"gulp babel"}}')}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,n),i.exports}(()=>{var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function s(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}function s(e,t,n,s){var r,i=arguments.length,o=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,s);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(o=(i<3?r(o):i>3?r(t,n,o):r(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],s=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&s>=e.length&&(e=void 0),{value:e&&e[s++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var s,r,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(s=i.next()).done;)o.push(s.value)}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return o}function o(e,t,n){if(n||2===arguments.length)for(var s,r=0,i=t.length;r<i;r++)!s&&r in t||(s||(s=Array.prototype.slice.call(t,0,r)),s[r]=t[r]);return e.concat(s||Array.prototype.slice.call(t))}Object.create,Object.create;const l=globalThis,a=l.ShadowRoot&&(void 0===l.ShadyCSS||l.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,u=Symbol(),c=new WeakMap;class h{constructor(e,t,n){if(this._$cssResult$=!0,n!==u)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(a&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=c.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&c.set(t,e))}return e}toString(){return this.cssText}}const d=e=>new h("string"==typeof e?e:e+"",void 0,u),_=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,s)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[s+1]),e[0]);return new h(n,e,u)},p=a?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return d(t)})(e):e;var f,m,g;const{is:v,defineProperty:T,getOwnPropertyDescriptor:b,getOwnPropertyNames:C,getOwnPropertySymbols:S,getPrototypeOf:A}=Object,E=globalThis,y=E.trustedTypes,w=y?y.emptyScript:"",R=E.reactiveElementPolyfillSupport,I=(e,t)=>e,x={toAttribute(e,t){switch(t){case Boolean:e=e?w:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},O=(e,t)=>!v(e,t),N={attribute:!0,type:String,converter:x,reflect:!1,hasChanged:O};null!==(f=Symbol.metadata)&&void 0!==f||(Symbol.metadata=Symbol("metadata")),null!==(m=E.litPropertyMetadata)&&void 0!==m||(E.litPropertyMetadata=new WeakMap);class $ extends HTMLElement{static addInitializer(e){var t;this._$Ei(),(null!==(t=this.l)&&void 0!==t?t:this.l=[]).push(e)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(e,t=N){if(t.state&&(t.attribute=!1),this._$Ei(),this.elementProperties.set(e,t),!t.noAccessor){const n=Symbol(),s=this.getPropertyDescriptor(e,n,t);void 0!==s&&T(this.prototype,e,s)}}static getPropertyDescriptor(e,t,n){var s;const{get:r,set:i}=null!==(s=b(this.prototype,e))&&void 0!==s?s:{get(){return this[t]},set(e){this[t]=e}};return{get(){return null==r?void 0:r.call(this)},set(t){const s=null==r?void 0:r.call(this);i.call(this,t),this.requestUpdate(e,s,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){var t;return null!==(t=this.elementProperties.get(e))&&void 0!==t?t:N}static _$Ei(){if(this.hasOwnProperty(I("elementProperties")))return;const e=A(this);e.finalize(),void 0!==e.l&&(this.l=[...e.l]),this.elementProperties=new Map(e.elementProperties)}static finalize(){if(this.hasOwnProperty(I("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(I("properties"))){const e=this.properties,t=[...C(e),...S(e)];for(const n of t)this.createProperty(n,e[n])}const e=this[Symbol.metadata];if(null!==e){const t=litPropertyMetadata.get(e);if(void 0!==t)for(const[e,n]of t)this.elementProperties.set(e,n)}this._$Eh=new Map;for(const[e,t]of this.elementProperties){const n=this._$Eu(e,t);void 0!==n&&this._$Eh.set(n,e)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(p(e))}else void 0!==e&&t.push(p(e));return t}static _$Eu(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){var e;this._$ES=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$E_(),this.requestUpdate(),null===(e=this.constructor.l)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$EO)&&void 0!==t?t:this._$EO=new Set).add(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$EO)||void 0===t||t.delete(e)}_$E_(){const e=new Map,t=this.constructor.elementProperties;for(const n of t.keys())this.hasOwnProperty(n)&&(e.set(n,this[n]),delete this[n]);e.size>0&&(this._$Ep=e)}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,t)=>{if(a)e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet));else for(const n of t){const t=document.createElement("style"),s=l.litNonce;void 0!==s&&t.setAttribute("nonce",s),t.textContent=n.cssText,e.appendChild(t)}})(t,this.constructor.elementStyles),t}connectedCallback(){var e,t;null!==(e=this.renderRoot)&&void 0!==e||(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$EO)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$EO)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EC(e,t){var n;const s=this.constructor.elementProperties.get(e),r=this.constructor._$Eu(e,s);if(void 0!==r&&!0===s.reflect){const i=(void 0!==(null===(n=s.converter)||void 0===n?void 0:n.toAttribute)?s.converter:x).toAttribute(t,s.type);this._$Em=e,null==i?this.removeAttribute(r):this.setAttribute(r,i),this._$Em=null}}_$AK(e,t){var n;const s=this.constructor,r=s._$Eh.get(e);if(void 0!==r&&this._$Em!==r){const e=s.getPropertyOptions(r),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:x;this._$Em=r,this[r]=i.fromAttribute(t,e.type),this._$Em=null}}requestUpdate(e,t,n){var s;if(void 0!==e){if(null!=n||(n=this.constructor.getPropertyOptions(e)),!(null!==(s=n.hasChanged)&&void 0!==s?s:O)(this[e],t))return;this.P(e,t,n)}!1===this.isUpdatePending&&(this._$ES=this._$ET())}P(e,t,n){var s;this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$Em!==e&&(null!==(s=this._$Ej)&&void 0!==s?s:this._$Ej=new Set).add(e)}async _$ET(){this.isUpdatePending=!0;try{await this._$ES}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e,t;if(!this.isUpdatePending)return;if(!this.hasUpdated){if(null!==(e=this.renderRoot)&&void 0!==e||(this.renderRoot=this.createRenderRoot()),this._$Ep){for(const[e,t]of this._$Ep)this[e]=t;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[e,n]of t)!0!==n.wrapped||this._$AL.has(e)||void 0===this[e]||this.P(e,this[e],n)}let n=!1;const s=this._$AL;try{n=this.shouldUpdate(s),n?(this.willUpdate(s),null===(t=this._$EO)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(s)):this._$EU()}catch(s){throw n=!1,this._$EU(),s}n&&this._$AE(s)}willUpdate(e){}_$AE(e){var t;null===(t=this._$EO)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(e){return!0}update(e){this._$Ej&&(this._$Ej=this._$Ej.forEach((e=>this._$EC(e,this[e])))),this._$EU()}updated(e){}firstUpdated(e){}}var P;$.elementStyles=[],$.shadowRootOptions={mode:"open"},$[I("elementProperties")]=new Map,$[I("finalized")]=new Map,null==R||R({ReactiveElement:$}),(null!==(g=E.reactiveElementVersions)&&void 0!==g?g:E.reactiveElementVersions=[]).push("2.0.4");const U=globalThis,D=U.trustedTypes,M=D?D.createPolicy("lit-html",{createHTML:e=>e}):void 0,H="$lit$",q=`lit$${Math.random().toFixed(9).slice(2)}$`,k="?"+q,L=`<${k}>`,F=document,j=()=>F.createComment(""),G=e=>null===e||"object"!=typeof e&&"function"!=typeof e,z=Array.isArray,V=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,W=/-->/g,B=/>/g,Y=RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),K=/'/g,J=/"/g,X=/^(?:script|style|textarea|title)$/i,Q=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),Z=Q(1),ee=(Q(2),Q(3),Symbol.for("lit-noChange")),te=Symbol.for("lit-nothing"),ne=new WeakMap,se=F.createTreeWalker(F,129);function re(e,t){if(!z(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==M?M.createHTML(t):t}const ie=(e,t)=>{const n=e.length-1,s=[];let r,i=2===t?"<svg>":3===t?"<math>":"",o=V;for(let t=0;t<n;t++){const n=e[t];let l,a,u=-1,c=0;for(;c<n.length&&(o.lastIndex=c,a=o.exec(n),null!==a);)c=o.lastIndex,o===V?"!--"===a[1]?o=W:void 0!==a[1]?o=B:void 0!==a[2]?(X.test(a[2])&&(r=RegExp("</"+a[2],"g")),o=Y):void 0!==a[3]&&(o=Y):o===Y?">"===a[0]?(o=null!=r?r:V,u=-1):void 0===a[1]?u=-2:(u=o.lastIndex-a[2].length,l=a[1],o=void 0===a[3]?Y:'"'===a[3]?J:K):o===J||o===K?o=Y:o===W||o===B?o=V:(o=Y,r=void 0);const h=o===Y&&e[t+1].startsWith("/>")?" ":"";i+=o===V?n+L:u>=0?(s.push(l),n.slice(0,u)+H+n.slice(u)+q+h):n+q+(-2===u?t:h)}return[re(e,i+(e[n]||"<?>")+(2===t?"</svg>":3===t?"</math>":"")),s]};class oe{constructor({strings:e,_$litType$:t},n){let s;this.parts=[];let r=0,i=0;const o=e.length-1,l=this.parts,[a,u]=ie(e,t);if(this.el=oe.createElement(a,n),se.currentNode=this.el.content,2===t||3===t){const e=this.el.content.firstChild;e.replaceWith(...e.childNodes)}for(;null!==(s=se.nextNode())&&l.length<o;){if(1===s.nodeType){if(s.hasAttributes())for(const e of s.getAttributeNames())if(e.endsWith(H)){const t=u[i++],n=s.getAttribute(e).split(q),o=/([.?@])?(.*)/.exec(t);l.push({type:1,index:r,name:o[2],strings:n,ctor:"."===o[1]?he:"?"===o[1]?de:"@"===o[1]?_e:ce}),s.removeAttribute(e)}else e.startsWith(q)&&(l.push({type:6,index:r}),s.removeAttribute(e));if(X.test(s.tagName)){const e=s.textContent.split(q),t=e.length-1;if(t>0){s.textContent=D?D.emptyScript:"";for(let n=0;n<t;n++)s.append(e[n],j()),se.nextNode(),l.push({type:2,index:++r});s.append(e[t],j())}}}else if(8===s.nodeType)if(s.data===k)l.push({type:2,index:r});else{let e=-1;for(;-1!==(e=s.data.indexOf(q,e+1));)l.push({type:7,index:r}),e+=q.length-1}r++}}static createElement(e,t){const n=F.createElement("template");return n.innerHTML=e,n}}function le(e,t,n=e,s){var r,i,o;if(t===ee)return t;let l=void 0!==s?null===(r=n._$Co)||void 0===r?void 0:r[s]:n._$Cl;const a=G(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==a&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===a?l=void 0:(l=new a(e),l._$AT(e,n,s)),void 0!==s?(null!==(o=n._$Co)&&void 0!==o?o:n._$Co=[])[s]=l:n._$Cl=l),void 0!==l&&(t=le(e,l._$AS(e,t.values),l,s)),t}class ae{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:n},parts:s}=this._$AD,r=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:F).importNode(n,!0);se.currentNode=r;let i=se.nextNode(),o=0,l=0,a=s[0];for(;void 0!==a;){if(o===a.index){let t;2===a.type?t=new ue(i,i.nextSibling,this,e):1===a.type?t=new a.ctor(i,a.name,a.strings,this,e):6===a.type&&(t=new pe(i,this,e)),this._$AV.push(t),a=s[++l]}o!==(null==a?void 0:a.index)&&(i=se.nextNode(),o++)}return se.currentNode=F,r}p(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class ue{get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cv}constructor(e,t,n,s){var r;this.type=2,this._$AH=te,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=s,this._$Cv=null===(r=null==s?void 0:s.isConnected)||void 0===r||r}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=le(this,e,t),G(e)?e===te||null==e||""===e?(this._$AH!==te&&this._$AR(),this._$AH=te):e!==this._$AH&&e!==ee&&this._(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):(e=>z(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]))(e)?this.k(e):this._(e)}O(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.O(e))}_(e){this._$AH!==te&&G(this._$AH)?this._$AA.nextSibling.data=e:this.T(F.createTextNode(e)),this._$AH=e}$(e){var t;const{values:n,_$litType$:s}=e,r="number"==typeof s?this._$AC(e):(void 0===s.el&&(s.el=oe.createElement(re(s.h,s.h[0]),this.options)),s);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===r)this._$AH.p(n);else{const e=new ae(r,this),t=e.u(this.options);e.p(n),this.T(t),this._$AH=e}}_$AC(e){let t=ne.get(e.strings);return void 0===t&&ne.set(e.strings,t=new oe(e)),t}k(e){z(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,s=0;for(const r of e)s===t.length?t.push(n=new ue(this.O(j()),this.O(j()),this,this.options)):n=t[s],n._$AI(r),s++;s<t.length&&(this._$AR(n&&n._$AB.nextSibling,s),t.length=s)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cv=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class ce{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(e,t,n,s,r){this.type=1,this._$AH=te,this._$AN=void 0,this.element=e,this.name=t,this._$AM=s,this.options=r,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=te}_$AI(e,t=this,n,s){const r=this.strings;let i=!1;if(void 0===r)e=le(this,e,t,0),i=!G(e)||e!==this._$AH&&e!==ee,i&&(this._$AH=e);else{const s=e;let o,l;for(e=r[0],o=0;o<r.length-1;o++)l=le(this,s[n+o],t,o),l===ee&&(l=this._$AH[o]),i||(i=!G(l)||l!==this._$AH[o]),l===te?e=te:e!==te&&(e+=(null!=l?l:"")+r[o+1]),this._$AH[o]=l}i&&!s&&this.j(e)}j(e){e===te?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class he extends ce{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===te?void 0:e}}class de extends ce{constructor(){super(...arguments),this.type=4}j(e){this.element.toggleAttribute(this.name,!!e&&e!==te)}}class _e extends ce{constructor(e,t,n,s,r){super(e,t,n,s,r),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=le(this,e,t,0))&&void 0!==n?n:te)===ee)return;const s=this._$AH,r=e===te&&s!==te||e.capture!==s.capture||e.once!==s.once||e.passive!==s.passive,i=e!==te&&(s===te||r);r&&this.element.removeEventListener(this.name,this,s),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class pe{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){le(this,e)}}const fe=U.litHtmlPolyfillSupport;var me,ge;null==fe||fe(oe,ue),(null!==(P=U.litHtmlVersions)&&void 0!==P?P:U.litHtmlVersions=[]).push("3.2.1");class ve extends ${constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,n)=>{var s,r;const i=null!==(s=null==n?void 0:n.renderBefore)&&void 0!==s?s:t;let o=i._$litPart$;if(void 0===o){const e=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:null;i._$litPart$=o=new ue(t.insertBefore(j(),e),e,void 0,null!=n?n:{})}return o._$AI(e),o})(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return ee}}ve._$litElement$=!0,ve.finalized=!0,null===(me=globalThis.litElementHydrateSupport)||void 0===me||me.call(globalThis,{LitElement:ve});const Te=globalThis.litElementPolyfillSupport;null==Te||Te({LitElement:ve}),(null!==(ge=globalThis.litElementVersions)&&void 0!==ge?ge:globalThis.litElementVersions=[]).push("4.1.1");const be=e=>(...t)=>({_$litDirective$:e,values:t});class Ce{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const Se=be(class extends Ce{constructor(e){var t;if(super(e),1!==e.type||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var n,s;if(void 0===this.st){this.st=new Set,void 0!==e.strings&&(this.nt=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(n=this.nt)||void 0===n?void 0:n.has(e))&&this.st.add(e);return this.render(t)}const r=e.element.classList;for(const e of this.st)e in t||(r.remove(e),this.st.delete(e));for(const e in t){const n=!!t[e];n===this.st.has(e)||(null===(s=this.nt)||void 0===s?void 0:s.has(e))||(n?(r.add(e),this.st.add(e)):(r.remove(e),this.st.delete(e)))}return ee}}),Ae=be(class extends Ce{constructor(e){var t;if(super(e),1!==e.type||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,n)=>{const s=e[n];return null==s?t:t+`${n=n.includes("-")?n:n.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(e,[t]){const{style:n}=e.element;if(void 0===this.ft)return this.ft=new Set(Object.keys(t)),this.render(t);for(const e of this.ft)null==t[e]&&(this.ft.delete(e),e.includes("-")?n.removeProperty(e):n[e]=null);for(const e in t){const s=t[e];if(null!=s){this.ft.add(e);const t="string"==typeof s&&s.endsWith(" !important");e.includes("-")||t?n.setProperty(e,t?s.slice(0,-11):s,t?"important":""):n[e]=s}}return ee}}),Ee=e=>(t,n)=>{void 0!==n?n.addInitializer((()=>{customElements.define(e,t)})):customElements.define(e,t)};class ye{static get styles(){return _`
            .wrapper {
                padding: 8px;
                padding-top: 0px;
                padding-bottom: 2px;
            }
            .flex {
                flex: 1;
                margin-top: 6px;
                margin-bottom: 6px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                min-width: 0;
            }
            .info, .info > * {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            .info {
                flex: 1 1 30%;
                cursor: pointer;
                margin-left: 16px;
                margin-right: 8px;
            }
            ha-card {
                cursor: pointer;
            }
            .good {
                color: var(--label-badge-green);
            }
            .warning {
                color: var(--label-badge-yellow);
            }
            .critical {
                color: var(--label-badge-red);
            }
            .icon {
                padding: 0px 18px 0px 8px;
              }
            #phone .content {
                color: white;
            }
            video {
                display: block;
                min-height: 20em;
                height: 100%;
                width: 100%;
            }
            .box {
                /* start paper-font-common-nowrap style */
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                /* end paper-font-common-nowrap style */
                left: 0;
                right: 0;
                bottom: 0;
                background-color: var(
                  --card-background-color
                );
                padding: 4px 8px;
                font-size: 16px;
                line-height: 40px;
                color: var(--ha-picture-card-text-color, white);
                display: flex;
                justify-content: space-between;
                flex-direction: column;
                /*margin-top: -70px;*/
                min-height: 62px;
            }
            .box .title {
                font-weight: 500;
                margin-left: 8px;
            }
            .row {
                display: flex;
                flex-direction: column;
            }
            .container {
                transition: filter 0.2s linear 0s;
                width: 80vw;
            }
            .box, ha-icon {
                display: flex;
                align-items: center;
            }
            .accept-btn {
                color: var(--label-badge-green);
            }
            .hangup-btn {
                color: var(--label-badge-red);
            }
            #time, .title {
                margin-right: 8px;
                display: flex;
                align-items: center;
            }
            ha-camera-stream {
                height: auto;
                width: 100%;
                display: block;
            }

            .card-header {
                display: flex;
                justify-content: space-between;
            }

            .mdc-dialog__surface {
                position: relative;
                display: flex;
                flex-direction: column;
                flex-grow: 0;
                flex-shrink: 0;
                box-sizing: border-box;
                max-width: 100%;
                max-height: 100%;
                pointer-events: auto;
                overflow-y: auto;
            }

            .mdc-dialog__container {
                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: space-around;
                box-sizing: border-box;
                height: 100%;
                transform: scale(0.8);
                opacity: 0;
                pointer-events: none;
            }

            ha-dialog[data-domain="camera"] {
                --dialog-content-padding: 0;
            }

            ha-dialog[data-domain="camera"] .content, ha-dialog[data-domain="camera"] ha-header-bar {
                width: auto;
            }

            ha-dialog {
                --dialog-surface-position: static;
                --mdc-dialog-max-width: 90vw !important;
                --mdc-dialog-min-width: 400px;
                --mdc-dialog-heading-ink-color: var(--primary-text-color);
                --mdc-dialog-content-ink-color: var(--primary-text-color);
                --justify-action-buttons: space-between;
            }

            #audioVisualizer {
                min-height: 20em;
                height: 100%;
                white-space: nowrap;
                align-items: center;
                display: flex;
                justify-content: center;
            }

            #audioVisualizer div {
                display: inline-block;
                width: 3px;
                height: 100px;
                margin: 0 7px;
                background: currentColor;
                transform: scaleY( .5 );
                opacity: .25;
            }
            ha-header-bar {
                --mdc-theme-on-primary: var(--primary-text-color);
                --mdc-theme-primary: var(--mdc-theme-surface);
                flex-shrink: 0;
                display: block;
            }
            .content {
                outline: none;
                align-self: stretch;
                flex-grow: 1;
                display: flex;
                flex-flow: column;
                background-color: var(--secondary-background-color);
            }
            @media all and (max-width: 450px), all and (max-height: 500px) {
                ha-header-bar {
                    --mdc-theme-primary: var(--app-header-background-color);
                    --mdc-theme-on-primary: var(--app-header-text-color, white);
                    border-bottom: none;
                }
            }

            :host([large]) ha-dialog[data-domain="camera"] .content,
            :host([large]) ha-header-bar {
                width: 90vw;
            }
            @media (max-width: 450px), (max-height: 500px) {
                ha-dialog {
                    --mdc-dialog-min-width: calc( 100vw - env(safe-area-inset-right) - env(safe-area-inset-left) );
                    --mdc-dialog-max-width: calc( 100vw - env(safe-area-inset-right) - env(safe-area-inset-left) );
                    --mdc-dialog-min-height: 94%;
                    --mdc-dialog-max-height: 94%;
                    --vertial-align-dialog: flex-end;
                    --ha-dialog-border-radius: 0px;
                }
            }

            .header-text {
                -webkit-font-smoothing: antialiased;
                font-family: var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
                font-size: var(--mdc-typography-headline6-font-size, 1.25rem);
                line-height: var(--mdc-typography-headline6-line-height, 2rem);
                font-weight: var(--mdc-typography-headline6-font-weight, 500);
                letter-spacing: var(--mdc-typography-headline6-letter-spacing, 0.0125em);
                text-decoration: var(--mdc-typography-headline6-text-decoration, inherit);
                text-transform: var(--mdc-typography-headline6-text-transform, inherit);
                padding-left: 20px;
                padding-right: 0px;
                text-overflow: ellipsis;
                white-space: nowrap;
                overflow: hidden;
                z-index: 1;
            }
            
            .heading {
                position: absolute;
                left: 0;
                right: 0;
                padding: 5px;
                background-color: var(
                  --ha-picture-card-background-color,
                  rgba(0, 0, 0, 0.3)
                );
            }
        `}static get clientStyles(){return _`
        :host {
          --tile-color: var(--state-inactive-color);
          -webkit-tap-highlight-color: transparent;
        }
        ha-card:has(.background:focus-visible) {
          --shadow-default: var(--ha-card-box-shadow, 0 0 0 0 transparent);
          --shadow-focus: 0 0 0 1px var(--tile-color);
          border-color: var(--tile-color);
          box-shadow: var(--shadow-default), var(--shadow-focus);
        }
        ha-card {
          --ha-ripple-color: var(--tile-color);
          --ha-ripple-hover-opacity: 0.04;
          --ha-ripple-pressed-opacity: 0.12;
          height: 100%;
          transition:
            box-shadow 180ms ease-in-out,
            border-color 180ms ease-in-out;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }
        ha-card.active {
          --tile-color: var(--state-icon-color);
        }
        [role="button"] {
          cursor: pointer;
        }
        [role="button"]:focus {
          outline: none;
        }
        .background {
          position: absolute;
          top: 0;
          left: 0;
          bottom: 0;
          right: 0;
          border-radius: var(--ha-card-border-radius, 12px);
          margin: calc(-1 * var(--ha-card-border-width, 1px));
          overflow: hidden;
        }
        .container {
          margin: calc(-1 * var(--ha-card-border-width, 1px));
          display: flex;
          flex-direction: column;
          flex: 1;
        }
        .content {
          position: relative;
          display: flex;
          flex-direction: row;
          align-items: center;
          padding: 10px;
          flex: 1;
          box-sizing: border-box;
          pointer-events: none;
        }
        .vertical {
          flex-direction: column;
          text-align: center;
          justify-content: center;
        }
        .vertical .icon-container {
          margin-bottom: 10px;
          margin-right: 0;
          margin-inline-start: initial;
          margin-inline-end: initial;
        }
        .vertical ha-tile-info {
          width: 100%;
          flex: none;
        }
        .icon-container {
          position: relative;
          flex: none;
          margin-right: 10px;
          margin-inline-start: initial;
          margin-inline-end: 10px;
          direction: var(--direction);
          transition: transform 180ms ease-in-out;
        }
        .icon-container ha-tile-icon,
        .icon-container ha-tile-image {
          --tile-icon-color: var(--tile-color);
          user-select: none;
          -ms-user-select: none;
          -webkit-user-select: none;
          -moz-user-select: none;
        }
        .icon-container ha-tile-badge {
          position: absolute;
          top: -3px;
          right: -3px;
          inset-inline-end: -3px;
          inset-inline-start: initial;
        }
        .icon-container[role="button"] {
          pointer-events: auto;
        }
        .icon-container[role="button"]:focus-visible,
        .icon-container[role="button"]:active {
          transform: scale(1.2);
        }
        ha-tile-info {
          position: relative;
          min-width: 0;
          transition: background-color 180ms ease-in-out;
          box-sizing: border-box;
        }
        hui-card-features {
          --feature-color: var(--tile-color);
        }

        ha-tile-icon[data-domain="alarm_control_panel"][data-state="pending"],
        ha-tile-icon[data-domain="alarm_control_panel"][data-state="arming"],
        ha-tile-icon[data-domain="alarm_control_panel"][data-state="triggered"],
        ha-tile-icon[data-domain="lock"][data-state="jammed"] {
          animation: pulse 1s infinite;
        }

        ha-tile-badge.not-found {
          --tile-badge-background-color: var(--red-color);
        }

        @keyframes pulse {
          0% {
            opacity: 1;
          }
          50% {
            opacity: 0;
          }
          100% {
            opacity: 1;
          }
        }
      `}}class we{constructor(){this.prefix="",this.secret="",this.button_size=48,this.buttons=[],this.auto_answer=!1,this.doorbell_ext="",this.doorbell_camera=void 0,this.person={person:"",ext:""},this.ringtones={ringtone:""}}}var Re=n(880);function Ie(e){return"function"==typeof e}function xe(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var Oe=xe((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function Ne(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var $e=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,s,l;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var u=r(a),c=u.next();!c.done;c=u.next())c.value.remove(this)}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=u.return)&&t.call(u)}finally{if(e)throw e.error}}else a.remove(this);var h=this.initialTeardown;if(Ie(h))try{h()}catch(e){l=e instanceof Oe?e.errors:[e]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var _=r(d),p=_.next();!p.done;p=_.next()){var f=p.value;try{De(f)}catch(e){l=null!=l?l:[],e instanceof Oe?l=o(o([],i(l)),i(e.errors)):l.push(e)}}}catch(e){n={error:e}}finally{try{p&&!p.done&&(s=_.return)&&s.call(_)}finally{if(n)throw n.error}}}if(l)throw new Oe(l)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)De(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&Ne(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&Ne(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),Pe=$e.EMPTY;function Ue(e){return e instanceof $e||e&&"closed"in e&&Ie(e.remove)&&Ie(e.add)&&Ie(e.unsubscribe)}function De(e){Ie(e)?e():e.unsubscribe()}var Me=null,He=null,qe=void 0,ke=!1,Le=!1,Fe={setTimeout:function(e,t){for(var n=[],s=2;s<arguments.length;s++)n[s-2]=arguments[s];var r=Fe.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,o([e,t],i(n))):setTimeout.apply(void 0,o([e,t],i(n)))},clearTimeout:function(e){var t=Fe.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function je(){}var Ge=ze("C",void 0,void 0);function ze(e,t,n){return{kind:e,value:t,error:n}}var Ve=null;function We(e){if(ke){var t=!Ve;if(t&&(Ve={errorThrown:!1,error:null}),e(),t){var n=Ve,s=n.errorThrown,r=n.error;if(Ve=null,s)throw r}}else e()}var Be=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,Ue(t)&&t.add(n)):n.destination=et,n}return t(n,e),n.create=function(e,t,n){return new Xe(e,t,n)},n.prototype.next=function(e){this.isStopped?Ze(function(e){return ze("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?Ze(ze("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?Ze(Ge,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}($e),Ye=Function.prototype.bind;function Ke(e,t){return Ye.call(e,t)}var Je=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){Qe(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){Qe(e)}else Qe(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){Qe(e)}},e}(),Xe=function(e){function n(t,n,s){var r,i,o=e.call(this)||this;return Ie(t)||!t?r={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=s?s:void 0}:o&&Le?((i=Object.create(t)).unsubscribe=function(){return o.unsubscribe()},r={next:t.next&&Ke(t.next,i),error:t.error&&Ke(t.error,i),complete:t.complete&&Ke(t.complete,i)}):r=t,o.destination=new Je(r),o}return t(n,e),n}(Be);function Qe(e){var t;ke?(t=e,ke&&Ve&&(Ve.errorThrown=!0,Ve.error=t)):function(e){Fe.setTimeout((function(){if(!Me)throw e;Me(e)}))}(e)}function Ze(e,t){var n=He;n&&Fe.setTimeout((function(){return n(e,t)}))}var et={closed:!0,next:je,error:function(e){throw e},complete:je},tt="function"==typeof Symbol&&Symbol.observable||"@@observable";function nt(e){return e}function st(e){return 0===e.length?nt:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var rt=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var s,r=this,i=(s=e)&&s instanceof Be||function(e){return e&&Ie(e.next)&&Ie(e.error)&&Ie(e.complete)}(s)&&Ue(s)?e:new Xe(e,t,n);return We((function(){var e=r,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?r._subscribe(i):r._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=it(t))((function(t,s){var r=new Xe({next:function(t){try{e(t)}catch(e){s(e),r.unsubscribe()}},error:s,complete:t});n.subscribe(r)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[tt]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return st(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=it(e))((function(e,n){var s;t.subscribe((function(e){return s=e}),(function(e){return n(e)}),(function(){return e(s)}))}))},e.create=function(t){return new e(t)},e}();function it(e){var t;return null!==(t=null!=e?e:qe)&&void 0!==t?t:Promise}var ot,lt=xe((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),at=function(e){function n(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(n,e),n.prototype.lift=function(e){var t=new ut(this,this);return t.operator=e,t},n.prototype._throwIfClosed=function(){if(this.closed)throw new lt},n.prototype.next=function(e){var t=this;We((function(){var n,s;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=r(t.currentObservers),o=i.next();!o.done;o=i.next())o.value.next(e)}catch(e){n={error:e}}finally{try{o&&!o.done&&(s=i.return)&&s.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(e){var t=this;We((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},n.prototype.complete=function(){var e=this;We((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},n.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},n.prototype._innerSubscribe=function(e){var t=this,n=this,s=n.hasError,r=n.isStopped,i=n.observers;return s||r?Pe:(this.currentObservers=null,i.push(e),new $e((function(){t.currentObservers=null,Ne(i,e)})))},n.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,s=t.thrownError,r=t.isStopped;n?e.error(s):r&&e.complete()},n.prototype.asObservable=function(){var e=new rt;return e.source=this,e},n.create=function(e,t){return new ut(e,t)},n}(rt),ut=function(e){function n(t,n){var s=e.call(this)||this;return s.destination=t,s.source=n,s}return t(n,e),n.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},n.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},n.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},n.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:Pe},n}(at);!function(e){e[e.Disconnected=0]="Disconnected",e[e.Idle=1]="Idle",e[e.Registered=2]="Registered",e[e.IncomingCall=3]="IncomingCall",e[e.OutgoingCall=4]="OutgoingCall",e[e.Calling=5]="Calling",e[e.OnCall=6]="OnCall"}(ot||(ot={}));class ct{constructor(e,t,n,s,r,i,o=!1){this.server=e,this.port=t,this.prefix=n,this.ext=s,this.secret=r,this.doorbell_ext=i,this.auto_answer=o,this.sipCallOptions={mediaConstraints:{audio:!0,video:!1},rtcOfferConstraints:{offerToReceiveAudio:!0,offerToReceiveVideo:!1}},this.statusSubject=new at,this.ringSubject=new at,this.progressSubject=new at,this.progress="00:00",this.mediaSubject=new at,this.status={sipStatus:ot.Disconnected,statusMessage:"Disconnected"},this.onStatus=this.statusSubject.asObservable(),this.onRing=this.ringSubject.asObservable(),this.onProgress=this.progressSubject.asObservable(),this.onMedia=this.mediaSubject.asObservable(),this.sipPhoneSession=null}get isMuted(){var e,t;return null!==(t=null===(e=this.sipPhoneSession)||void 0===e?void 0:e.isMuted().audio)&&void 0!==t&&t}endCall(){this.status={sipStatus:ot.Idle,statusMessage:"Idle"},this.statusSubject.next(this.status),this.ringSubject.next(!1),this.mediaSubject.next(null),clearInterval(this.intervalId),this.progress="00:00",this.progressSubject.next(this.progress),this.sipPhoneSession=null}connect(){var e,t,n,s,r;if(null===(e=this.sipPhone)||void 0===e?void 0:e.isRegistered())return this.statusSubject.next(this.status),void this.progressSubject.next(this.progress);let i=`wss://${this.server}:${this.port}${this.prefix}/ws`;console.log(`Connecting to ${i}`);var o={sockets:[new Re.WebSocketInterface(i)],uri:"sip:"+this.ext+"@"+this.server,authorization_user:this.ext,password:this.secret,register:!0};this.sipPhone=new Re.UA(o),this.sipPhone.start(),null===(t=this.sipPhone)||void 0===t||t.on("registered",(e=>{console.log("SIP Doorbell","Registered with SIP Server"),this.status={sipStatus:ot.Idle,statusMessage:"Idle"},this.statusSubject.next(this.status),this.progressSubject.next(this.progress)})),null===(n=this.sipPhone)||void 0===n||n.on("unregistered",(e=>{console.log("SIP Doorbell","Unregistered with SIP Server"),this.status={sipStatus:ot.Disconnected,statusMessage:"Disconnected"},this.statusSubject.next(this.status),this.progressSubject.next(this.progress)})),null===(s=this.sipPhone)||void 0===s||s.on("registrationFailed",(e=>{console.log("SIP Doorbell","Failed Registeration with SIP Server"),this.status={sipStatus:ot.Disconnected,statusMessage:"Disconnected"},this.statusSubject.next(this.status),this.progressSubject.next(this.progress)})),null===(r=this.sipPhone)||void 0===r||r.on("newRTCSession",(e=>{if(null!==this.sipPhoneSession)return void e.session.terminate();console.log("SIP Doorbell","Call: newRTCSession: Originator: "+e.originator),this.sipPhoneSession=e.session,this.sipPhoneSession.on("getusermediafailed",(function(e){console.log("SIP Doorbell","getUserMedia() failed: "+e)})),this.sipPhoneSession.on("peerconnection:createofferfailed",(function(e){console.log("SIP Doorbell","createOffer() failed: "+e)})),this.sipPhoneSession.on("peerconnection:createanswerfailed",(function(e){console.log("SIP Doorbell","createAnswer() failed: "+e)})),this.sipPhoneSession.on("peerconnection:setlocaldescriptionfailed",(function(e){console.log("SIP Doorbell","setLocalDescription() failed: "+e)})),this.sipPhoneSession.on("peerconnection:setremotedescriptionfailed",(function(e){console.log("SIP Doorbell","setRemoteDescription() failed: "+e)})),this.sipPhoneSession.on("confirmed",(e=>{console.log("SIP Doorbell","Call confirmed. Originator: "+e.originator)})),this.sipPhoneSession.on("failed",(e=>{console.log("SIP Doorbell","Call failed. Originator: "+e.originator),this.endCall()})),this.sipPhoneSession.on("ended",(e=>{console.log("SIP Doorbell","Call ended. Originator: "+e.originator),this.endCall()})),this.sipPhoneSession.on("accepted",(e=>{console.log("SIP Doorbell","Call accepted. Originator: "+e.originator),this.ringSubject.next(!1),this.status={sipStatus:ot.OnCall,statusMessage:"On Call"},this.statusSubject.next(this.status);var t=new Date;this.intervalId=window.setInterval((()=>{var e=Math.abs((new Date).getTime()-t.getTime())/1e3,n=Math.floor(e/60)%60,s=(e-=60*n)%60;this.progress=(n+":"+Math.round(s)).split(":").map((e=>`0${e}`.slice(-2))).join(":"),this.progressSubject.next(this.progress)}),1e3)}));let t=async e=>{console.log("SIP Doorbell","Call: peerconnection: mediatrack event: kind: "+e.track.kind);let t=null;e.streams?(console.log("SIP Doorbell",`Call: peerconnection: mediatrack event: number of associated streams: ${e.streams.length} - using first stream`),t=e.streams[0]):(console.log("SIP Doorbell","Call: peerconnection: mediatrack event: no associated stream. Creating stream..."),t||(t=new MediaStream),t.addTrack(e.track)),"audio"===e.track.kind&&this.mediaSubject.next(t)};if("incoming"===this.sipPhoneSession.direction){if(this.sipPhoneSession.on("peerconnection",(e=>{console.log("SIP Doorbell","Call: peerconnection(incoming)"),e.peerconnection.addEventListener("track",t)})),this.auto_answer)return void this.sipPhoneSession.answer(this.sipCallOptions);this.status={sipStatus:ot.IncomingCall,statusMessage:"Incoming Call"},this.statusSubject.next(this.status),this.ringSubject.next(!0)}else"outgoing"===this.sipPhoneSession.direction?(this.sipPhoneSession.on("peerconnection",(e=>{console.log("SIP Doorbell","Call: peerconnection(outgoing)")})),this.status={sipStatus:ot.OutgoingCall,statusMessage:"Outgoing Call"},this.statusSubject.next(this.status),this.sipPhoneSession.connection.addEventListener("track",t)):console.log("SIP Doorbell","Call: direction was neither incoming or outgoing!")}))}async Terminate(){var e;null!=this.sipPhoneSession&&(null===(e=this.sipPhoneSession)||void 0===e||e.terminate())}async Call(){var e;this.status={sipStatus:ot.Calling,statusMessage:"Calling"},this.statusSubject.next(this.status),null===(e=this.sipPhone)||void 0===e||e.call(`sip:${this.doorbell_ext}@${this.server}`,this.sipCallOptions),this.ringSubject.next(!0)}async Answer(){var e;null!=this.sipPhoneSession&&(null===(e=this.sipPhoneSession)||void 0===e||e.answer(this.sipCallOptions))}Mute(e){var t,n;e?null===(t=this.sipPhoneSession)||void 0===t||t.mute({video:!1,audio:!0}):null===(n=this.sipPhoneSession)||void 0===n||n.unmute({video:!1,audio:!0})}}let ht=class extends ve{constructor(){super(),this.config=new we,this.phoneStatus={sipStatus:ot.Disconnected,statusMessage:"Disconnected"},this.phoneIcon="",this.progress="",this.sipPhone=null}static get properties(){return{hass:{},config:{}}}static get styles(){return ye.clientStyles}render(){var e;if(!this.checkPerson())return Z`
            <div slot="heading" class="heading">
              This card will be visible only for '${this.hass.states[null===(e=this.config.person)||void 0===e?void 0:e.person].attributes.friendly_name}'
            </div>`;const t=this.phoneStatus.sipStatus!=ot.Disconnected;return Z`
            <ha-card style=${Ae({"--tile-color":"var(--state-binary_sensor-on-color, var(--state-binary_sensor-active-color, var(--state-active-color)));"})} class=${Se({active:t})}>
              <div class="background" aria-labelledby="info">
                <ha-ripple .disabled=true></ha-ripple>
              </div>
              <div class="container">
                <div class="content">
                  <audio id="toneAudio" style="display:none" loop controls></audio>
                  <div class="icon-container">
                    <ha-tile-icon>
                      <ha-state-icon
                        .icon=${this.phoneIcon}
                        .hass=${this.hass}
                      ></ha-state-icon>
                    </ha-tile-icon>                       
                  </div>
                  <ha-tile-info
                    id="info"
                    .primary="${this.phoneStatus.statusMessage} (ext: ${this.config.person.ext})"
                    .secondary=${this.progress}
                  ></ha-tile-info>
                </div>
              </div>
            </ha-card>
            `}checkPerson(){var e;let t=this.hass.states[null===(e=this.config.person)||void 0===e?void 0:e.person].attributes.user_id;return this.hass.user.id==t}firstUpdated(){console.log("UUUUUUUUUUUUUUUUUUUUU",this.hass.user),console.log("HHHHHHHHHHHHHHHHHHHHH",this.hass.states),console.log("GGGGGGGGGGGGGGGGGGGGG",this.hass),this.checkPerson()&&this.connect()}setConfig(e){var t,n;if(!e.server)throw new Error("You need to define a server!");if(!e.port)throw new Error("You need to define a port!");if(null==e.prefix)throw new Error("You need to define a prefix!");if(!(null===(t=e.person)||void 0===t?void 0:t.person))throw new Error("You need to define person who will be connected as recipient");if(!(null===(n=e.person)||void 0===n?void 0:n.ext))throw new Error("You need to define extension of person who will be connected as recipient");this.config=e}getCardSize(){return 1}async connect(){var e,t,n,s;if(this.requestUpdate(),console.log("PHONE",this.hass.services["sip-doorbell"]),null==this.hass.services["sip-doorbell"]){let e=new ct(this.config.server,this.config.port,this.config.prefix,this.config.person.ext,this.config.secret,this.config.doorbell_ext,this.config.auto_answer);this.hass.services["sip-doorbell"]=e}else console.log("Already connected from other card");this.sipPhone=this.hass.services["sip-doorbell"],null===(e=this.sipPhone)||void 0===e||e.onStatus.subscribe((e=>{switch(this.phoneStatus=e,e.sipStatus){case ot.Disconnected:this.phoneIcon="mdi:phone-off";break;case ot.Idle:case ot.Registered:this.phoneIcon="mdi:phone-check";break;case ot.IncomingCall:this.phoneIcon="mdi:phone-incoming";break;case ot.OutgoingCall:this.phoneIcon="mdi:phone-outgoing";break;case ot.Calling:this.phoneIcon="mdi:phone-ring";break;case ot.OnCall:this.phoneIcon="mdi:phone-in-talk"}super.requestUpdate()})),null===(t=this.sipPhone)||void 0===t||t.onRing.subscribe((e=>{console.log("RING",e)})),null===(n=this.sipPhone)||void 0===n||n.onProgress.subscribe((e=>{this.progress=e,super.requestUpdate()})),null===(s=this.sipPhone)||void 0===s||s.connect()}};ht=s([Ee("sipjs-doorbell-client-card")],ht),window.customCards=window.customCards||[],window.customCards.push({type:"sipjs-doorbell-client-card",name:"SIP Doorbell Client Card",preview:!1,description:"A SIP doorbell client card"});let dt=class extends ve{constructor(){super(),this.config=new we,this.phoneStatus={sipStatus:ot.Disconnected,statusMessage:"Disconnected"},this.progress="00:00",this.sipPhone=null}static get properties(){return{hass:{},config:{},currentCamera:{}}}static get styles(){return ye.styles}render(){var e;return this.checkPerson()?Z`
            <audio id="remoteAudio" style="display:none"></audio>
                <style>
                    ha-icon-button {
                        --mdc-icon-button-size: ${this.config.button_size?d(this.config.button_size):_`48`}px;
                        --mdc-icon-size: ${this.config.button_size?d(this.config.button_size-25):_`23`}px;
                    }

                </style>
                <div slot="heading" class="heading">
                    <ha-header-bar>
                        <span slot="title" id="name" class="header-text">${this.phoneStatus.statusMessage}</span>
                        <span slot="actionItems" id="time" class="header-text">${this.progress}</span>
                    </ha-header-bar>
                </div>
                <div class="content" style="flex-flow: row;"> 
                    ${void 0!==this.config.doorbell_camera?Z`
                        <ha-camera-stream
                            allow-exoplayer
                            muted
                            .hass=${this.hass}
                            .stateObj=${this.hass.states[this.config.doorbell_camera]}
                        ></ha-camera-stream>
                    `:Z`<audio id="remoteAudio" style="display:none"></audio>`}
                    <div class="box">
                        <div class="row">
                            ${this.phoneStatus.sipStatus!=ot.Disconnected?Z`<ha-icon-button
                                  class="accept-btn"
                                  .label=${"Accept Call"}
                                  @click="${this._answer}"
                                  ><ha-icon icon="hass:phone"></ha-icon>
                              </ha-icon-button>`:Z`<ha-icon-button></ha-icon-button>`}
                        </div>
                        <div class="row">
                            ${this.phoneStatus.sipStatus==ot.OnCall?Z`<ha-icon-button
                                    .label=${"Mute audio"}
                                    @click="${this._toggleMuteAudio}"
                                    ><ha-icon id="muteaudio-icon" icon="hass:microphone"></ha-icon>
                                </ha-icon-button>`:Z`<ha-icon-button></ha-icon-button>`}
                        </div>
                        <div class="row">
                            ${this.config.buttons?this.config.buttons.map((e=>Z`
                                        <ha-icon-button
                                            @click="${()=>this._button(e.entity)}"
                                            .label="${e.name}"
                                            ><ha-icon icon="${e.icon}"></ha-icon>
                                        </ha-icon-button>
                                    `)):""}
                        </div>
                        <div class="row">
                            ${this.phoneStatus.sipStatus==ot.OnCall||this.phoneStatus.sipStatus==ot.IncomingCall?Z`<ha-icon-button
                                  class="hangup-btn"
                                  .label=${"Decline Call"}
                                  @click="${this._hangup}"
                              ><ha-icon icon="hass:phone-hangup"></ha-icon>
                              </ha-icon-button>`:Z`<ha-icon-button></<ha-icon-button>`}
                        </div>
                    </div>
                </div>
            `:Z`
            <div slot="heading" class="heading">
              This card will be visible only for '${this.hass.states[null===(e=this.config.person)||void 0===e?void 0:e.person].attributes.friendly_name}'
            </div>`}checkPerson(){var e;let t=this.hass.states[null===(e=this.config.person)||void 0===e?void 0:e.person].attributes.user_id;return this.hass.user.id==t}firstUpdated(){console.log("UUUUUUUUUUUUUUUUUUUUU",this.hass.user),console.log("HHHHHHHHHHHHHHHHHHHHH",this.hass.states),console.log("GGGGGGGGGGGGGGGGGGGGG",this.hass),this.checkPerson()&&this.connect()}setConfig(e){var t,n;if(!e.server)throw new Error("You need to define a server!");if(!e.port)throw new Error("You need to define a port!");if(null==e.prefix)throw new Error("You need to define a prefix!");if(!(null===(t=e.person)||void 0===t?void 0:t.person))throw new Error("You need to define person who will be connected as recipient");if(!(null===(n=e.person)||void 0===n?void 0:n.ext))throw new Error("You need to define extension of person who will be connected as recipient");this.config=e}getCardSize(){return 1}async connect(){var e,t,n,s;if(this.requestUpdate(),console.log("PHONE",this.hass.services["sip-doorbell"]),null==this.hass.services["sip-doorbell"]){let e=new ct(this.config.server,this.config.port,this.config.prefix,this.config.person.ext,this.config.secret,this.config.doorbell_ext,this.config.auto_answer);this.hass.services["sip-doorbell"]=e}else console.log("Already connected from other card");this.sipPhone=this.hass.services["sip-doorbell"],null===(e=this.sipPhone)||void 0===e||e.onStatus.subscribe((e=>{this.phoneStatus=e,super.requestUpdate()})),null===(t=this.sipPhone)||void 0===t||t.onMedia.subscribe((async e=>{let t=this.renderRoot.querySelector("#remoteAudio");if(null==e)await t.pause(),t.srcObject=null;else if(t.srcObject!=e){t.srcObject=e;try{await t.play()}catch(e){console.log("Error starting audio playback: "+e)}}})),null===(n=this.sipPhone)||void 0===n||n.onProgress.subscribe((e=>{this.progress=e,super.requestUpdate()})),null===(s=this.sipPhone)||void 0===s||s.connect()}async _answer(){var e,t,n;(null===(e=this.sipPhone)||void 0===e?void 0:e.status.sipStatus)==ot.Idle?await(null===(t=this.sipPhone)||void 0===t?void 0:t.Call()):await(null===(n=this.sipPhone)||void 0===n?void 0:n.Answer())}async _hangup(){var e;await(null===(e=this.sipPhone)||void 0===e?void 0:e.Terminate())}async _toggleMuteAudio(){var e,t,n;(null===(e=this.sipPhone)||void 0===e?void 0:e.isMuted)?(null===(t=this.sipPhone)||void 0===t||t.Mute(!1),this.renderRoot.querySelector("#muteaudio-icon").icon="hass:microphone"):(null===(n=this.sipPhone)||void 0===n||n.Mute(!0),this.renderRoot.querySelector("#muteaudio-icon").icon="hass:microphone-off")}async _button(e){const t=e.split(".")[0];let n;switch(console.log(t),t){case"script":case"scene":n="turn_on";break;case"button":n="press";break;case"light":case"switch":case"cover":case"input_boolean":n="toggle";break;default:return void console.log("No supported service")}console.log(n),await this.hass.callService(t,n,{entity_id:e})}};dt=s([Ee("sipjs-doorbell-controller-card")],dt),window.customCards=window.customCards||[],window.customCards.push({type:"sipjs-doorbell-controller-card",name:"SIP Doorbell Controller Card",preview:!1,description:"A SIP doorbell controller card"}),console.log("SIPJS Doorbell")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,